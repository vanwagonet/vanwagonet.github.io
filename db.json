{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/assets/images/favicon.ico","path":"assets/images/favicon.ico","modified":0,"renderable":0},{"_id":"source/assets/images/favicon.svg","path":"assets/images/favicon.svg","modified":0,"renderable":0},{"_id":"themes/eden/source/assets/css/style.css","path":"assets/css/style.css","modified":0,"renderable":1},{"_id":"themes/eden/source/assets/css/billie-holiday.png","path":"assets/css/billie-holiday.png","modified":0,"renderable":1},{"_id":"source/assets/images/andy.jpg","path":"assets/images/andy.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"efeba71f88709bbd76fd7fd8515ba0efd66b0238","modified":1525800534320},{"_id":"themes/eden/_config.yml","hash":"130bdb9f63360d3ca4a7786af38fb55210cc3a0f","modified":1632360044823},{"_id":"themes/eden/.babelrc","hash":"34c9e314c37581007c7d08fc8ef16568df98cc6e","modified":1525800534330},{"_id":"source/about/index.md","hash":"051dd6999e736862fc67d4169fa3224388a01796","modified":1525812282892},{"_id":"source/_posts/a-case-against-vendor-prefixes-in-css.md","hash":"8689cd6854df28561b515c6684003f5f04fa8663","modified":1525800534321},{"_id":"source/_posts/accessing-aws-simpledb-from-php.md","hash":"590d141c6ac65cb2344478fa3d2377202dc40b85","modified":1525800534321},{"_id":"source/_posts/about-andy.md","hash":"91a1e921a6397c6aaf29aa5588f55ddfa7dee090","modified":1525811673143},{"_id":"source/_posts/async-functions-delivering-on-promises.md","hash":"ab3f519685857f29e8e8eb886d0ea3dbf2f72623","modified":1525800534322},{"_id":"source/_posts/ambience-a-cappella.md","hash":"d4be304e80dd63693db856d80c12a32f2bb509f2","modified":1525800534321},{"_id":"source/_posts/barefoot-on-the-net.md","hash":"2855d57753449a38e9c4f82fd5459a0e5ad80e0d","modified":1525800534322},{"_id":"source/_posts/barefoot-revisited.md","hash":"bf809db4874d6baecf6fc7d81b12473047d552d9","modified":1525800534322},{"_id":"source/_posts/blu-ray-wins-the-blue-ribbon.md","hash":"788c4bf36b03eefba463005170279bf2cb58fc0e","modified":1525800534322},{"_id":"source/_posts/commonjs-in-the-browser.md","hash":"c53d158a6a21b42e71199b60196037f049892c3e","modified":1525800534323},{"_id":"source/_posts/breathless-in-a-new-world.md","hash":"d2ac6d8b19e72cdfe7fdea9d4cd0d00a93d9f1a2","modified":1525800534322},{"_id":"source/_posts/copyright-and-the-right-to-copy.md","hash":"292fb83c56250cc9db1f3d016d55e1d3ca5e9e8d","modified":1525800534323},{"_id":"source/_posts/enough-already.md","hash":"e7a8335b8cd989820ffc30cbcf9b14c6f8e3f5cf","modified":1525800534323},{"_id":"source/_posts/discontinuance.md","hash":"1ea52ed76ca611ca579b093b78af4b257abcf60a","modified":1525800534323},{"_id":"source/_posts/distributed-system-design.md","hash":"4a2855f1e908027e3b5c109dd84d5efc4551bfa3","modified":1525800534323},{"_id":"source/_posts/equality-and-homogeneity.md","hash":"0eb9fe016148e5523e7d9d601dc6bb9624757338","modified":1525800534324},{"_id":"source/_posts/growing-software.md","hash":"872d3db36c30ae944c4a0dcf4e7b8e863cded74a","modified":1525800534324},{"_id":"source/_posts/hello-world.md","hash":"2febf8791c594793b47ad8e205edc113cb6ce4f0","modified":1525800534324},{"_id":"source/_posts/internet-safety-podcast-and-wiki.md","hash":"76c40d5d90e1ffb4e8133c9a5aa63b84e0868c29","modified":1525800534325},{"_id":"source/_posts/greater-than-the-sum-of-its-components.md","hash":"c15f748ad63ccdf4dd63a1417b899282af4186cc","modified":1525800534324},{"_id":"source/_posts/its-a-small-world-part-ii.md","hash":"2bb047f13957a65f8b88d22519581260ded34d76","modified":1525800534325},{"_id":"source/_posts/i-thought-i-new-you-javascript.md","hash":"bc6eb1d6a1d503d856a02250eeaa26cb7e759344","modified":1525800534324},{"_id":"source/_posts/its-a-small-world.md","hash":"bc5c9f89fc75d602cd92b849d2fb79808c73228b","modified":1525800534325},{"_id":"source/_posts/javascript-require-update.md","hash":"c29567e4075c6c37db000afa8c6cbac414bb4800","modified":1525800534325},{"_id":"source/_posts/json-and-post-in-php.md","hash":"744810784901c74d474f827c093119c899fdb363","modified":1525800534326},{"_id":"source/_posts/javascript-require-in-100-lines-of-code.md","hash":"a8877544b87d9ac90427ee27877f069185a8ddd7","modified":1525800534325},{"_id":"source/_posts/internet-protests-to-censorship.md","hash":"d644ca02b1c55464d60af5bc0028e52e22ea6206","modified":1525800534324},{"_id":"source/_posts/jumping-the-fold.md","hash":"3223ed1c88763b78ec97e8801dfef87bb899c45d","modified":1525800534326},{"_id":"source/_posts/load-only-when-needed-or-preload-everything.md","hash":"df3b3124d1c0daa3d26b900a86ebe1d022815abe","modified":1525800534326},{"_id":"source/_posts/one-world-one-family.md","hash":"b6b7c4e0e9ffaf0b5259005ad37fc8da4197eb49","modified":1525800534327},{"_id":"source/_posts/more-than-just-a-member.md","hash":"03efbd7f98cbefdefa3909594d1f5897ec6d4f82","modified":1525800534326},{"_id":"source/_posts/private-is-public-are-you-protected.md","hash":"a487d5a06e843f6aa1c3bafde25ab8d9a29ee7f7","modified":1525800534327},{"_id":"source/_posts/on-pattern-hating.md","hash":"4bc6525b99e8896ae4e28a3105e19de26bf056f5","modified":1525800534326},{"_id":"source/_posts/the-bazaar-and-the-bizarre.md","hash":"aa95fe7ceac796803ecff6207c41a19b61c19813","modified":1525800534327},{"_id":"source/_posts/the-pen-is-mighty.md","hash":"0291eb4f26029b2c3db172276689a31814f9213e","modified":1525800534327},{"_id":"source/_posts/vista-linuxs-best-friend.md","hash":"e543e8fcf6831a3b21b45860192330012feedaf0","modified":1525800534327},{"_id":"source/_posts/some-thoughts-on-web-4-0.md","hash":"f894256f0145f237e02c777f866ebf73bdf208ea","modified":1525800534327},{"_id":"source/_posts/welcome-to-the-great-northwest.md","hash":"7ff02c90a44f7b4cbbf1b9b8b3f5f0eab374e81e","modified":1525800534328},{"_id":"source/_posts/why-we-are-hooked.md","hash":"db9fcca2ed3bff98717c400c39e0a8e1f6515088","modified":1525800534328},{"_id":"source/all-archives/index.md","hash":"dd74cb817b307fadf87882a88b9361d3efeb2820","modified":1525800534328},{"_id":"source/all-categories/index.md","hash":"cc7c946bcb9ace14ffb22504a1b518a0094c1bd9","modified":1525800534328},{"_id":"source/_posts/who-am-i.md","hash":"1439ddb9877e8ddc46d25d71f5461aac766c2e27","modified":1559233429228},{"_id":"source/all-tags/index.md","hash":"dc642f1396a6f20da539f45810fc14aecd156aa7","modified":1525800534329},{"_id":"source/faith/index.md","hash":"210b1f0adc22bed9e32455dd459f46b3fb431d39","modified":1525800534329},{"_id":"themes/eden/layout/all-archives.jsx","hash":"a76eb2c63e7454aace62df3761f4e1ae39f40b08","modified":1525800534334},{"_id":"themes/eden/layout/all-tags.jsx","hash":"4b333ee0b1425d70ee2679054d9cd4da39941459","modified":1525800534334},{"_id":"themes/eden/layout/.DS_Store","hash":"5c3bb0197ccf71f99dfe27bc867f0a809ded1822","modified":1526941326300},{"_id":"themes/eden/layout/all-categories.jsx","hash":"dbef7c982147bbeefb227b7cdc2acbecf3796cde","modified":1525800534334},{"_id":"themes/eden/layout/archive.jsx","hash":"38a8bfc048a3dabc17aeea3541f499d7b69fe249","modified":1525800534334},{"_id":"themes/eden/layout/index.jsx","hash":"454455c16ed07102797d8e586ea4097bed7800cb","modified":1525800534335},{"_id":"themes/eden/layout/layout.jsx","hash":"e8f253f02a3698b3fef043e8cad5aa2eeade0114","modified":1525800534335},{"_id":"themes/eden/layout/page.jsx","hash":"a4e2f4b055f20b3402a60b5e4f05cefafc8d6276","modified":1525800534335},{"_id":"themes/eden/layout/post.jsx","hash":"35c39ffb7fcc1d1ccabeae1396b724285c3fd88c","modified":1525800534335},{"_id":"themes/eden/layout/category.jsx","hash":"ac704e619f7b4743a0289dbe9e01c9003803d8ea","modified":1525800534335},{"_id":"themes/eden/layout/tag.jsx","hash":"bc96a81cf0736bcfe60a89a36d0115226fa7e455","modified":1525800534335},{"_id":"source/assets/images/favicon.ico","hash":"603d858a64fd2ba635269e1b47799b3eb00b38ef","modified":1525800534329},{"_id":"source/assets/images/favicon.svg","hash":"83f151fbf230ed1680ddabe8b1b662a34d4f54eb","modified":1525800534329},{"_id":"themes/eden/layout/_partial/footer.jsx","hash":"29990aff4201836eb6e48dec00d16d5b8628ea50","modified":1525800534330},{"_id":"themes/eden/layout/_partial/header.jsx","hash":"17b83efc10d1c238ea7ebbf4e80a2dc1f86f8282","modified":1525800534330},{"_id":"themes/eden/layout/_partial/archive.jsx","hash":"492b1f8ae0ad103db03e46a1cff1b1f31dea154c","modified":1525800534330},{"_id":"themes/eden/layout/_partial/head.jsx","hash":"4ee0c840e5bbbef5f4f818bc8309ba2e960e6319","modified":1525800534330},{"_id":"themes/eden/layout/_partial/index.jsx","hash":"08c3b03f9909f439e05e16394c13721478295f2c","modified":1525800534333},{"_id":"themes/eden/layout/_partial/pagination.jsx","hash":"414da474a2e247fb774d84d3f9ecd246e82372be","modified":1525800534333},{"_id":"themes/eden/layout/_partial/post.jsx","hash":"92a653c303a6b1fbf6b879f02fc7120573b922ba","modified":1525800534333},{"_id":"themes/eden/layout/_partial/script.jsx","hash":"88551d71f8003fb4e0b6db8f7b6ff2411d68544d","modified":1525800534334},{"_id":"themes/eden/layout/_partial/sidebar.jsx","hash":"95383f81adf3e34395265ac0cdac9c1d0914e526","modified":1525800534334},{"_id":"source/assets/images/andy.png","hash":"3eee879628a920cd5d63d72ab04464055fa743a4","modified":1525812551384},{"_id":"themes/eden/layout/_partial/icon/archive.jsx","hash":"3edb20ff5002b754683f58b18e10311323103c63","modified":1525800534331},{"_id":"themes/eden/layout/_partial/icon/btc.jsx","hash":"2f27c05ac18ac3d0aa0cfd472beb73c4341bbd4f","modified":1525800534331},{"_id":"themes/eden/layout/_partial/icon/flame.jsx","hash":"c1315d577438f63002ef68af405716f71cffc3d4","modified":1525800534331},{"_id":"themes/eden/layout/_partial/icon/bookmark.jsx","hash":"f48de2c173be16060722e32d303b91c436e6d390","modified":1525800534331},{"_id":"themes/eden/layout/_partial/icon/github.jsx","hash":"c77eb6e112d31c800ae53b869ebd518945d0435d","modified":1525800534331},{"_id":"themes/eden/layout/_partial/icon/key.jsx","hash":"5abc961f53106e27bba54d945a7a3a7fc395e9fe","modified":1525800534332},{"_id":"themes/eden/layout/_partial/icon/linkedin.jsx","hash":"505f7568fbd4b0dcabb3998a1c97bf6f95134410","modified":1525800534332},{"_id":"themes/eden/layout/_partial/icon/rss.jsx","hash":"b5484d0647cda6650598b39988b5f21ac79bed33","modified":1525800534332},{"_id":"themes/eden/layout/_partial/icon/home.jsx","hash":"9d300cdd4ee3b67986d26aab379e4b37bd0ebf2d","modified":1525800534331},{"_id":"themes/eden/layout/_partial/icon/tags.jsx","hash":"029bab9d8d466d1a8ac707e0541d78eaff5a7607","modified":1525800534332},{"_id":"themes/eden/layout/_partial/icon/twitter.jsx","hash":"0cc99aa0f9645b87d648de7d81999a168e204bdf","modified":1525800534332},{"_id":"themes/eden/layout/_partial/post/actions.jsx","hash":"412ddd9cb47c49f778a9cba3a3caf1b29b5f0167","modified":1525800534333},{"_id":"themes/eden/layout/_partial/post/header.jsx","hash":"569a0dee014e8bcdba5e11fce75aa7c6c632514d","modified":1525800534333},{"_id":"themes/eden/layout/_partial/icon/stack-overflow.jsx","hash":"3d51bc46c241ec2e84abb9212fbcf03c0418ca7d","modified":1525800534332},{"_id":"themes/eden/layout/_partial/post/gallery.jsx","hash":"6274f36912ae7e4d0ed50240b0fcaae9268206d1","modified":1525800534333},{"_id":"themes/eden/source/assets/css/style.css","hash":"405243b11ea6a7bea17519f55e6e4aae3ebfedd1","modified":1525800534336},{"_id":"themes/eden/source/assets/css/billie-holiday.png","hash":"0f85020bd3111833822da15efde27a4c7e8e7a79","modified":1525800534336},{"_id":"public/atom.xml","hash":"8a968032fd8efc5644258f98d39e1a9eba043ab6","modified":1559233560963},{"_id":"public/about/index.html","hash":"bf6b4b1c2cf2ee433a701b455c856eafc6b5f482","modified":1632360828455},{"_id":"public/all-archives/index.html","hash":"644642b93f6c7434b694ca5342647d9d7246237b","modified":1632360828455},{"_id":"public/all-categories/index.html","hash":"5108a1aedc473de58189a73bbf5fb2ae170eedfa","modified":1632360828455},{"_id":"public/faith/index.html","hash":"aa0e98ee89601e20dbe7dd7ba06944e75cb44af5","modified":1632360828455},{"_id":"public/2018/05/08/who-am-i/index.html","hash":"7feee2f0cf82e3178ed022c4483c34bba47813ee","modified":1632360828455},{"_id":"public/2015/07/25/jumping-the-fold/index.html","hash":"a8f08fdc2bc245ef920c0ee7f49412f8dd089006","modified":1632360828455},{"_id":"public/2015/06/23/breathless-in-a-new-world/index.html","hash":"8f1c988cd33b2c2d518ed6faa1ed87ce92b863cf","modified":1632360828455},{"_id":"public/2015/05/11/async-functions-delivering-on-promises/index.html","hash":"c1c9d4c6e0c0e07b732dc916309bc52a29d395cc","modified":1632360828455},{"_id":"public/2013/02/19/greater-than-the-sum-of-its-components/index.html","hash":"982174169b83e749a9598bf4a31b0e75ad0061b1","modified":1632360828455},{"_id":"public/2011/10/07/on-pattern-hating/index.html","hash":"4bce257d5de4795f5712c87d6b401307f601858d","modified":1632360828455},{"_id":"public/2011/09/22/commonjs-in-the-browser/index.html","hash":"06e58228359ef4c1feed1a1a54e93acfc7418176","modified":1632360828455},{"_id":"public/2011/04/16/some-thoughts-on-web-4-0/index.html","hash":"bf1c5a9741e1fcf975f6e3029c9ae8435efaefe0","modified":1632360828455},{"_id":"public/2011/04/13/load-only-when-needed-or-preload-everything/index.html","hash":"b29025a108d376591dc629b7b6d57602a20bb1e3","modified":1632360828455},{"_id":"public/2010/08/21/javascript-require-update/index.html","hash":"aab51e853f567107a06729921c08a779035e882c","modified":1632360828455},{"_id":"public/2009/02/04/json-and-post-in-php/index.html","hash":"f8ad593989a2e276c35c51009fff177c22a6ae33","modified":1632360828455},{"_id":"public/2009/01/19/distributed-system-design/index.html","hash":"5a4d66c5e85b37e844ab49b96c23bf6a1aef1d39","modified":1632360828455},{"_id":"public/2008/06/09/discontinuance/index.html","hash":"136e3210188f214e4e3941c444e33f33c818b04a","modified":1632360828455},{"_id":"public/2008/05/20/barefoot-revisited/index.html","hash":"11abdc51b42ab4931ef313efa95dd86f605480bd","modified":1632360828455},{"_id":"public/2008/05/18/welcome-to-the-great-northwest/index.html","hash":"8eaf4c5704de6c112e40066373684001fcb48d34","modified":1632360828455},{"_id":"public/2008/04/11/growing-software/index.html","hash":"166ab8251e95f191dbb56c9259afdea7cc9a55b3","modified":1632360828455},{"_id":"public/2008/04/08/ambience-a-cappella/index.html","hash":"13f3476b69266d7eafce9de1deb26ab668f95142","modified":1632360828455},{"_id":"public/2008/04/08/copyright-and-the-right-to-copy/index.html","hash":"241a932775eac78b74d8d515dbf54bf5152dfb46","modified":1632360828455},{"_id":"public/2008/03/28/internet-safety-podcast-and-wiki/index.html","hash":"7724d3c9754c6398fd81a19144bb7cf0869d420e","modified":1632360828455},{"_id":"public/2008/04/01/why-we-are-hooked/index.html","hash":"d3b5915bcd4c144801e6b518a2cadfc581e60658","modified":1632360828455},{"_id":"public/2008/03/27/the-bazaar-and-the-bizarre/index.html","hash":"97dece0a9bf409eafbfdcc1cf2a4575c34ab3f9b","modified":1632360828455},{"_id":"public/2008/03/20/its-a-small-world-part-ii/index.html","hash":"d90c87ddcbbdbcac553557b94fbb8b0db3df64c5","modified":1632360828455},{"_id":"public/2008/03/12/internet-protests-to-censorship/index.html","hash":"86d91f795ff698433092537b061c727b46937512","modified":1632360828455},{"_id":"public/2008/03/10/equality-and-homogeneity/index.html","hash":"83b5786d814ca3c62cb9e6cef5dcb2e98d6e0552","modified":1632360828455},{"_id":"public/2008/02/27/blu-ray-wins-the-blue-ribbon/index.html","hash":"8e84cf4d98ef9c7aa8e89d941d38da6c39ca576b","modified":1632360828455},{"_id":"public/2008/02/25/barefoot-on-the-net/index.html","hash":"d89b8e5ea2c8bb38f836fe62e8c5a8c6d96c6a04","modified":1632360828455},{"_id":"public/2008/02/21/more-than-just-a-member/index.html","hash":"43e4fe8d7d3082a67a104c2b5f782a0e3a9b291b","modified":1632360828455},{"_id":"public/2008/02/20/vista-linuxs-best-friend/index.html","hash":"f06fd8f4523ad792482548d4e382feaf4777d9df","modified":1632360828455},{"_id":"public/2008/02/06/one-world-one-family/index.html","hash":"5a15f460b1f55c74d7df366c30a4c2c3f32c7dd4","modified":1632360828455},{"_id":"public/2008/01/30/the-pen-is-mighty/index.html","hash":"ab84859aefb365698ac972b857e32124ed8d7a56","modified":1632360828455},{"_id":"public/2008/01/28/enough-already/index.html","hash":"44067785f5a6c94f86044beb7559b6c7db5e7777","modified":1632360828455},{"_id":"public/2008/01/23/private-is-public-are-you-protected/index.html","hash":"ec27ef37e5798b0d542b2b5501bce1f3864757a7","modified":1632360828455},{"_id":"public/2008/01/16/its-a-small-world/index.html","hash":"dcb220546ab908aa6b9bb2577f51eea536fa11e9","modified":1632360828455},{"_id":"public/2008/01/11/hello-world/index.html","hash":"a4ac2802758846f6c12cad7bfe6a6bc2d7810947","modified":1632360828455},{"_id":"public/2008/01/11/about-andy/index.html","hash":"f12e72dc0413699b13f00e657ca91c500d1019e6","modified":1632360828455},{"_id":"public/archives/page/2/index.html","hash":"40ce498631b7317ce04444390f5f599efc484f5e","modified":1632360828455},{"_id":"public/archives/index.html","hash":"7168bd5b31b90bfab44bfcb35092649df4fae1bd","modified":1632360828455},{"_id":"public/archives/page/3/index.html","hash":"d3327280df3243086d37c55e0376cfc76dde55bb","modified":1632360828455},{"_id":"public/archives/page/4/index.html","hash":"7196159b2f78db73a503a5152e40065f83bd8e1b","modified":1632360828455},{"_id":"public/archives/2008/index.html","hash":"e790fc59009b834b3a230c7ea58d0b7d6ef0171d","modified":1632360828455},{"_id":"public/archives/2008/page/2/index.html","hash":"b8bfd42f9d946bf0eeda16faa840b1b0db700389","modified":1632360828455},{"_id":"public/archives/2008/page/3/index.html","hash":"86ed353ccdab30bc89fb90f89d1b3dd2ecc03638","modified":1632360828455},{"_id":"public/archives/2008/01/index.html","hash":"7de8f7f3c7685cdd131201a46c9eaa20ef866b91","modified":1632360828455},{"_id":"public/archives/2008/02/index.html","hash":"33cceb3bc031efc7eb946cb381c11981acbde8d3","modified":1632360828455},{"_id":"public/archives/2008/03/index.html","hash":"6302fac8f68c5fb7fe2c28589ec015df695e2f46","modified":1632360828455},{"_id":"public/archives/2008/04/index.html","hash":"d86e96dd3027e327b51941c7e8a4be6ddc3d887f","modified":1632360828455},{"_id":"public/archives/2008/05/index.html","hash":"01663d122bb52a42973ee08e3d083171d47066e3","modified":1632360828455},{"_id":"public/archives/2008/06/index.html","hash":"88249f36d1a4636ee63e64eccadadc8aedd785b1","modified":1632360828455},{"_id":"public/archives/2009/index.html","hash":"4da5fc64e8f25e554146c912a2b6838a1ec49f48","modified":1632360828455},{"_id":"public/archives/2009/01/index.html","hash":"06d10025bc569f2753164904568ea6c79923ce2f","modified":1632360828455},{"_id":"public/archives/2009/02/index.html","hash":"63df9c65f7b9f00171587e277e9e52e295ec450e","modified":1632360828456},{"_id":"public/archives/2010/index.html","hash":"03fd12c4343df0ee025c22ba8a569ca632c190ba","modified":1632360828456},{"_id":"public/archives/2010/01/index.html","hash":"262d7f255b077a2d45e1ff5462574ac84b2cccdf","modified":1632360828456},{"_id":"public/archives/2010/08/index.html","hash":"ec2ff65eb43eece0f36fc30b769170f740e406f2","modified":1632360828456},{"_id":"public/archives/2011/index.html","hash":"d763e7dd67b322a8d44108233ca81a321da99259","modified":1632360828456},{"_id":"public/archives/2011/04/index.html","hash":"a1728cc73285c7db26793f6f20553c5f6aef760d","modified":1632360828456},{"_id":"public/archives/2011/09/index.html","hash":"acc2ea3408aa1a7834252a14190e6f34a4273237","modified":1632360828456},{"_id":"public/archives/2011/10/index.html","hash":"0820ed3f74a9fd5a19f6740aab9e5bd08ab07588","modified":1632360828456},{"_id":"public/archives/2012/index.html","hash":"39bdedc95e06abfc7398aa06992fae2461c47150","modified":1632360828456},{"_id":"public/archives/2012/02/index.html","hash":"a6b7d22a25e5d260ba148ef77597d20cae3135e4","modified":1632360828456},{"_id":"public/archives/2013/index.html","hash":"dc37a56631af28faa8403fb8b11bcd2b0abe8fe7","modified":1632360828456},{"_id":"public/archives/2013/02/index.html","hash":"7617c0ec07072571bc25df124b2a8ef879714e04","modified":1632360828456},{"_id":"public/archives/2015/index.html","hash":"ff8c4c34c12cedaf133db8561748fa79db016e6b","modified":1632360828456},{"_id":"public/archives/2015/05/index.html","hash":"d0c84e54dcd02f8471041daa1fb2bb6347274d73","modified":1632360828456},{"_id":"public/archives/2015/06/index.html","hash":"4b82c02752a0d697f46af85dde0a84e60f11284a","modified":1632360828456},{"_id":"public/archives/2015/07/index.html","hash":"64320da0fa997937c554d6025d09466e42add6a7","modified":1632360828456},{"_id":"public/archives/2018/index.html","hash":"d2a17144bd17d026f2352e08e7a971738e24fc61","modified":1632360828456},{"_id":"public/archives/2018/05/index.html","hash":"a03d8cf6c52db169778300fc214f4f237e6905dc","modified":1632360828456},{"_id":"public/categories/css/index.html","hash":"3d5d3c7e497a4280c9119b169c753ef10c399814","modified":1632360828458},{"_id":"public/categories/general/index.html","hash":"d86d8d0b517a6ce3593265d3acd3a0e8064412a1","modified":1632360828458},{"_id":"public/categories/javascript/index.html","hash":"caad01b2a524087465d410483170b0f2307b4a3d","modified":1632360828458},{"_id":"public/categories/ethics-and-computers-in-society/index.html","hash":"09db81068fef94057a13444be832cd12977a5a11","modified":1632360828458},{"_id":"public/categories/ethics-and-computers-in-society/page/2/index.html","hash":"1ae722be988eb05bfd97a40fa84696cedb728209","modified":1632360828458},{"_id":"public/categories/poetry/index.html","hash":"563290c1b8ed30507676f94ad9d704c45b4a157c","modified":1632360828458},{"_id":"public/categories/prose/index.html","hash":"a70c7bc4b8383453d6ebb0add34af3356028b823","modified":1632360828458},{"_id":"public/categories/distributed-system-design/index.html","hash":"02fb2391c14e5c271bc661ad20f35e6a02a9db9c","modified":1632360828458},{"_id":"public/categories/faith/index.html","hash":"3f726e2f363bfdd1e1bd2aa1abb1c9302b7dcfbb","modified":1632360828458},{"_id":"public/index.html","hash":"be7046306582f0378f1f1711cefd8104927d3169","modified":1632360828458},{"_id":"public/page/2/index.html","hash":"8d13a7ab996b7078ebfae9a9bb123293fb56ecef","modified":1632360828458},{"_id":"public/page/3/index.html","hash":"c15a268401f7a5237985b63f5e036d11b6c229b2","modified":1632360828458},{"_id":"public/page/4/index.html","hash":"01171685844b920059f7009a15c32a60f0fc2975","modified":1632360828458},{"_id":"public/tags/browser/index.html","hash":"d1cb827358381227db0e54f91ff79c7f9fb8e141","modified":1632360828456},{"_id":"public/tags/css/index.html","hash":"5774e86012ff23c7ea01a8e09e396bc15ac61e8d","modified":1632360828456},{"_id":"public/tags/moz/index.html","hash":"a6caff073c11e7484069a22569cb832ddb37e919","modified":1632360828456},{"_id":"public/tags/ms/index.html","hash":"9f23c4712bf2e4fbbebd881c61a7fa5057fb08dd","modified":1632360828456},{"_id":"public/tags/prefix/index.html","hash":"37ea7772a6a3b2d6671c2253098cf80382535b92","modified":1632360828456},{"_id":"public/tags/web/index.html","hash":"20d56a9492a86e35c38e791ab1870ba1ed793f05","modified":1632360828456},{"_id":"public/tags/webkit/index.html","hash":"a1aaf5494e8c72c43d290a4a284e6c9e73bdbfbc","modified":1632360828456},{"_id":"public/tags/16-tons/index.html","hash":"1d338cacd2320e9c49db9c908fb38676ad0dc90c","modified":1632360828456},{"_id":"public/tags/a-cappella/index.html","hash":"388c4a3620b4e20224f1bab01d874541c5313f8e","modified":1632360828456},{"_id":"public/tags/ambience/index.html","hash":"5c6c89fb8cde7d7c9eb824c70c12a3f44cde1fb0","modified":1632360828456},{"_id":"public/tags/in-the-still-of-the-night/index.html","hash":"98377605b70ea2e13eac33f3d7ff611e12563be5","modified":1632360828456},{"_id":"public/tags/jacob-morris/index.html","hash":"a544c2e6d376eb5a618ab7e0b23fe5cc803d0fdd","modified":1632360828456},{"_id":"public/tags/kiss-the-girl/index.html","hash":"6bac8aaf75b6bd925fadb12b3f49237ed50f0bbb","modified":1632360828456},{"_id":"public/tags/music/index.html","hash":"78d3ff7938e570671a8bd5c2fc277eac5b0df3e1","modified":1632360828456},{"_id":"public/tags/nathan-morris/index.html","hash":"2cd141a5a2b2bd3dc8d588f06d5c3bc10ffa4c02","modified":1632360828456},{"_id":"public/tags/trevor-watts/index.html","hash":"cece8f40131227380ba60c37b5cefd3fdc16ab10","modified":1632360828456},{"_id":"public/tags/es-2016/index.html","hash":"3b38eb521854f02d928da156b522b700aa71dc21","modified":1632360828456},{"_id":"public/tags/javascript/index.html","hash":"7c4014d6adf8b5e85c767f7bb17376a9a9f9a3ca","modified":1632360828456},{"_id":"public/tags/cliff-stoll/index.html","hash":"1118dc5b9df114b2681399eaa9711bae6fd69f99","modified":1632360828456},{"_id":"public/tags/internet/index.html","hash":"163f7727e3c3516cc12cdd7b5208d6aeba764adb","modified":1632360828456},{"_id":"public/tags/networks/index.html","hash":"73946b296d1b6e6b514d617ce6cb97d78b95819e","modified":1632360828456},{"_id":"public/tags/privacy/index.html","hash":"18ddfd96c10429c4cd367bf9569dd4a24485d05a","modified":1632360828456},{"_id":"public/tags/the-cuckoo-s-egg/index.html","hash":"dcf43fc96bd049fedd446cc136305db1b6f96c73","modified":1632360828456},{"_id":"public/tags/trust/index.html","hash":"adf6af97f3720081544ef7064b9e70b644e296fe","modified":1632360828456},{"_id":"public/tags/virus/index.html","hash":"ac4f885c7f05d797c1174a9b40139b09a65169f1","modified":1632360828456},{"_id":"public/tags/worm/index.html","hash":"045aee5cbd787b860f36b7f1b7422f008ff836d8","modified":1632360828456},{"_id":"public/tags/barefoot/index.html","hash":"8ead614e6e07ea02a00cfdb98e15f76620d97336","modified":1632360828456},{"_id":"public/tags/poetry/index.html","hash":"cc2759b6afd41e4bb7026997c056076af780d22b","modified":1632360828456},{"_id":"public/tags/safety/index.html","hash":"69c8ff7a74f7d1729f61742f54bb16b634ee8d44","modified":1632360828456},{"_id":"public/tags/beta/index.html","hash":"37a5f2927314bff2d20636ee29ec7ac70f8bbd5c","modified":1632360828456},{"_id":"public/tags/betamax/index.html","hash":"cd5011efa371c4ae6bf8522ea4912892a6019101","modified":1632360828456},{"_id":"public/tags/blu-ray/index.html","hash":"fd9418225f6726639433fcb4f540e3fe06c42d44","modified":1632360828456},{"_id":"public/tags/dvd/index.html","hash":"6287622561f4261e8187409fb6f2db81a639aef5","modified":1632360828456},{"_id":"public/tags/format-war/index.html","hash":"6002caec338fab8ef1f1b0320ebfdd8dc91f2a94","modified":1632360828456},{"_id":"public/tags/hd-dvd/index.html","hash":"a455cc4aa8918691581f22b38c5869574989830b","modified":1632360828456},{"_id":"public/tags/vhs/index.html","hash":"b2638d4a679a44131c8d352afc6295fd5900eb95","modified":1632360828456},{"_id":"public/tags/commonjs/index.html","hash":"22613d60df406d7a4f6537e491038b03a18d4b20","modified":1632360828456},{"_id":"public/tags/include/index.html","hash":"144350fb9532580fb1a6f0b90db3ce4f876254b9","modified":1632360828456},{"_id":"public/tags/modules/index.html","hash":"cd5c9ef9636cb8ec3949b79c62be800c6d3502ff","modified":1632360828456},{"_id":"public/tags/require/index.html","hash":"be5dd18de69841d6e20fc23e59568e06df49c1ce","modified":1632360828456},{"_id":"public/tags/short-story/index.html","hash":"e671564e861f6a2c4d7650282b5001ad5ae32d76","modified":1632360828456},{"_id":"public/tags/science-fiction/index.html","hash":"ba4bbf791228d8b122d58147b77ae1ce580167c6","modified":1632360828456},{"_id":"public/tags/addiction/index.html","hash":"29852c84001cf3b63c9d00a9b685b0ec39e2c3fc","modified":1632360828456},{"_id":"public/tags/entertainment/index.html","hash":"06cba10b7af5535b66e83c395ad97797380f81f4","modified":1632360828456},{"_id":"public/tags/halo/index.html","hash":"f28c3a022fea53ffcf301cf3245abd04b5269eab","modified":1632360828456},{"_id":"public/tags/self-control/index.html","hash":"b00ec3399d9778aed0ea67aee1fec106dbbbe151","modified":1632360828456},{"_id":"public/tags/shopping/index.html","hash":"42d3baa7ae92ecc930e5e0d1292cfc4fc60cfde8","modified":1632360828456},{"_id":"public/tags/video-games/index.html","hash":"530d89e75a59000e50eb6032a542c939ef380902","modified":1632360828456},{"_id":"public/tags/computing/index.html","hash":"8081739cec08534b960f9324d6d97610eee09e50","modified":1632360828457},{"_id":"public/tags/engineering/index.html","hash":"ccb6a49a8765c88f0f20b5762cf4717af66c8123","modified":1632360828457},{"_id":"public/tags/equality/index.html","hash":"2ecb1c5f98ccb82e7a5567c83479211da5547940","modified":1632360828457},{"_id":"public/tags/minority/index.html","hash":"22353da02deddceb6e46453603ff1766544d2d44","modified":1632360828457},{"_id":"public/tags/scholarship/index.html","hash":"ff6b02d2c8163512226449170d612e729df82753","modified":1632360828457},{"_id":"public/tags/science/index.html","hash":"94d4c31293608d4b623dbe1d5d848d5b6b4fa2ed","modified":1632360828457},{"_id":"public/tags/title-ix/index.html","hash":"8d3752b3d44653a9269e03a2ea46fcfd0df97580","modified":1632360828457},{"_id":"public/tags/women/index.html","hash":"91665c5d222520f63cc9db441f622c6db67525f3","modified":1632360828457},{"_id":"public/tags/andrew/index.html","hash":"27b27d8b5930025bcdf8eaec5d22ab829949ab77","modified":1632360828457},{"_id":"public/tags/brothers-of-linester/index.html","hash":"d75e630232a5cdb49a2715009e6225729f55d901","modified":1632360828457},{"_id":"public/tags/julie/index.html","hash":"ff538f4cae22b9e1bd18230e88f73aefdcfc856f","modified":1632360828457},{"_id":"public/tags/taylorsville/index.html","hash":"8cc37d9c552e32bed713c80a8f6143db1ab76417","modified":1632360828457},{"_id":"public/tags/vanwagoner/index.html","hash":"b63286604821e33ac7085b2c6a9904c7f65f7ada","modified":1632360828457},{"_id":"public/tags/family/index.html","hash":"11c03a47fd7d91c6c6104d53bc3e6641201f7291","modified":1632360828457},{"_id":"public/tags/internet-safety-podcast/index.html","hash":"85118e252660471a4570fcb00fea4bb52aef284e","modified":1632360828457},{"_id":"public/tags/internet-safety-wiki/index.html","hash":"a8b60cf18b222fd95a465a48618c2feef2d9f207","modified":1632360828457},{"_id":"public/tags/parenting/index.html","hash":"1c1e5328bd45275cd2b1b04a724e8e37d82b4d86","modified":1632360828457},{"_id":"public/tags/podcast/index.html","hash":"65ebcf89b925ebe7c5c94d343baeda210647562b","modified":1632360828457},{"_id":"public/tags/wiki/index.html","hash":"9e942c6ecb782c6328ae604feea279895af19c12","modified":1632360828457},{"_id":"public/tags/amd/index.html","hash":"4fcd3bdfec09db17455b899a3e974d889fc7850a","modified":1632360828457},{"_id":"public/tags/node-js/index.html","hash":"b64f6a3c2cf36a1a972778819b64f21a83e520fd","modified":1632360828457},{"_id":"public/tags/education/index.html","hash":"468ca878a1e4baf63d45404fccb3fde4b76b399f","modified":1632360828457},{"_id":"public/tags/flat/index.html","hash":"aa492439dcc3692845a117ac3cb58e944804462e","modified":1632360828457},{"_id":"public/tags/globalization/index.html","hash":"816586ea289f44f49622eebd517d549b3fd9f7fb","modified":1632360828457},{"_id":"public/tags/preparation/index.html","hash":"da4d3741ef98139bf8ebfc166f590b9a907e35e0","modified":1632360828457},{"_id":"public/tags/small-world/index.html","hash":"f7ee1c2d30f61deb83fd135f4583425abbfb4571","modified":1632360828457},{"_id":"public/tags/the-world-is-flat/index.html","hash":"823eeef10d4f544f577569454b73cc3dce1160dd","modified":1632360828457},{"_id":"public/tags/thomas-friedman/index.html","hash":"c066fb37643fc14b049985ea6bdf008aa01085cd","modified":1632360828457},{"_id":"public/tags/class/index.html","hash":"36397efbb2ba05396f953e1b4306053a547cffc5","modified":1632360828457},{"_id":"public/tags/inheritance/index.html","hash":"1e8098622a0240eba61e58595f5631c520d57eab","modified":1632360828457},{"_id":"public/tags/learn/index.html","hash":"8564ed520672ee91909357aab6fc4ef6c47aeae6","modified":1632360828457},{"_id":"public/tags/oop/index.html","hash":"071eb4bc14f8436c91958296a9124258bb80fc74","modified":1632360828457},{"_id":"public/tags/script/index.html","hash":"5885a8d939422784fe12f5272d4d71d323087355","modified":1632360828457},{"_id":"public/tags/understand/index.html","hash":"ec7a7bbe41cd13faacfe345432eda81d41693bb8","modified":1632360828457},{"_id":"public/tags/average-joe/index.html","hash":"d3b205591a5748a75c7d86cf30948899468a1a04","modified":1632360828457},{"_id":"public/tags/communication/index.html","hash":"8ff65e17043fb6a23517f77ab3cfbeb392cbf871","modified":1632360828457},{"_id":"public/tags/google/index.html","hash":"6cdb817e06b7b9d6ae1a11a8473bb0cba722a61b","modified":1632360828457},{"_id":"public/tags/ajax/index.html","hash":"0141c973caa8292cb34c39041641ef0964f986f9","modified":1632360828457},{"_id":"public/tags/file-upload/index.html","hash":"5926dd1af7642be801eb4dc9b43da3194e09e6c3","modified":1632360828457},{"_id":"public/tags/json/index.html","hash":"75bd94b0294c54551cdc12c02ba98681938d6a5f","modified":1632360828457},{"_id":"public/tags/multipart/index.html","hash":"1abf7beae066182fb6a077aeb7b041f4e7dde308","modified":1632360828457},{"_id":"public/tags/multipart-form-data/index.html","hash":"eaf1a74f1af694a42132407318297f8df532f356","modified":1632360828457},{"_id":"public/tags/php/index.html","hash":"9fc006164390c41977670bc7811b36966dc83edc","modified":1632360828457},{"_id":"public/tags/post/index.html","hash":"b6bbb1e4b08f2a0d09d3e990b1154fc3f1981c02","modified":1632360828457},{"_id":"public/tags/censorship/index.html","hash":"8008e7c79b4ffb1837359350a48ab0b07fdfb0a5","modified":1632360828457},{"_id":"public/tags/government/index.html","hash":"6d30f099036ac9372e7715af0414efc40aaf30d8","modified":1632360828457},{"_id":"public/tags/online-free-expression-day/index.html","hash":"e3cd21e9981f046a96cc813be4e45d73ec89b631","modified":1632360828457},{"_id":"public/tags/reporters-without-borders/index.html","hash":"23a39cf12835b7af37bb84513981f10064a61ca1","modified":1632360828457},{"_id":"public/tags/minify/index.html","hash":"860374cc14efa868130ed24f24a411036b7aae19","modified":1632360828457},{"_id":"public/tags/charlemagne/index.html","hash":"fdaa4d826c886db13a8b824b1c2800f464c51ef9","modified":1632360828457},{"_id":"public/tags/family-history/index.html","hash":"fafd9d61c3e6209d7636281475631f536bc02385","modified":1632360828457},{"_id":"public/tags/genealogy/index.html","hash":"8afe40074adc98f1c3c6f0bd9ba6f6d2c7b575a5","modified":1632360828457},{"_id":"public/tags/christianity/index.html","hash":"3073ad25784e4efd99058917f9209e4c29c79aeb","modified":1632360828457},{"_id":"public/tags/churches/index.html","hash":"363025f6d49e8be5af3d66c92d6310214955c5e9","modified":1632360828457},{"_id":"public/tags/covenants/index.html","hash":"6564a93b21aa77a0bdc2a425b3aa6ab68c508f84","modified":1632360828457},{"_id":"public/tags/doctrine/index.html","hash":"9e82f722ef4420cd0b9c5b3a8f6ccf6d865b6732","modified":1632360828457},{"_id":"public/tags/god/index.html","hash":"0ed44fe750a9d2676e52705c4469a6f8749acca3","modified":1632360828457},{"_id":"public/tags/grace/index.html","hash":"ca5971d193da0c70a33c52eb27790d53ed1b91a3","modified":1632360828457},{"_id":"public/tags/heaven/index.html","hash":"4ba7bf1299d5dd35a1532ca82b4b3711612ce15e","modified":1632360828457},{"_id":"public/tags/jesus-christ/index.html","hash":"b40bcf3f4be964e718c91265b01a5eeb22d57421","modified":1632360828457},{"_id":"public/tags/lds/index.html","hash":"8f41ae96ec53222939d13ad3ba4fc8567486b387","modified":1632360828457},{"_id":"public/tags/mormon/index.html","hash":"d702a4772623e583fac050a8908cd1f476af376a","modified":1632360828458},{"_id":"public/tags/ordinances/index.html","hash":"2b3a426e52afbaa02639d1105439134392d47467","modified":1632360828457},{"_id":"public/tags/priesthood/index.html","hash":"6d155e8d802198e5719dba9eeb21300ca62294ee","modified":1632360828458},{"_id":"public/tags/facebook/index.html","hash":"42166ac007a6947f6d7fe9cb0f700cc1780f1dea","modified":1632360828457},{"_id":"public/tags/myspace/index.html","hash":"11f8685bce234bb281a36105bb1d5e901827cb90","modified":1632360828457},{"_id":"public/tags/java/index.html","hash":"d9b601573576efe2ff563d5f1800b1befd1dd626","modified":1632360828458},{"_id":"public/tags/patterns/index.html","hash":"a196bff120448ea14bfccf24c12a102dc29d352c","modified":1632360828458},{"_id":"public/tags/problem-solving/index.html","hash":"8dd31c39736b55e723913dc584ed55ba9ff83a6f","modified":1632360828458},{"_id":"public/tags/bazaar/index.html","hash":"43505314c76cfb2d807e6dad9e15d8de7987b097","modified":1632360828458},{"_id":"public/tags/bizarre/index.html","hash":"0cac9fa95cefddc11cc49585bb41c65110f93035","modified":1632360828458},{"_id":"public/tags/blue-screen-of-death/index.html","hash":"e0f5499648cc23fbe765d2ab262460a504043abe","modified":1632360828458},{"_id":"public/tags/linux/index.html","hash":"42a5d5085003d525c3a0ccdfd6cd342dff138b8f","modified":1632360828458},{"_id":"public/tags/mac-os-x/index.html","hash":"aaa1928b714e8e576a022c73f93303ed8a1ded42","modified":1632360828458},{"_id":"public/tags/ubuntu/index.html","hash":"f162955912a89fac47215f2e2a5cd4799dad4321","modified":1632360828458},{"_id":"public/tags/windows/index.html","hash":"813687dd648ec73f0aad2cc9ab94be6bc2bafe81","modified":1632360828458},{"_id":"public/tags/expression/index.html","hash":"206dc61e162eb69b2a24b2ece4cf635e106a5d07","modified":1632360828458},{"_id":"public/tags/language/index.html","hash":"90a8985bded6ce4397b11d88ca01d888903ab9a6","modified":1632360828458},{"_id":"public/tags/words/index.html","hash":"1652d6e3b75397b3c06b46457d40d9f0b759add1","modified":1632360828458},{"_id":"public/tags/operating-systems/index.html","hash":"3cfa1428a81e497684f8ab4b94c67a953e51ebfe","modified":1632360828458},{"_id":"public/tags/unix/index.html","hash":"20da2936354b331cd0175cd4fa95c95569a8342f","modified":1632360828458},{"_id":"public/tags/vista/index.html","hash":"c92a5ccddda181790bda32582849d92e848b9e4e","modified":1632360828458},{"_id":"public/tags/vista-sp1/index.html","hash":"b85c6674d2cfd753a4f98657d16978c90d2c0707","modified":1632360828458},{"_id":"public/tags/windows-xp/index.html","hash":"a2ba1df64fa8d6f3647ec98b59810906004584fa","modified":1632360828458},{"_id":"public/tags/html5/index.html","hash":"c2900eb34ad5735ada47b2eccf7a4b3bf4636645","modified":1632360828458},{"_id":"public/tags/svg/index.html","hash":"87716b681218f12c5ae66d4ba09874aff5d1154d","modified":1632360828458},{"_id":"public/tags/moving/index.html","hash":"92fc262df175d8c09dd6824b09b3054cb6adecc5","modified":1632360828458},{"_id":"public/tags/seattle/index.html","hash":"fa846b60643c2d21c767fe66eb424d09a4411260","modified":1632360828458},{"_id":"public/tags/connection/index.html","hash":"0d3d6438f4e3aa66cafff0eb40b215143634dbfc","modified":1632360828458},{"_id":"public/tags/gaming/index.html","hash":"ac71b5bee4e91d86620b19c396e6169c59a3762f","modified":1632360828458},{"_id":"public/tags/relationships/index.html","hash":"6ca7faf3a83403abadfd1e8ecc78e0fa0c78c9d2","modified":1632360828458},{"_id":"public/tags/social/index.html","hash":"c562403bc4614140700f2d3f5497cb02cefbd3f4","modified":1632360828458},{"_id":"public/tags/amazon/index.html","hash":"a7f96dacd8328f80289d560ba423231097f78dff","modified":1632360828458},{"_id":"public/tags/amazon-com/index.html","hash":"d32572ad9769342eb41abaf8e75470b836049f64","modified":1632360828458},{"_id":"public/tags/aws/index.html","hash":"cf32c1b1243484c78ca3ab4066f9b53e8857cf51","modified":1632360828458},{"_id":"public/tags/simpledb/index.html","hash":"217561cabdd13020960544017de401f4d423b83b","modified":1632360828458},{"_id":"public/all-tags/index.html","hash":"07bd75994d706141bbfa4fad181fac7a9ee9f66c","modified":1632360828458},{"_id":"public/2012/02/14/a-case-against-vendor-prefixes-in-css/index.html","hash":"f44eab60ebaa8c90d3726018ee832086ade98ded","modified":1632360828458},{"_id":"public/2011/04/04/i-thought-i-new-you-javascript/index.html","hash":"c913f52d0823c03ea9b5a790ee54f1f124c6c49b","modified":1632360828458},{"_id":"public/2010/01/30/javascript-require-in-100-lines-of-code/index.html","hash":"023a26ca6640b87f5615dda1f97da16d21860067","modified":1632360828458},{"_id":"public/2009/02/19/accessing-aws-simpledb-from-php/index.html","hash":"479ba04061c497699592bd3f374e13cfc1d8189d","modified":1632360828458},{"_id":"public/assets/images/favicon.ico","hash":"603d858a64fd2ba635269e1b47799b3eb00b38ef","modified":1559233561347},{"_id":"public/assets/images/favicon.svg","hash":"83f151fbf230ed1680ddabe8b1b662a34d4f54eb","modified":1559233561347},{"_id":"public/CNAME","hash":"efeba71f88709bbd76fd7fd8515ba0efd66b0238","modified":1559233561347},{"_id":"public/assets/css/billie-holiday.png","hash":"0f85020bd3111833822da15efde27a4c7e8e7a79","modified":1559233561347},{"_id":"public/assets/images/andy.png","hash":"3eee879628a920cd5d63d72ab04464055fa743a4","modified":1559233561353},{"_id":"public/assets/css/style.css","hash":"405243b11ea6a7bea17519f55e6e4aae3ebfedd1","modified":1559233561356},{"_id":"source/assets/images/andy.jpg","hash":"843446be596186896bf6206a6b5e4b89c4a33033","modified":1632360044822},{"_id":"public/assets/images/andy.jpg","hash":"843446be596186896bf6206a6b5e4b89c4a33033","modified":1632360828461}],"Category":[{"name":"CSS","_id":"cjwavei530004v1ppffer9uiz"},{"name":"General","_id":"cjwavei58000av1ppb75vns9s"},{"name":"JavaScript","_id":"cjwavei5c000fv1pp1jcraztf"},{"name":"Ethics and Computers in Society","_id":"cjwavei5g000kv1ppqw29bxsq"},{"name":"Poetry","_id":"cjwavei5i000pv1ppkz7mkd76"},{"name":"Prose","_id":"cjwavei5t0013v1ppgpdlipym"},{"name":"Distributed System Design","_id":"cjwavei5v0019v1ppjx0cxk9i"},{"name":"Faith","_id":"cjwavei68002bv1pp0kbydan7"}],"Data":[],"Page":[{"title":"About Andy","id":5,"date":"2018-05-08T20:36:26.000Z","_content":"\nMy name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.\n\nThis blog started in 2008 as a college assignment for an [Ethics and Computers in Society](/categories/ethics-and-computers-in-society/) class. Of the posts you will find here, a few of them will deal with writing fiction, a few will be discussions about our society as once I perceived it, or about various neat tidbits I pick up here and there, but most of them will probably be about software.\n\nDon't be too judgmental of things I wrote years ago. I reserve the right to change my mind and grow into new understanding, but I think it's still valuable to preserve past snapshots of my thinking. I'm likely wrong as often as right, and I'm surprised if you are reading this anyway.\n\nJust a note, my family descended from [John Halmagh Van Wagoner](http://www.jackandsharensimmons.com/vans/7.htm), whose family came from Wageningen in the central Netherlands. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we're probably related.\n","source":"about/index.md","raw":"title: About Andy\nid: 5\ndate: 2018-05-08 14:36:26\n---\n\nMy name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.\n\nThis blog started in 2008 as a college assignment for an [Ethics and Computers in Society](/categories/ethics-and-computers-in-society/) class. Of the posts you will find here, a few of them will deal with writing fiction, a few will be discussions about our society as once I perceived it, or about various neat tidbits I pick up here and there, but most of them will probably be about software.\n\nDon't be too judgmental of things I wrote years ago. I reserve the right to change my mind and grow into new understanding, but I think it's still valuable to preserve past snapshots of my thinking. I'm likely wrong as often as right, and I'm surprised if you are reading this anyway.\n\nJust a note, my family descended from [John Halmagh Van Wagoner](http://www.jackandsharensimmons.com/vans/7.htm), whose family came from Wageningen in the central Netherlands. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we're probably related.\n","updated":"2018-05-08T20:44:42.892Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjwavei4u0000v1ppwapcx4xr","content":"<p>My name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.</p>\n<p>This blog started in 2008 as a college assignment for an <a href=\"/categories/ethics-and-computers-in-society/\">Ethics and Computers in Society</a> class. Of the posts you will find here, a few of them will deal with writing fiction, a few will be discussions about our society as once I perceived it, or about various neat tidbits I pick up here and there, but most of them will probably be about software.</p>\n<p>Don’t be too judgmental of things I wrote years ago. I reserve the right to change my mind and grow into new understanding, but I think it’s still valuable to preserve past snapshots of my thinking. I’m likely wrong as often as right, and I’m surprised if you are reading this anyway.</p>\n<p>Just a note, my family descended from <a href=\"http://www.jackandsharensimmons.com/vans/7.htm\" target=\"_blank\" rel=\"noopener\">John Halmagh Van Wagoner</a>, whose family came from Wageningen in the central Netherlands. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we’re probably related.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>My name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.</p>\n<p>This blog started in 2008 as a college assignment for an <a href=\"/categories/ethics-and-computers-in-society/\">Ethics and Computers in Society</a> class. Of the posts you will find here, a few of them will deal with writing fiction, a few will be discussions about our society as once I perceived it, or about various neat tidbits I pick up here and there, but most of them will probably be about software.</p>\n<p>Don’t be too judgmental of things I wrote years ago. I reserve the right to change my mind and grow into new understanding, but I think it’s still valuable to preserve past snapshots of my thinking. I’m likely wrong as often as right, and I’m surprised if you are reading this anyway.</p>\n<p>Just a note, my family descended from <a href=\"http://www.jackandsharensimmons.com/vans/7.htm\" target=\"_blank\" rel=\"noopener\">John Halmagh Van Wagoner</a>, whose family came from Wageningen in the central Netherlands. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we’re probably related.</p>\n"},{"title":"all-archives","layout":"all-archives","_content":"","source":"all-archives/index.md","raw":"title: all-archives\nlayout: all-archives\n---\n","date":"2018-05-08T17:28:54.328Z","updated":"2018-05-08T17:28:54.328Z","path":"all-archives/index.html","comments":1,"_id":"cjwavei500002v1ppbm3klkwh","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"all-categories","layout":"all-categories","_content":"","source":"all-categories/index.md","raw":"title: all-categories\nlayout: all-categories\n---\n","date":"2018-05-08T17:28:54.328Z","updated":"2018-05-08T17:28:54.328Z","path":"all-categories/index.html","comments":1,"_id":"cjwavei550006v1ppxqbrffn4","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"all-tags","layout":"all-tags","_content":"","source":"all-tags/index.md","raw":"title: all-tags\nlayout: all-tags\n---\n","date":"2018-05-08T17:28:54.329Z","updated":"2018-05-08T17:28:54.329Z","path":"all-tags/index.html","comments":1,"_id":"cjwaveis200cav1ppe7a1g2he","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Faith","id":10,"date":"2008-02-04T01:23:29.000Z","_content":"\nTo understand my writing, it is important to know my background. [I'm a Mormon](http://mormon.org/me/9ZNG), a member of the [Church of Jesus Christ of Latter-day Saints](http://www.lds.org \"The Official Church Website\"). Though I consider myself very knowledgeable in the doctrines of the Church, my beliefs and comments in no way represent the official stance of the Church. With that disclaimer, I believe I haven't fallen far from the tree.\n\nI invite people to comment on my posts, with the understanding that disrespectful comments will be quickly removed. Disagree if you will, but please be respectful.\n\nAll of the posts I write relating to my faith, can be found in the [faith category](https://thetalecrafter.com/categories/faith/ \"Posts on Faith\").\n\nI would also encourage those with serious issues with Church history or doctrine to look up their issue at [fairlds.org](http://www.fairlds.org/ \"LDS FAIR Apologetics\"). People who write there have studied a lot more than I have, and can more accurately address concerns.\n","source":"faith/index.md","raw":"title: Faith\nid: 10\ndate: 2008-02-03 18:23:29\n---\n\nTo understand my writing, it is important to know my background. [I'm a Mormon](http://mormon.org/me/9ZNG), a member of the [Church of Jesus Christ of Latter-day Saints](http://www.lds.org \"The Official Church Website\"). Though I consider myself very knowledgeable in the doctrines of the Church, my beliefs and comments in no way represent the official stance of the Church. With that disclaimer, I believe I haven't fallen far from the tree.\n\nI invite people to comment on my posts, with the understanding that disrespectful comments will be quickly removed. Disagree if you will, but please be respectful.\n\nAll of the posts I write relating to my faith, can be found in the [faith category](https://thetalecrafter.com/categories/faith/ \"Posts on Faith\").\n\nI would also encourage those with serious issues with Church history or doctrine to look up their issue at [fairlds.org](http://www.fairlds.org/ \"LDS FAIR Apologetics\"). People who write there have studied a lot more than I have, and can more accurately address concerns.\n","updated":"2018-05-08T17:28:54.329Z","path":"faith/index.html","comments":1,"layout":"page","_id":"cjwaveis300ccv1ppdc23uk8n","content":"<p>To understand my writing, it is important to know my background. <a href=\"http://mormon.org/me/9ZNG\" target=\"_blank\" rel=\"noopener\">I’m a Mormon</a>, a member of the <a href=\"http://www.lds.org\" title=\"The Official Church Website\" target=\"_blank\" rel=\"noopener\">Church of Jesus Christ of Latter-day Saints</a>. Though I consider myself very knowledgeable in the doctrines of the Church, my beliefs and comments in no way represent the official stance of the Church. With that disclaimer, I believe I haven’t fallen far from the tree.</p>\n<p>I invite people to comment on my posts, with the understanding that disrespectful comments will be quickly removed. Disagree if you will, but please be respectful.</p>\n<p>All of the posts I write relating to my faith, can be found in the <a href=\"https://thetalecrafter.com/categories/faith/\" title=\"Posts on Faith\" target=\"_blank\" rel=\"noopener\">faith category</a>.</p>\n<p>I would also encourage those with serious issues with Church history or doctrine to look up their issue at <a href=\"http://www.fairlds.org/\" title=\"LDS FAIR Apologetics\" target=\"_blank\" rel=\"noopener\">fairlds.org</a>. People who write there have studied a lot more than I have, and can more accurately address concerns.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>To understand my writing, it is important to know my background. <a href=\"http://mormon.org/me/9ZNG\" target=\"_blank\" rel=\"noopener\">I’m a Mormon</a>, a member of the <a href=\"http://www.lds.org\" title=\"The Official Church Website\" target=\"_blank\" rel=\"noopener\">Church of Jesus Christ of Latter-day Saints</a>. Though I consider myself very knowledgeable in the doctrines of the Church, my beliefs and comments in no way represent the official stance of the Church. With that disclaimer, I believe I haven’t fallen far from the tree.</p>\n<p>I invite people to comment on my posts, with the understanding that disrespectful comments will be quickly removed. Disagree if you will, but please be respectful.</p>\n<p>All of the posts I write relating to my faith, can be found in the <a href=\"https://thetalecrafter.com/categories/faith/\" title=\"Posts on Faith\" target=\"_blank\" rel=\"noopener\">faith category</a>.</p>\n<p>I would also encourage those with serious issues with Church history or doctrine to look up their issue at <a href=\"http://www.fairlds.org/\" title=\"LDS FAIR Apologetics\" target=\"_blank\" rel=\"noopener\">fairlds.org</a>. People who write there have studied a lot more than I have, and can more accurately address concerns.</p>\n"}],"Post":[{"title":"A Case Against Vendor Prefixes In CSS","id":"135","date":"2012-02-14T20:11:04.000Z","_content":"\nI am a web developer, and a rather impatient one too. When a new feature is available in a few browsers, I want to use it. Most of the time, these features are either experimental or not finished with the standardization process when they are generally available. So, they are prefixed by the vendor. This is how the process was designed, so that is what vendors do.\n\n**Why do we prefix?**\n\nPrefixing is a kind of disclaimer for the feature. \"Hey this is likely going to change, so don't rely on it.\" This seems in theory like a good way to go about it. If I am a browser maker, and I think of a cool new feature, like say, a gradient defined in css instead of an image, I really won't know how good my design is until lots of people have used it and given feedback. Of course, if I am conscientious of the community and betterment of the web for everybody, I share my idea with other browser vendors and get their take on it too. Often we have competing ideas of how to implement it, so we want a way to distinguish between them. This competition is wonderful, and will lead us to a better solution. So, I make my background-image:-andy-linear-gradient(...), and my competitor makes their background:-steve-gradient(linear, color-stop(), ...). Some people can try it out and it will work through the standards process and eventually everyone will have a background:linear-gradient(...) feature.\n\nIn theory it works out great, but what about in practice?\n\n**Here's what actually happens, from a dev's perspective.**\n\nMy favorite browser, Shiny, implements a cool new feature: -shiny-gradient(). I play with it and think it's really cool, but to be safe, I don't actually use it in any production site. A year later, the other browser I support, Ice Monster has long since added their own -ice-gradient(). Two years later, pretty much every browser has their own prefixed version, even the Laggard browser.\n\nNice. It only took two years for the feature to be generally available, so I start to use it, even though my code looks like this:\n\n```css\nbackground-image: -shiny-gradient(linear, left top, left bottom, from(hsl(0, 80%, 70%)), to(#BADA55));\nbackground-image: -shiny-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:    -ice-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:    -lag-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:     -my-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:         linear-gradient(top bottom, hsl(0, 80%, 70%), #BADA55);\n```\n\nI don't mind too much, because I use SASS or some other css pre-processor that actually takes care of all the prefixes and nuances. But this still bothers me in two important ways.\n\n1.  My stylesheets are getting much heavier than they used to be, which is a concern because I want people to be able to view my site quickly even on mobile devices. Most of the syntax is exactly the same, but I still have to write it over and over again for each vendor.\n2.  I have to opt in for each browser I want to get the feature. If a new browser becomes popular, it won't get the gradients unless I go back and add yet another version.\nI complain, but I keep doing it anyway. Two years later (Now **four years** since it was first introduced), The standard is still a draft, and because I want to support not just the bleeding edge browser, even when the standard finalizes I must leave all of the vendor prefixes indefinitely.\n\n**The problem gets more real with mobile.**\n\nManagement asks for a ShinyPhone version of our application. They don't care about Robot, even though it uses -shiny prefixes. I am given enough time to make the ShinyPhone version, but no time to even test in Robot. Eventually though, I manage to get it working because I own a Robot phone.\n\nA few months later, Catchup Phone 7, Ice Monster Mobile, and Concert Mini are showing up on more phones. They have their prefixed version of all the great Shiny features I used, but because I didn't know about them, the mobile application looks awful, and would take me several weeks to fix for each new phone. Management is not willing to spend that kind of time, so **even though they have all the features my site is broken for them**. Who will our customers blame? It works on ShinyPhone, so it must be that Ice Monster Mobile just isn't as good. **Ice Monster and other browsers get blamed for my site not working well there**.\n\n**The Solution?**\n\nIt is clear that if other browsers want to make themselves look good, they have to do more than just implement the feature. **If they just use -shiny prefixes**, that would make my application work far better, and therefore make their browser look good. But that completely undermines what we've learned in the browser wars, and goes against the reason for prefixing in the first place!\n\n**We don't really have a good solution yet.**\n\nHowever, I have an idea I think worth talking about. **What if the feature hadn't been prefixed at all?** I would have been less nervous to put it into production, because CSS simply doesn't apply rules that aren't implemented, and though it will likely change syntax, I can add new versions, and the one that is implemented will work. My stylesheet ends up more like this:\n\n```css\nbackground-image: gradient(linear, left top, left bottom, from(hsl(0, 80%, 70%)), to(#BADA55));\nbackground-image: linear-gradient(top bottom, hsl(0, 80%, 70%), #BADA55);\n```\n\nMy application just works for every browser that supports the feature with little thought or effort from my part, and if the spec doesn't change, which it actually doesn't change very often, I am already done more than four years before it is standardized.\n\n**Benefits of prefixing:**\n\n1.  **Sense** of security for browser vendors, so they can change the implementation and make it better.\n2.  Web developers **should** be aware that the feature isn't really ready yet.\n3.  **Credit** goes to the vendor who pioneered the feature.\n**Benefits of NOT prefixing:**\n\n1.  **Less effort** and maintenance for web developers trying to make their application (and browsers) look good. They don't need to spend a lot of time researching which browsers support which features.\n2.  **Lighter weight** stylesheets for everyone, especially mobile browsers.\n3.  Browser vendors can focus on the **feature**s, not on evangelizing their prefix.\n4.  **No -webkit- prefixes being supported by Mozilla**. Dang, I said it after trying so hard not to.\nHonestly I do see the value in prefixing experimental and non-standardized features, but vendors have to break them often, and the standard needs to move faster if developers are realistically going to experiment with experimental features, and wait for the standard for production use.\n\nPlease feel free to disagree in the comments, check out the discussion going on in the [w3c](http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html), or [read up](http://paulirish.com/2012/vendor-prefixes-are-not-developer-friendly/) on [other](http://blog.vandenoostende.com/2012/on-vendor-prefixes/) [opinions](http://www.sitepoint.com/w3c-css-webkit-prefix-crisis/). Better yet, [get involved](http://www.change.org/petitions/microsoft-mozilla-opera-dont-make-webkit-prefixes-a-de-facto-standard).\n","source":"_posts/a-case-against-vendor-prefixes-in-css.md","raw":"title: A Case Against Vendor Prefixes In CSS\ntags:\n  - browser\n  - css\n  - moz\n  - ms\n  - prefix\n  - web\n  - webkit\nid: 135\ncategories:\n  - CSS\ndate: 2012-02-14 13:11:04\n---\n\nI am a web developer, and a rather impatient one too. When a new feature is available in a few browsers, I want to use it. Most of the time, these features are either experimental or not finished with the standardization process when they are generally available. So, they are prefixed by the vendor. This is how the process was designed, so that is what vendors do.\n\n**Why do we prefix?**\n\nPrefixing is a kind of disclaimer for the feature. \"Hey this is likely going to change, so don't rely on it.\" This seems in theory like a good way to go about it. If I am a browser maker, and I think of a cool new feature, like say, a gradient defined in css instead of an image, I really won't know how good my design is until lots of people have used it and given feedback. Of course, if I am conscientious of the community and betterment of the web for everybody, I share my idea with other browser vendors and get their take on it too. Often we have competing ideas of how to implement it, so we want a way to distinguish between them. This competition is wonderful, and will lead us to a better solution. So, I make my background-image:-andy-linear-gradient(...), and my competitor makes their background:-steve-gradient(linear, color-stop(), ...). Some people can try it out and it will work through the standards process and eventually everyone will have a background:linear-gradient(...) feature.\n\nIn theory it works out great, but what about in practice?\n\n**Here's what actually happens, from a dev's perspective.**\n\nMy favorite browser, Shiny, implements a cool new feature: -shiny-gradient(). I play with it and think it's really cool, but to be safe, I don't actually use it in any production site. A year later, the other browser I support, Ice Monster has long since added their own -ice-gradient(). Two years later, pretty much every browser has their own prefixed version, even the Laggard browser.\n\nNice. It only took two years for the feature to be generally available, so I start to use it, even though my code looks like this:\n\n```css\nbackground-image: -shiny-gradient(linear, left top, left bottom, from(hsl(0, 80%, 70%)), to(#BADA55));\nbackground-image: -shiny-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:    -ice-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:    -lag-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:     -my-linear-gradient(top, hsl(0, 80%, 70%), #BADA55);\nbackground-image:         linear-gradient(top bottom, hsl(0, 80%, 70%), #BADA55);\n```\n\nI don't mind too much, because I use SASS or some other css pre-processor that actually takes care of all the prefixes and nuances. But this still bothers me in two important ways.\n\n1.  My stylesheets are getting much heavier than they used to be, which is a concern because I want people to be able to view my site quickly even on mobile devices. Most of the syntax is exactly the same, but I still have to write it over and over again for each vendor.\n2.  I have to opt in for each browser I want to get the feature. If a new browser becomes popular, it won't get the gradients unless I go back and add yet another version.\nI complain, but I keep doing it anyway. Two years later (Now **four years** since it was first introduced), The standard is still a draft, and because I want to support not just the bleeding edge browser, even when the standard finalizes I must leave all of the vendor prefixes indefinitely.\n\n**The problem gets more real with mobile.**\n\nManagement asks for a ShinyPhone version of our application. They don't care about Robot, even though it uses -shiny prefixes. I am given enough time to make the ShinyPhone version, but no time to even test in Robot. Eventually though, I manage to get it working because I own a Robot phone.\n\nA few months later, Catchup Phone 7, Ice Monster Mobile, and Concert Mini are showing up on more phones. They have their prefixed version of all the great Shiny features I used, but because I didn't know about them, the mobile application looks awful, and would take me several weeks to fix for each new phone. Management is not willing to spend that kind of time, so **even though they have all the features my site is broken for them**. Who will our customers blame? It works on ShinyPhone, so it must be that Ice Monster Mobile just isn't as good. **Ice Monster and other browsers get blamed for my site not working well there**.\n\n**The Solution?**\n\nIt is clear that if other browsers want to make themselves look good, they have to do more than just implement the feature. **If they just use -shiny prefixes**, that would make my application work far better, and therefore make their browser look good. But that completely undermines what we've learned in the browser wars, and goes against the reason for prefixing in the first place!\n\n**We don't really have a good solution yet.**\n\nHowever, I have an idea I think worth talking about. **What if the feature hadn't been prefixed at all?** I would have been less nervous to put it into production, because CSS simply doesn't apply rules that aren't implemented, and though it will likely change syntax, I can add new versions, and the one that is implemented will work. My stylesheet ends up more like this:\n\n```css\nbackground-image: gradient(linear, left top, left bottom, from(hsl(0, 80%, 70%)), to(#BADA55));\nbackground-image: linear-gradient(top bottom, hsl(0, 80%, 70%), #BADA55);\n```\n\nMy application just works for every browser that supports the feature with little thought or effort from my part, and if the spec doesn't change, which it actually doesn't change very often, I am already done more than four years before it is standardized.\n\n**Benefits of prefixing:**\n\n1.  **Sense** of security for browser vendors, so they can change the implementation and make it better.\n2.  Web developers **should** be aware that the feature isn't really ready yet.\n3.  **Credit** goes to the vendor who pioneered the feature.\n**Benefits of NOT prefixing:**\n\n1.  **Less effort** and maintenance for web developers trying to make their application (and browsers) look good. They don't need to spend a lot of time researching which browsers support which features.\n2.  **Lighter weight** stylesheets for everyone, especially mobile browsers.\n3.  Browser vendors can focus on the **feature**s, not on evangelizing their prefix.\n4.  **No -webkit- prefixes being supported by Mozilla**. Dang, I said it after trying so hard not to.\nHonestly I do see the value in prefixing experimental and non-standardized features, but vendors have to break them often, and the standard needs to move faster if developers are realistically going to experiment with experimental features, and wait for the standard for production use.\n\nPlease feel free to disagree in the comments, check out the discussion going on in the [w3c](http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html), or [read up](http://paulirish.com/2012/vendor-prefixes-are-not-developer-friendly/) on [other](http://blog.vandenoostende.com/2012/on-vendor-prefixes/) [opinions](http://www.sitepoint.com/w3c-css-webkit-prefix-crisis/). Better yet, [get involved](http://www.change.org/petitions/microsoft-mozilla-opera-dont-make-webkit-prefixes-a-de-facto-standard).\n","slug":"a-case-against-vendor-prefixes-in-css","published":1,"updated":"2018-05-08T17:28:54.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei4w0001v1ppeocbcus5","content":"<p>I am a web developer, and a rather impatient one too. When a new feature is available in a few browsers, I want to use it. Most of the time, these features are either experimental or not finished with the standardization process when they are generally available. So, they are prefixed by the vendor. This is how the process was designed, so that is what vendors do.</p>\n<p><strong>Why do we prefix?</strong></p>\n<p>Prefixing is a kind of disclaimer for the feature. “Hey this is likely going to change, so don’t rely on it.” This seems in theory like a good way to go about it. If I am a browser maker, and I think of a cool new feature, like say, a gradient defined in css instead of an image, I really won’t know how good my design is until lots of people have used it and given feedback. Of course, if I am conscientious of the community and betterment of the web for everybody, I share my idea with other browser vendors and get their take on it too. Often we have competing ideas of how to implement it, so we want a way to distinguish between them. This competition is wonderful, and will lead us to a better solution. So, I make my background-image:-andy-linear-gradient(…), and my competitor makes their background:-steve-gradient(linear, color-stop(), …). Some people can try it out and it will work through the standards process and eventually everyone will have a background:linear-gradient(…) feature.</p>\n<p>In theory it works out great, but what about in practice?</p>\n<p><strong>Here’s what actually happens, from a dev’s perspective.</strong></p>\n<p>My favorite browser, Shiny, implements a cool new feature: -shiny-gradient(). I play with it and think it’s really cool, but to be safe, I don’t actually use it in any production site. A year later, the other browser I support, Ice Monster has long since added their own -ice-gradient(). Two years later, pretty much every browser has their own prefixed version, even the Laggard browser.</p>\n<p>Nice. It only took two years for the feature to be generally available, so I start to use it, even though my code looks like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">-shiny-gradient</span>(<span class=\"selector-tag\">linear</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">from</span>(<span class=\"selector-tag\">hsl</span>(0, 80%, 70%)), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#BADA55</span>));</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">-shiny-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:    <span class=\"selector-tag\">-ice-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:    <span class=\"selector-tag\">-lag-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:     <span class=\"selector-tag\">-my-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:         <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">top</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br></pre></td></tr></table></figure>\n<p>I don’t mind too much, because I use SASS or some other css pre-processor that actually takes care of all the prefixes and nuances. But this still bothers me in two important ways.</p>\n<ol>\n<li>My stylesheets are getting much heavier than they used to be, which is a concern because I want people to be able to view my site quickly even on mobile devices. Most of the syntax is exactly the same, but I still have to write it over and over again for each vendor.</li>\n<li>I have to opt in for each browser I want to get the feature. If a new browser becomes popular, it won’t get the gradients unless I go back and add yet another version.<br>I complain, but I keep doing it anyway. Two years later (Now <strong>four years</strong> since it was first introduced), The standard is still a draft, and because I want to support not just the bleeding edge browser, even when the standard finalizes I must leave all of the vendor prefixes indefinitely.</li>\n</ol>\n<p><strong>The problem gets more real with mobile.</strong></p>\n<p>Management asks for a ShinyPhone version of our application. They don’t care about Robot, even though it uses -shiny prefixes. I am given enough time to make the ShinyPhone version, but no time to even test in Robot. Eventually though, I manage to get it working because I own a Robot phone.</p>\n<p>A few months later, Catchup Phone 7, Ice Monster Mobile, and Concert Mini are showing up on more phones. They have their prefixed version of all the great Shiny features I used, but because I didn’t know about them, the mobile application looks awful, and would take me several weeks to fix for each new phone. Management is not willing to spend that kind of time, so <strong>even though they have all the features my site is broken for them</strong>. Who will our customers blame? It works on ShinyPhone, so it must be that Ice Monster Mobile just isn’t as good. <strong>Ice Monster and other browsers get blamed for my site not working well there</strong>.</p>\n<p><strong>The Solution?</strong></p>\n<p>It is clear that if other browsers want to make themselves look good, they have to do more than just implement the feature. <strong>If they just use -shiny prefixes</strong>, that would make my application work far better, and therefore make their browser look good. But that completely undermines what we’ve learned in the browser wars, and goes against the reason for prefixing in the first place!</p>\n<p><strong>We don’t really have a good solution yet.</strong></p>\n<p>However, I have an idea I think worth talking about. <strong>What if the feature hadn’t been prefixed at all?</strong> I would have been less nervous to put it into production, because CSS simply doesn’t apply rules that aren’t implemented, and though it will likely change syntax, I can add new versions, and the one that is implemented will work. My stylesheet ends up more like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">gradient</span>(<span class=\"selector-tag\">linear</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">from</span>(<span class=\"selector-tag\">hsl</span>(0, 80%, 70%)), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#BADA55</span>));</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">top</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br></pre></td></tr></table></figure>\n<p>My application just works for every browser that supports the feature with little thought or effort from my part, and if the spec doesn’t change, which it actually doesn’t change very often, I am already done more than four years before it is standardized.</p>\n<p><strong>Benefits of prefixing:</strong></p>\n<ol>\n<li><strong>Sense</strong> of security for browser vendors, so they can change the implementation and make it better.</li>\n<li>Web developers <strong>should</strong> be aware that the feature isn’t really ready yet.</li>\n<li><p><strong>Credit</strong> goes to the vendor who pioneered the feature.<br><strong>Benefits of NOT prefixing:</strong></p>\n</li>\n<li><p><strong>Less effort</strong> and maintenance for web developers trying to make their application (and browsers) look good. They don’t need to spend a lot of time researching which browsers support which features.</p>\n</li>\n<li><strong>Lighter weight</strong> stylesheets for everyone, especially mobile browsers.</li>\n<li>Browser vendors can focus on the <strong>feature</strong>s, not on evangelizing their prefix.</li>\n<li><strong>No -webkit- prefixes being supported by Mozilla</strong>. Dang, I said it after trying so hard not to.<br>Honestly I do see the value in prefixing experimental and non-standardized features, but vendors have to break them often, and the standard needs to move faster if developers are realistically going to experiment with experimental features, and wait for the standard for production use.</li>\n</ol>\n<p>Please feel free to disagree in the comments, check out the discussion going on in the <a href=\"http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html\" target=\"_blank\" rel=\"noopener\">w3c</a>, or <a href=\"http://paulirish.com/2012/vendor-prefixes-are-not-developer-friendly/\" target=\"_blank\" rel=\"noopener\">read up</a> on <a href=\"http://blog.vandenoostende.com/2012/on-vendor-prefixes/\" target=\"_blank\" rel=\"noopener\">other</a> <a href=\"http://www.sitepoint.com/w3c-css-webkit-prefix-crisis/\" target=\"_blank\" rel=\"noopener\">opinions</a>. Better yet, <a href=\"http://www.change.org/petitions/microsoft-mozilla-opera-dont-make-webkit-prefixes-a-de-facto-standard\" target=\"_blank\" rel=\"noopener\">get involved</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I am a web developer, and a rather impatient one too. When a new feature is available in a few browsers, I want to use it. Most of the time, these features are either experimental or not finished with the standardization process when they are generally available. So, they are prefixed by the vendor. This is how the process was designed, so that is what vendors do.</p>\n<p><strong>Why do we prefix?</strong></p>\n<p>Prefixing is a kind of disclaimer for the feature. “Hey this is likely going to change, so don’t rely on it.” This seems in theory like a good way to go about it. If I am a browser maker, and I think of a cool new feature, like say, a gradient defined in css instead of an image, I really won’t know how good my design is until lots of people have used it and given feedback. Of course, if I am conscientious of the community and betterment of the web for everybody, I share my idea with other browser vendors and get their take on it too. Often we have competing ideas of how to implement it, so we want a way to distinguish between them. This competition is wonderful, and will lead us to a better solution. So, I make my background-image:-andy-linear-gradient(…), and my competitor makes their background:-steve-gradient(linear, color-stop(), …). Some people can try it out and it will work through the standards process and eventually everyone will have a background:linear-gradient(…) feature.</p>\n<p>In theory it works out great, but what about in practice?</p>\n<p><strong>Here’s what actually happens, from a dev’s perspective.</strong></p>\n<p>My favorite browser, Shiny, implements a cool new feature: -shiny-gradient(). I play with it and think it’s really cool, but to be safe, I don’t actually use it in any production site. A year later, the other browser I support, Ice Monster has long since added their own -ice-gradient(). Two years later, pretty much every browser has their own prefixed version, even the Laggard browser.</p>\n<p>Nice. It only took two years for the feature to be generally available, so I start to use it, even though my code looks like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">-shiny-gradient</span>(<span class=\"selector-tag\">linear</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">from</span>(<span class=\"selector-tag\">hsl</span>(0, 80%, 70%)), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#BADA55</span>));</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">-shiny-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:    <span class=\"selector-tag\">-ice-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:    <span class=\"selector-tag\">-lag-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:     <span class=\"selector-tag\">-my-linear-gradient</span>(<span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>:         <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">top</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br></pre></td></tr></table></figure>\n<p>I don’t mind too much, because I use SASS or some other css pre-processor that actually takes care of all the prefixes and nuances. But this still bothers me in two important ways.</p>\n<ol>\n<li>My stylesheets are getting much heavier than they used to be, which is a concern because I want people to be able to view my site quickly even on mobile devices. Most of the syntax is exactly the same, but I still have to write it over and over again for each vendor.</li>\n<li>I have to opt in for each browser I want to get the feature. If a new browser becomes popular, it won’t get the gradients unless I go back and add yet another version.<br>I complain, but I keep doing it anyway. Two years later (Now <strong>four years</strong> since it was first introduced), The standard is still a draft, and because I want to support not just the bleeding edge browser, even when the standard finalizes I must leave all of the vendor prefixes indefinitely.</li>\n</ol>\n<p><strong>The problem gets more real with mobile.</strong></p>\n<p>Management asks for a ShinyPhone version of our application. They don’t care about Robot, even though it uses -shiny prefixes. I am given enough time to make the ShinyPhone version, but no time to even test in Robot. Eventually though, I manage to get it working because I own a Robot phone.</p>\n<p>A few months later, Catchup Phone 7, Ice Monster Mobile, and Concert Mini are showing up on more phones. They have their prefixed version of all the great Shiny features I used, but because I didn’t know about them, the mobile application looks awful, and would take me several weeks to fix for each new phone. Management is not willing to spend that kind of time, so <strong>even though they have all the features my site is broken for them</strong>. Who will our customers blame? It works on ShinyPhone, so it must be that Ice Monster Mobile just isn’t as good. <strong>Ice Monster and other browsers get blamed for my site not working well there</strong>.</p>\n<p><strong>The Solution?</strong></p>\n<p>It is clear that if other browsers want to make themselves look good, they have to do more than just implement the feature. <strong>If they just use -shiny prefixes</strong>, that would make my application work far better, and therefore make their browser look good. But that completely undermines what we’ve learned in the browser wars, and goes against the reason for prefixing in the first place!</p>\n<p><strong>We don’t really have a good solution yet.</strong></p>\n<p>However, I have an idea I think worth talking about. <strong>What if the feature hadn’t been prefixed at all?</strong> I would have been less nervous to put it into production, because CSS simply doesn’t apply rules that aren’t implemented, and though it will likely change syntax, I can add new versions, and the one that is implemented will work. My stylesheet ends up more like this:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">gradient</span>(<span class=\"selector-tag\">linear</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">top</span>, <span class=\"selector-tag\">left</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">from</span>(<span class=\"selector-tag\">hsl</span>(0, 80%, 70%)), <span class=\"selector-tag\">to</span>(<span class=\"selector-id\">#BADA55</span>));</span><br><span class=\"line\"><span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-tag\">top</span> <span class=\"selector-tag\">bottom</span>, <span class=\"selector-tag\">hsl</span>(0, 80%, 70%), <span class=\"selector-id\">#BADA55</span>);</span><br></pre></td></tr></table></figure>\n<p>My application just works for every browser that supports the feature with little thought or effort from my part, and if the spec doesn’t change, which it actually doesn’t change very often, I am already done more than four years before it is standardized.</p>\n<p><strong>Benefits of prefixing:</strong></p>\n<ol>\n<li><strong>Sense</strong> of security for browser vendors, so they can change the implementation and make it better.</li>\n<li>Web developers <strong>should</strong> be aware that the feature isn’t really ready yet.</li>\n<li><p><strong>Credit</strong> goes to the vendor who pioneered the feature.<br><strong>Benefits of NOT prefixing:</strong></p>\n</li>\n<li><p><strong>Less effort</strong> and maintenance for web developers trying to make their application (and browsers) look good. They don’t need to spend a lot of time researching which browsers support which features.</p>\n</li>\n<li><strong>Lighter weight</strong> stylesheets for everyone, especially mobile browsers.</li>\n<li>Browser vendors can focus on the <strong>feature</strong>s, not on evangelizing their prefix.</li>\n<li><strong>No -webkit- prefixes being supported by Mozilla</strong>. Dang, I said it after trying so hard not to.<br>Honestly I do see the value in prefixing experimental and non-standardized features, but vendors have to break them often, and the standard needs to move faster if developers are realistically going to experiment with experimental features, and wait for the standard for production use.</li>\n</ol>\n<p>Please feel free to disagree in the comments, check out the discussion going on in the <a href=\"http://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html\" target=\"_blank\" rel=\"noopener\">w3c</a>, or <a href=\"http://paulirish.com/2012/vendor-prefixes-are-not-developer-friendly/\" target=\"_blank\" rel=\"noopener\">read up</a> on <a href=\"http://blog.vandenoostende.com/2012/on-vendor-prefixes/\" target=\"_blank\" rel=\"noopener\">other</a> <a href=\"http://www.sitepoint.com/w3c-css-webkit-prefix-crisis/\" target=\"_blank\" rel=\"noopener\">opinions</a>. Better yet, <a href=\"http://www.change.org/petitions/microsoft-mozilla-opera-dont-make-webkit-prefixes-a-de-facto-standard\" target=\"_blank\" rel=\"noopener\">get involved</a>.</p>\n"},{"title":"About Andy","id":"5","date":"2008-01-11T09:04:26.000Z","_content":"\nMy name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.\n\nI am afraid my pen name the TaleCrafter might be somewhat misleading, because I make my living as a software engineer. As a teenager I aspired to be a writer and spent a lot of time writing a book, that I may never finish. Since I used the handle \"thetalecrafter\" back then, I've stuck with it, despite being less than accurate.\n\nOf the posts you will find here, a few of them will deal with my book, a few will be discussions about our society as I perceive it, or about various neat tidbits I pick up here and there, but most of them will be about JavaScript.\n\nJust a note, my family descended from [John Halmagh Van Wagoner](http://www.jackandsharensimmons.com/vans/7.htm), whose family came from Wageningen, Holland. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we're probably related.\n","source":"_posts/about-andy.md","raw":"title: About Andy\nid: 5\ndate: 2008-01-11 02:04:26\n---\n\nMy name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.\n\nI am afraid my pen name the TaleCrafter might be somewhat misleading, because I make my living as a software engineer. As a teenager I aspired to be a writer and spent a lot of time writing a book, that I may never finish. Since I used the handle \"thetalecrafter\" back then, I've stuck with it, despite being less than accurate.\n\nOf the posts you will find here, a few of them will deal with my book, a few will be discussions about our society as I perceive it, or about various neat tidbits I pick up here and there, but most of them will be about JavaScript.\n\nJust a note, my family descended from [John Halmagh Van Wagoner](http://www.jackandsharensimmons.com/vans/7.htm), whose family came from Wageningen, Holland. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we're probably related.\n","slug":"about-andy","published":1,"updated":"2018-05-08T20:34:33.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei510003v1ppbw25y2yr","content":"<p>My name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.</p>\n<p>I am afraid my pen name the TaleCrafter might be somewhat misleading, because I make my living as a software engineer. As a teenager I aspired to be a writer and spent a lot of time writing a book, that I may never finish. Since I used the handle “thetalecrafter” back then, I’ve stuck with it, despite being less than accurate.</p>\n<p>Of the posts you will find here, a few of them will deal with my book, a few will be discussions about our society as I perceive it, or about various neat tidbits I pick up here and there, but most of them will be about JavaScript.</p>\n<p>Just a note, my family descended from <a href=\"http://www.jackandsharensimmons.com/vans/7.htm\" target=\"_blank\" rel=\"noopener\">John Halmagh Van Wagoner</a>, whose family came from Wageningen, Holland. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we’re probably related.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>My name is Andrew VanWagoner, and I am originally from Taylorsville, Utah, USA. I am married, and we have four kids.</p>\n<p>I am afraid my pen name the TaleCrafter might be somewhat misleading, because I make my living as a software engineer. As a teenager I aspired to be a writer and spent a lot of time writing a book, that I may never finish. Since I used the handle “thetalecrafter” back then, I’ve stuck with it, despite being less than accurate.</p>\n<p>Of the posts you will find here, a few of them will deal with my book, a few will be discussions about our society as I perceive it, or about various neat tidbits I pick up here and there, but most of them will be about JavaScript.</p>\n<p>Just a note, my family descended from <a href=\"http://www.jackandsharensimmons.com/vans/7.htm\" target=\"_blank\" rel=\"noopener\">John Halmagh Van Wagoner</a>, whose family came from Wageningen, Holland. So, to you other Van Wagoners, VanWagoners, and Van Wagenens out there, if that name rings a bell, we’re probably related.</p>\n"},{"title":"@mbience a Cappella","id":"23","date":"2008-04-09T03:57:54.000Z","_content":"\nIn high school some friends and I made an a cappella group called Ambience. My brother Jacob was our 1st tenor, I sang 2nd tenor, Jacob Morris sang baritone, and Trevor Watts sang bass. We traded parts often, too. We weren't that good, \tbut we did have a lot of fun. Below are a few of our songs. (The only ones I dare \tlet the public hear.)\n\n*   [16 Tons](http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVmp4PtCMFu0KB6TbJEmR-uqnx4h4X7uUk0zDeQ0GVrZ3bpNDQD-ukZ7rZeMVl-WaQ0/%40mbience%20-%2016%20Tons.mp3?download)\n*   [In the Still of the Night](http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVlbXO3v-6oTdz8E5quy8Ut41wqHmIo4Z1NUkNCYxm7sObe18gIhNylEPM2MIFykJ5s/%40mbience%20-%20In%20The%20Still%20Of%20The%20Night.mp3?download)\n*   [Kiss the Girl](http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVku_l_yi2xloCxgakNQKmSkSOfKOOlDM3OTJssSmuhjHW9caEHpP_iAAepwq83SbCQ/%40mbience%20-%20Kiss%20The%20Girl.mp3?download)\nP.S. - If the links aren't working, or it is too slow, please let me know about it.","source":"_posts/ambience-a-cappella.md","raw":"title: '@mbience a Cappella'\ntags:\n  - 16 tons\n  - a cappella\n  - ambience\n  - in the still of the night\n  - Jacob Morris\n  - kiss the girl\n  - music\n  - Nathan Morris\n  - Trevor Watts\nid: 23\ncategories:\n  - General\ndate: 2008-04-08 21:57:54\n---\n\nIn high school some friends and I made an a cappella group called Ambience. My brother Jacob was our 1st tenor, I sang 2nd tenor, Jacob Morris sang baritone, and Trevor Watts sang bass. We traded parts often, too. We weren't that good, \tbut we did have a lot of fun. Below are a few of our songs. (The only ones I dare \tlet the public hear.)\n\n*   [16 Tons](http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVmp4PtCMFu0KB6TbJEmR-uqnx4h4X7uUk0zDeQ0GVrZ3bpNDQD-ukZ7rZeMVl-WaQ0/%40mbience%20-%2016%20Tons.mp3?download)\n*   [In the Still of the Night](http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVlbXO3v-6oTdz8E5quy8Ut41wqHmIo4Z1NUkNCYxm7sObe18gIhNylEPM2MIFykJ5s/%40mbience%20-%20In%20The%20Still%20Of%20The%20Night.mp3?download)\n*   [Kiss the Girl](http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVku_l_yi2xloCxgakNQKmSkSOfKOOlDM3OTJssSmuhjHW9caEHpP_iAAepwq83SbCQ/%40mbience%20-%20Kiss%20The%20Girl.mp3?download)\nP.S. - If the links aren't working, or it is too slow, please let me know about it.","slug":"ambience-a-cappella","published":1,"updated":"2018-05-08T17:28:54.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei550007v1pphi2xlqmv","content":"<p>In high school some friends and I made an a cappella group called Ambience. My brother Jacob was our 1st tenor, I sang 2nd tenor, Jacob Morris sang baritone, and Trevor Watts sang bass. We traded parts often, too. We weren’t that good,     but we did have a lot of fun. Below are a few of our songs. (The only ones I dare     let the public hear.)</p>\n<ul>\n<li><a href=\"http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVmp4PtCMFu0KB6TbJEmR-uqnx4h4X7uUk0zDeQ0GVrZ3bpNDQD-ukZ7rZeMVl-WaQ0/%40mbience%20-%2016%20Tons.mp3?download\" target=\"_blank\" rel=\"noopener\">16 Tons</a></li>\n<li><a href=\"http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVlbXO3v-6oTdz8E5quy8Ut41wqHmIo4Z1NUkNCYxm7sObe18gIhNylEPM2MIFykJ5s/%40mbience%20-%20In%20The%20Still%20Of%20The%20Night.mp3?download\" target=\"_blank\" rel=\"noopener\">In the Still of the Night</a></li>\n<li><a href=\"http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVku_l_yi2xloCxgakNQKmSkSOfKOOlDM3OTJssSmuhjHW9caEHpP_iAAepwq83SbCQ/%40mbience%20-%20Kiss%20The%20Girl.mp3?download\" target=\"_blank\" rel=\"noopener\">Kiss the Girl</a><br>P.S. - If the links aren’t working, or it is too slow, please let me know about it.</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>In high school some friends and I made an a cappella group called Ambience. My brother Jacob was our 1st tenor, I sang 2nd tenor, Jacob Morris sang baritone, and Trevor Watts sang bass. We traded parts often, too. We weren’t that good,     but we did have a lot of fun. Below are a few of our songs. (The only ones I dare     let the public hear.)</p>\n<ul>\n<li><a href=\"http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVmp4PtCMFu0KB6TbJEmR-uqnx4h4X7uUk0zDeQ0GVrZ3bpNDQD-ukZ7rZeMVl-WaQ0/%40mbience%20-%2016%20Tons.mp3?download\" target=\"_blank\" rel=\"noopener\">16 Tons</a></li>\n<li><a href=\"http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVlbXO3v-6oTdz8E5quy8Ut41wqHmIo4Z1NUkNCYxm7sObe18gIhNylEPM2MIFykJ5s/%40mbience%20-%20In%20The%20Still%20Of%20The%20Night.mp3?download\" target=\"_blank\" rel=\"noopener\">In the Still of the Night</a></li>\n<li><a href=\"http://1i18lg.tuk.livefilestore.com/y1pDeWdHSY0jVku_l_yi2xloCxgakNQKmSkSOfKOOlDM3OTJssSmuhjHW9caEHpP_iAAepwq83SbCQ/%40mbience%20-%20Kiss%20The%20Girl.mp3?download\" target=\"_blank\" rel=\"noopener\">Kiss the Girl</a><br>P.S. - If the links aren’t working, or it is too slow, please let me know about it.</li>\n</ul>\n"},{"title":"Async Functions: Delivering on Promises","id":"165","date":"2015-05-11T18:57:29.000Z","_content":"\nSince Promises were first introduced to JavaScript, I have been frustrated by disappearing errors. Due to its dynamic nature, errors in JavaScript can show up much later in the dev process, sometimes making it all the way to production environments before they are first noticed. Many tools, like linters and type checkers, have been introduced to try to detect errors earlier. However, with Promises sometimes no error is ever thrown at all, your code just doesn't work as you expect it to.\n\nA small example to illustrate:\n\n```javascript\nfunction getResult() {\n  return new Promise(function(resolve, reject) {\n    someAsyncFunction(resolve) // this function may throw an error asynchronously\n  })\n}\n```\n\nAs you can see, `reject` never gets called. You must explicitly handle the error condition, or you won't get so much as an error in the console. The error is thrown, but swallowed by the promise.\n\nSo why don't I just handle the error? The point is not that errors cannot be handled. They certainly can be. The problem is that it is easier to do the wrong thing with promises. By default errors are caught and ignored.\n\nFurthermore, async stack traces suck. This is a pain point for both promises and callbacks. Assuming an error occurs somewhere deep in asynchrony, the stack may only show you where the error was thrown, and have little or no context of where the function was called in the first place.\n\n**Both of these problems go away when using async function with await.**\n\nES7 (or ES 2016 if you prefer) proposes a new keywords `async` and `await`. Under the hood, the new mechanism uses promises, but by default does the right thing.\n\nThe prior example becomes:\n\n```javascript\nasync function getResult() {\n  return await someAsyncFunction()\n}\n```\n\nThis code assumes `someAsyncFunction` is also updated to the new syntax.\n\nSo what did we get?\n\n1.  If something goes wrong an error is thrown, and ends up in the console if not handled.\n2.  The stack trace is complete, so you can see what initiated the failed action.\n3.  A try/catch around your `getResult()` call works.\n\nWant to know more about how `async` and `await` work? You can read Jake Archibald gush over their many virtues [on his blog](http://jakearchibald.com/2014/es7-async-functions/), or if you like, you can check out the surprisingly readable [proposal](https://github.com/lukehoban/ecmascript-asyncawait).\n","source":"_posts/async-functions-delivering-on-promises.md","raw":"title: 'Async Functions: Delivering on Promises'\ntags:\n  - ES 2016\n  - JavaScript\nid: 165\ncategories:\n  - JavaScript\ndate: 2015-05-11 12:57:29\n---\n\nSince Promises were first introduced to JavaScript, I have been frustrated by disappearing errors. Due to its dynamic nature, errors in JavaScript can show up much later in the dev process, sometimes making it all the way to production environments before they are first noticed. Many tools, like linters and type checkers, have been introduced to try to detect errors earlier. However, with Promises sometimes no error is ever thrown at all, your code just doesn't work as you expect it to.\n\nA small example to illustrate:\n\n```javascript\nfunction getResult() {\n  return new Promise(function(resolve, reject) {\n    someAsyncFunction(resolve) // this function may throw an error asynchronously\n  })\n}\n```\n\nAs you can see, `reject` never gets called. You must explicitly handle the error condition, or you won't get so much as an error in the console. The error is thrown, but swallowed by the promise.\n\nSo why don't I just handle the error? The point is not that errors cannot be handled. They certainly can be. The problem is that it is easier to do the wrong thing with promises. By default errors are caught and ignored.\n\nFurthermore, async stack traces suck. This is a pain point for both promises and callbacks. Assuming an error occurs somewhere deep in asynchrony, the stack may only show you where the error was thrown, and have little or no context of where the function was called in the first place.\n\n**Both of these problems go away when using async function with await.**\n\nES7 (or ES 2016 if you prefer) proposes a new keywords `async` and `await`. Under the hood, the new mechanism uses promises, but by default does the right thing.\n\nThe prior example becomes:\n\n```javascript\nasync function getResult() {\n  return await someAsyncFunction()\n}\n```\n\nThis code assumes `someAsyncFunction` is also updated to the new syntax.\n\nSo what did we get?\n\n1.  If something goes wrong an error is thrown, and ends up in the console if not handled.\n2.  The stack trace is complete, so you can see what initiated the failed action.\n3.  A try/catch around your `getResult()` call works.\n\nWant to know more about how `async` and `await` work? You can read Jake Archibald gush over their many virtues [on his blog](http://jakearchibald.com/2014/es7-async-functions/), or if you like, you can check out the surprisingly readable [proposal](https://github.com/lukehoban/ecmascript-asyncawait).\n","slug":"async-functions-delivering-on-promises","published":1,"updated":"2018-05-08T17:28:54.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei560008v1ppi3zs3c81","content":"<p>Since Promises were first introduced to JavaScript, I have been frustrated by disappearing errors. Due to its dynamic nature, errors in JavaScript can show up much later in the dev process, sometimes making it all the way to production environments before they are first noticed. Many tools, like linters and type checkers, have been introduced to try to detect errors earlier. However, with Promises sometimes no error is ever thrown at all, your code just doesn’t work as you expect it to.</p>\n<p>A small example to illustrate:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    someAsyncFunction(resolve) <span class=\"comment\">// this function may throw an error asynchronously</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see, <code>reject</code> never gets called. You must explicitly handle the error condition, or you won’t get so much as an error in the console. The error is thrown, but swallowed by the promise.</p>\n<p>So why don’t I just handle the error? The point is not that errors cannot be handled. They certainly can be. The problem is that it is easier to do the wrong thing with promises. By default errors are caught and ignored.</p>\n<p>Furthermore, async stack traces suck. This is a pain point for both promises and callbacks. Assuming an error occurs somewhere deep in asynchrony, the stack may only show you where the error was thrown, and have little or no context of where the function was called in the first place.</p>\n<p><strong>Both of these problems go away when using async function with await.</strong></p>\n<p>ES7 (or ES 2016 if you prefer) proposes a new keywords <code>async</code> and <code>await</code>. Under the hood, the new mechanism uses promises, but by default does the right thing.</p>\n<p>The prior example becomes:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> someAsyncFunction()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This code assumes <code>someAsyncFunction</code> is also updated to the new syntax.</p>\n<p>So what did we get?</p>\n<ol>\n<li>If something goes wrong an error is thrown, and ends up in the console if not handled.</li>\n<li>The stack trace is complete, so you can see what initiated the failed action.</li>\n<li>A try/catch around your <code>getResult()</code> call works.</li>\n</ol>\n<p>Want to know more about how <code>async</code> and <code>await</code> work? You can read Jake Archibald gush over their many virtues <a href=\"http://jakearchibald.com/2014/es7-async-functions/\" target=\"_blank\" rel=\"noopener\">on his blog</a>, or if you like, you can check out the surprisingly readable <a href=\"https://github.com/lukehoban/ecmascript-asyncawait\" target=\"_blank\" rel=\"noopener\">proposal</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Since Promises were first introduced to JavaScript, I have been frustrated by disappearing errors. Due to its dynamic nature, errors in JavaScript can show up much later in the dev process, sometimes making it all the way to production environments before they are first noticed. Many tools, like linters and type checkers, have been introduced to try to detect errors earlier. However, with Promises sometimes no error is ever thrown at all, your code just doesn’t work as you expect it to.</p>\n<p>A small example to illustrate:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">    someAsyncFunction(resolve) <span class=\"comment\">// this function may throw an error asynchronously</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see, <code>reject</code> never gets called. You must explicitly handle the error condition, or you won’t get so much as an error in the console. The error is thrown, but swallowed by the promise.</p>\n<p>So why don’t I just handle the error? The point is not that errors cannot be handled. They certainly can be. The problem is that it is easier to do the wrong thing with promises. By default errors are caught and ignored.</p>\n<p>Furthermore, async stack traces suck. This is a pain point for both promises and callbacks. Assuming an error occurs somewhere deep in asynchrony, the stack may only show you where the error was thrown, and have little or no context of where the function was called in the first place.</p>\n<p><strong>Both of these problems go away when using async function with await.</strong></p>\n<p>ES7 (or ES 2016 if you prefer) proposes a new keywords <code>async</code> and <code>await</code>. Under the hood, the new mechanism uses promises, but by default does the right thing.</p>\n<p>The prior example becomes:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getResult</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> someAsyncFunction()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This code assumes <code>someAsyncFunction</code> is also updated to the new syntax.</p>\n<p>So what did we get?</p>\n<ol>\n<li>If something goes wrong an error is thrown, and ends up in the console if not handled.</li>\n<li>The stack trace is complete, so you can see what initiated the failed action.</li>\n<li>A try/catch around your <code>getResult()</code> call works.</li>\n</ol>\n<p>Want to know more about how <code>async</code> and <code>await</code> work? You can read Jake Archibald gush over their many virtues <a href=\"http://jakearchibald.com/2014/es7-async-functions/\" target=\"_blank\" rel=\"noopener\">on his blog</a>, or if you like, you can check out the surprisingly readable <a href=\"https://github.com/lukehoban/ecmascript-asyncawait\" target=\"_blank\" rel=\"noopener\">proposal</a>.</p>\n"},{"title":"Barefoot on the Net","id":"14","date":"2008-02-26T05:52:20.000Z","_content":"\nThe world is at our fingertips. Opportunities to reach vast audiences abound. In yesteryears it took great foresight and planning to assemble the masses, while today whatever stumbles from my lips could end up on YouTube. Ordinary people are speaking, and everyone is listening.\n\nTake [Cliff Stoll](http://en.wikipedia.org/wiki/Cliff_stoll \"Clifford Stoll\") for example. He never considered himself a computer wizard, but his patience and persistence [caught an international spy](http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/0743411463 \"The Cuckoo\"). [Robert Morris](http://en.wikipedia.org/wiki/Robert_Tappan_Morris \"RTM\") launched the first worm that froze two thousand computers, even though it was \"not very well written\".\n\nTechnology is bringing such a number of people into our reach, that it's hard not to step on toes. Especially as a programmer, if I make one small mistake - wham! I could give away private information about couples' relationships. Hundreds of people could be affected.\n\nCommunities &amp; friendships, like the Internet &amp; networks, are built on trust, but if no one is wearing shoes, then one person in cleats can do a lot of damage. So, let's keep our shoes on, but leave the clogs at home.","source":"_posts/barefoot-on-the-net.md","raw":"title: Barefoot on the Net\ntags:\n  - cliff stoll\n  - internet\n  - networks\n  - privacy\n  - \"the cuckoo's egg\"\n  - trust\n  - virus\n  - worm\nid: 14\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-02-25 22:52:20\n---\n\nThe world is at our fingertips. Opportunities to reach vast audiences abound. In yesteryears it took great foresight and planning to assemble the masses, while today whatever stumbles from my lips could end up on YouTube. Ordinary people are speaking, and everyone is listening.\n\nTake [Cliff Stoll](http://en.wikipedia.org/wiki/Cliff_stoll \"Clifford Stoll\") for example. He never considered himself a computer wizard, but his patience and persistence [caught an international spy](http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/0743411463 \"The Cuckoo\"). [Robert Morris](http://en.wikipedia.org/wiki/Robert_Tappan_Morris \"RTM\") launched the first worm that froze two thousand computers, even though it was \"not very well written\".\n\nTechnology is bringing such a number of people into our reach, that it's hard not to step on toes. Especially as a programmer, if I make one small mistake - wham! I could give away private information about couples' relationships. Hundreds of people could be affected.\n\nCommunities &amp; friendships, like the Internet &amp; networks, are built on trust, but if no one is wearing shoes, then one person in cleats can do a lot of damage. So, let's keep our shoes on, but leave the clogs at home.","slug":"barefoot-on-the-net","published":1,"updated":"2018-05-08T17:28:54.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei580009v1ppmkblulbr","content":"<p>The world is at our fingertips. Opportunities to reach vast audiences abound. In yesteryears it took great foresight and planning to assemble the masses, while today whatever stumbles from my lips could end up on YouTube. Ordinary people are speaking, and everyone is listening.</p>\n<p>Take <a href=\"http://en.wikipedia.org/wiki/Cliff_stoll\" title=\"Clifford Stoll\" target=\"_blank\" rel=\"noopener\">Cliff Stoll</a> for example. He never considered himself a computer wizard, but his patience and persistence <a href=\"http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/0743411463\" title=\"The Cuckoo\" target=\"_blank\" rel=\"noopener\">caught an international spy</a>. <a href=\"http://en.wikipedia.org/wiki/Robert_Tappan_Morris\" title=\"RTM\" target=\"_blank\" rel=\"noopener\">Robert Morris</a> launched the first worm that froze two thousand computers, even though it was “not very well written”.</p>\n<p>Technology is bringing such a number of people into our reach, that it’s hard not to step on toes. Especially as a programmer, if I make one small mistake - wham! I could give away private information about couples’ relationships. Hundreds of people could be affected.</p>\n<p>Communities &amp; friendships, like the Internet &amp; networks, are built on trust, but if no one is wearing shoes, then one person in cleats can do a lot of damage. So, let’s keep our shoes on, but leave the clogs at home.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The world is at our fingertips. Opportunities to reach vast audiences abound. In yesteryears it took great foresight and planning to assemble the masses, while today whatever stumbles from my lips could end up on YouTube. Ordinary people are speaking, and everyone is listening.</p>\n<p>Take <a href=\"http://en.wikipedia.org/wiki/Cliff_stoll\" title=\"Clifford Stoll\" target=\"_blank\" rel=\"noopener\">Cliff Stoll</a> for example. He never considered himself a computer wizard, but his patience and persistence <a href=\"http://www.amazon.com/Cuckoos-Egg-Tracking-Computer-Espionage/dp/0743411463\" title=\"The Cuckoo\" target=\"_blank\" rel=\"noopener\">caught an international spy</a>. <a href=\"http://en.wikipedia.org/wiki/Robert_Tappan_Morris\" title=\"RTM\" target=\"_blank\" rel=\"noopener\">Robert Morris</a> launched the first worm that froze two thousand computers, even though it was “not very well written”.</p>\n<p>Technology is bringing such a number of people into our reach, that it’s hard not to step on toes. Especially as a programmer, if I make one small mistake - wham! I could give away private information about couples’ relationships. Hundreds of people could be affected.</p>\n<p>Communities &amp; friendships, like the Internet &amp; networks, are built on trust, but if no one is wearing shoes, then one person in cleats can do a lot of damage. So, let’s keep our shoes on, but leave the clogs at home.</p>\n"},{"title":"Barefoot (Revisited)","id":"27","date":"2008-05-21T02:16:35.000Z","_content":"\nAs I thought more on the topic of Internet security and privacy, I decided to revisit the image of going [barefoot on the net](http://thetalecrafter.wordpress.com/2008/02/25/barefoot-on-the-net/ \"Previous Article\").  This time, however, in the form of a poem.  Here it is:\n\n**Barefoot**\n\nI stand <span class=\"nfakPe\">barefoot</span> in the dark\nOn the brink of the unknown\nI see not to the left or to the right\nBut where I stand alone\n\nVoices call beyond my view\nAnd I smell nearby perfume\nPromising treasures to be obtained\nAnd pleasures to consume\n\nAlso far off another's call\nWarns of glass littering the ground\nThistles and briars to snare my feet\nAnd beasts that devour without sound\n\nThere is much I need to do\nAnd knowledge that I hope to gain\nIf I can just put my foot forward\nAnd risk the misfortune and pain\n\nDo I dare venture forward\nInto the darkness I fear\nOr shall I wait here forever\nFor a light that may never appear\n\n<span style=\"font-size:x-small;\"><span>Copyright </span></span>© 2008 Andrew VanWagoner","source":"_posts/barefoot-revisited.md","raw":"title: Barefoot (Revisited)\ntags:\n  - barefoot\n  - internet\n  - Poetry\n  - privacy\n  - safety\nid: 27\ncategories:\n  - Poetry\ndate: 2008-05-20 20:16:35\n---\n\nAs I thought more on the topic of Internet security and privacy, I decided to revisit the image of going [barefoot on the net](http://thetalecrafter.wordpress.com/2008/02/25/barefoot-on-the-net/ \"Previous Article\").  This time, however, in the form of a poem.  Here it is:\n\n**Barefoot**\n\nI stand <span class=\"nfakPe\">barefoot</span> in the dark\nOn the brink of the unknown\nI see not to the left or to the right\nBut where I stand alone\n\nVoices call beyond my view\nAnd I smell nearby perfume\nPromising treasures to be obtained\nAnd pleasures to consume\n\nAlso far off another's call\nWarns of glass littering the ground\nThistles and briars to snare my feet\nAnd beasts that devour without sound\n\nThere is much I need to do\nAnd knowledge that I hope to gain\nIf I can just put my foot forward\nAnd risk the misfortune and pain\n\nDo I dare venture forward\nInto the darkness I fear\nOr shall I wait here forever\nFor a light that may never appear\n\n<span style=\"font-size:x-small;\"><span>Copyright </span></span>© 2008 Andrew VanWagoner","slug":"barefoot-revisited","published":1,"updated":"2018-05-08T17:28:54.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei59000cv1ppwl27r5re","content":"<p>As I thought more on the topic of Internet security and privacy, I decided to revisit the image of going <a href=\"http://thetalecrafter.wordpress.com/2008/02/25/barefoot-on-the-net/\" title=\"Previous Article\" target=\"_blank\" rel=\"noopener\">barefoot on the net</a>.  This time, however, in the form of a poem.  Here it is:</p>\n<p><strong>Barefoot</strong></p>\n<p>I stand <span class=\"nfakPe\">barefoot</span> in the dark<br>On the brink of the unknown<br>I see not to the left or to the right<br>But where I stand alone</p>\n<p>Voices call beyond my view<br>And I smell nearby perfume<br>Promising treasures to be obtained<br>And pleasures to consume</p>\n<p>Also far off another’s call<br>Warns of glass littering the ground<br>Thistles and briars to snare my feet<br>And beasts that devour without sound</p>\n<p>There is much I need to do<br>And knowledge that I hope to gain<br>If I can just put my foot forward<br>And risk the misfortune and pain</p>\n<p>Do I dare venture forward<br>Into the darkness I fear<br>Or shall I wait here forever<br>For a light that may never appear</p>\n<p><span style=\"font-size:x-small;\"><span>Copyright </span></span>© 2008 Andrew VanWagoner</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As I thought more on the topic of Internet security and privacy, I decided to revisit the image of going <a href=\"http://thetalecrafter.wordpress.com/2008/02/25/barefoot-on-the-net/\" title=\"Previous Article\" target=\"_blank\" rel=\"noopener\">barefoot on the net</a>.  This time, however, in the form of a poem.  Here it is:</p>\n<p><strong>Barefoot</strong></p>\n<p>I stand <span class=\"nfakPe\">barefoot</span> in the dark<br>On the brink of the unknown<br>I see not to the left or to the right<br>But where I stand alone</p>\n<p>Voices call beyond my view<br>And I smell nearby perfume<br>Promising treasures to be obtained<br>And pleasures to consume</p>\n<p>Also far off another’s call<br>Warns of glass littering the ground<br>Thistles and briars to snare my feet<br>And beasts that devour without sound</p>\n<p>There is much I need to do<br>And knowledge that I hope to gain<br>If I can just put my foot forward<br>And risk the misfortune and pain</p>\n<p>Do I dare venture forward<br>Into the darkness I fear<br>Or shall I wait here forever<br>For a light that may never appear</p>\n<p><span style=\"font-size:x-small;\"><span>Copyright </span></span>© 2008 Andrew VanWagoner</p>\n"},{"title":"Blu-ray Wins the Blue Ribbon","id":"15","date":"2008-02-28T04:12:21.000Z","_content":"\nIt looks like Format War II is over. Sony, Apple, and Pioneer cheer while Toshiba, NEC, and others shuffle to join the Blu-ray market. RCA, Microsoft, Onkyo, and Intel are counting their losses as supporters of the soon to be obsolete HD DVD.\n\nThough the next generation media has been decided (for now), I doubt that everyone will rush off to buy a Blu-ray player (at least $250) while DVD players can be found for as little as $15\\. For most, the quality improvement in Blu-ray is insufficient to overcome the hit to the wallet. Plus for those like my parents, who own nearly 600 VHS tapes, there is little motivation to embrace a new media that will obsolete their vast collection.\n\nAs a side note, it will be interesting to see if HD DVD lingers behind the scenes as long as the Betamax, which continued to be produced, though invisible to the world, until 2002.","source":"_posts/blu-ray-wins-the-blue-ribbon.md","raw":"title: Blu-ray Wins the Blue Ribbon\ntags:\n  - Beta\n  - Betamax\n  - Blu-ray\n  - DVD\n  - format war\n  - HD DVD\n  - VHS\nid: 15\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-02-27 21:12:21\n---\n\nIt looks like Format War II is over. Sony, Apple, and Pioneer cheer while Toshiba, NEC, and others shuffle to join the Blu-ray market. RCA, Microsoft, Onkyo, and Intel are counting their losses as supporters of the soon to be obsolete HD DVD.\n\nThough the next generation media has been decided (for now), I doubt that everyone will rush off to buy a Blu-ray player (at least $250) while DVD players can be found for as little as $15\\. For most, the quality improvement in Blu-ray is insufficient to overcome the hit to the wallet. Plus for those like my parents, who own nearly 600 VHS tapes, there is little motivation to embrace a new media that will obsolete their vast collection.\n\nAs a side note, it will be interesting to see if HD DVD lingers behind the scenes as long as the Betamax, which continued to be produced, though invisible to the world, until 2002.","slug":"blu-ray-wins-the-blue-ribbon","published":1,"updated":"2018-05-08T17:28:54.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5a000dv1pp8f9vz5ui","content":"<p>It looks like Format War II is over. Sony, Apple, and Pioneer cheer while Toshiba, NEC, and others shuffle to join the Blu-ray market. RCA, Microsoft, Onkyo, and Intel are counting their losses as supporters of the soon to be obsolete HD DVD.</p>\n<p>Though the next generation media has been decided (for now), I doubt that everyone will rush off to buy a Blu-ray player (at least $250) while DVD players can be found for as little as $15. For most, the quality improvement in Blu-ray is insufficient to overcome the hit to the wallet. Plus for those like my parents, who own nearly 600 VHS tapes, there is little motivation to embrace a new media that will obsolete their vast collection.</p>\n<p>As a side note, it will be interesting to see if HD DVD lingers behind the scenes as long as the Betamax, which continued to be produced, though invisible to the world, until 2002.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>It looks like Format War II is over. Sony, Apple, and Pioneer cheer while Toshiba, NEC, and others shuffle to join the Blu-ray market. RCA, Microsoft, Onkyo, and Intel are counting their losses as supporters of the soon to be obsolete HD DVD.</p>\n<p>Though the next generation media has been decided (for now), I doubt that everyone will rush off to buy a Blu-ray player (at least $250) while DVD players can be found for as little as $15. For most, the quality improvement in Blu-ray is insufficient to overcome the hit to the wallet. Plus for those like my parents, who own nearly 600 VHS tapes, there is little motivation to embrace a new media that will obsolete their vast collection.</p>\n<p>As a side note, it will be interesting to see if HD DVD lingers behind the scenes as long as the Betamax, which continued to be produced, though invisible to the world, until 2002.</p>\n"},{"title":"CommonJS in the Browser","id":"109","date":"2011-09-22T20:33:25.000Z","_content":"\nI've been thinking a lot lately about how to use [CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1.1) in my web applications. I even started a [repository on github](https://github.com/thetalecrafter/modules) for my implementation. As is apparent from [searching](http://lmgtfy.com/?q=commonjs+in+the+browser), the task is non-trivial, and there are lots of people trying to do the same thing, and every one of them has a different idea about how it should work.\n\n**But WHY would you want to use CommonJS (formerly known as ServerJS) modules in a client environment?**\n\nIdeally you can share modules between client and server, but that requires you to use a server environment like [node.js](nodejs.org), which might make management really nervous. Even without sharing the CommonJS module system helps us avoid some annoyances in JavaScript development.\n\n*   Each module has it's own scope. I don't have to manually wrap each file in a function to get a new variable scope. (Of course, to achieve this, the boilerplate is going to have to wrap each module's code in a function anyway.)\n*   Namespaces are only used in the require function, not everywhere in my code. Almost inevitably every web application I've worked in ends up using code like the following:\n```javascript\n    var whatIWanted = new FormerCompanyName.Common.CoolLibrary.ConstructorName( More.namespace.chains.than.you.can.follow );\n    // the rest of this file continues to use these ridiculously long namespaces\n```\n\nAlthough I'm sure many will disagree with me, I much prefer the CommonJS way:\n\n```javascript\n    var CoolModule = require('common/cool-library'),\n        thingINeed = require('more/namespace/chains/than/you/can/follow'),\n        whatIWanted = new CoolModule.ConstructorName(thingINeed);\n    // the rest of the file is void of long namespaces\n```\n\nAnd much more importantly, when I define a new module (or class as some insist on calling them):\n\n```javascript\n    FormerCompanyName.Common.CoolLibrary.ConstructorName = function() {/* ... */};\n    // versus\n    exports.ConstructorName = function() {/* ... */};\n    // or even\n    module.exports = function() {/* ... */} // this case isn't in the spec, but I really like it, so I made sure my library can handle it.\n```\n*   Because you can also use relative module identifiers (\"./sibling-module\", \"../uncle-module\"), when the company changes it's name, it can be as simple as renaming a folder to update all the top-level module ids.\n*   Additionally, modules can be included in the page in any order, and are only executed when first required, instead of all modules executing immediately upon inclusion, requiring the script order to be specific and fragile. If I add a new module using CommonJS, I can just append it to the end of the list, otherwise I have to make sure it is earlier in the page than whatever uses it, and after whatever it uses.\n**Okay, but how much work is it going to be?**\n\nLet's walk through first what I wanted my server-side code to look like, then what it has to do to make it work on the other side.\n\nAs most of my server-side experience thus far has been in php, that's the first language I've used in my implementation.\n\n```php\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Awesome Application</title>\n    <link rel=\"stylesheet\" href=\"awesome-styles.css\" />\n</head>\n<body>\n    <!-- blah blah blah -->\n    <?= Modules::script() /* include all necessary script tags */ ?>\n    <script>require('awesome').go()</script>\n</body>\n</html>\n```\n\nThe Modules class will look for all js files in the folder you put it in, and any subfolders, and will id them by their path.\n\nYes, I am including every module, not actually checking dependencies. I refer you back to [my previous post](/2011/04/13/load-only-when-needed-or-preload-everything/) and say this is the simplest way, and if the caching headers are working, the experience won't suffer. You are welcome to use one of the [fantastic libraries](http://lmgtfy.com/?q=async+require+javascript) that loads modules on-demand, if you disagree.\n\nHopefully that is all the server-side API you need to worry about, but there is more if you need it.\n\n**So what is that library doing to my poor scripts to make the CommonJS module environment?**\n\nI will explain in detail what goes into it in another post, but if you are daring, you can check out the source on [github](https://github.com/thetalecrafter/modules).\n","source":"_posts/commonjs-in-the-browser.md","raw":"title: CommonJS in the Browser\ntags:\n  - CommonJS\n  - include\n  - JavaScript\n  - modules\n  - require\nid: 109\ncategories:\n  - JavaScript\ndate: 2011-09-22 14:33:25\n---\n\nI've been thinking a lot lately about how to use [CommonJS modules](http://wiki.commonjs.org/wiki/Modules/1.1.1) in my web applications. I even started a [repository on github](https://github.com/thetalecrafter/modules) for my implementation. As is apparent from [searching](http://lmgtfy.com/?q=commonjs+in+the+browser), the task is non-trivial, and there are lots of people trying to do the same thing, and every one of them has a different idea about how it should work.\n\n**But WHY would you want to use CommonJS (formerly known as ServerJS) modules in a client environment?**\n\nIdeally you can share modules between client and server, but that requires you to use a server environment like [node.js](nodejs.org), which might make management really nervous. Even without sharing the CommonJS module system helps us avoid some annoyances in JavaScript development.\n\n*   Each module has it's own scope. I don't have to manually wrap each file in a function to get a new variable scope. (Of course, to achieve this, the boilerplate is going to have to wrap each module's code in a function anyway.)\n*   Namespaces are only used in the require function, not everywhere in my code. Almost inevitably every web application I've worked in ends up using code like the following:\n```javascript\n    var whatIWanted = new FormerCompanyName.Common.CoolLibrary.ConstructorName( More.namespace.chains.than.you.can.follow );\n    // the rest of this file continues to use these ridiculously long namespaces\n```\n\nAlthough I'm sure many will disagree with me, I much prefer the CommonJS way:\n\n```javascript\n    var CoolModule = require('common/cool-library'),\n        thingINeed = require('more/namespace/chains/than/you/can/follow'),\n        whatIWanted = new CoolModule.ConstructorName(thingINeed);\n    // the rest of the file is void of long namespaces\n```\n\nAnd much more importantly, when I define a new module (or class as some insist on calling them):\n\n```javascript\n    FormerCompanyName.Common.CoolLibrary.ConstructorName = function() {/* ... */};\n    // versus\n    exports.ConstructorName = function() {/* ... */};\n    // or even\n    module.exports = function() {/* ... */} // this case isn't in the spec, but I really like it, so I made sure my library can handle it.\n```\n*   Because you can also use relative module identifiers (\"./sibling-module\", \"../uncle-module\"), when the company changes it's name, it can be as simple as renaming a folder to update all the top-level module ids.\n*   Additionally, modules can be included in the page in any order, and are only executed when first required, instead of all modules executing immediately upon inclusion, requiring the script order to be specific and fragile. If I add a new module using CommonJS, I can just append it to the end of the list, otherwise I have to make sure it is earlier in the page than whatever uses it, and after whatever it uses.\n**Okay, but how much work is it going to be?**\n\nLet's walk through first what I wanted my server-side code to look like, then what it has to do to make it work on the other side.\n\nAs most of my server-side experience thus far has been in php, that's the first language I've used in my implementation.\n\n```php\n<!DOCTYPE html>\n<html>\n<head>\n    <title>My Awesome Application</title>\n    <link rel=\"stylesheet\" href=\"awesome-styles.css\" />\n</head>\n<body>\n    <!-- blah blah blah -->\n    <?= Modules::script() /* include all necessary script tags */ ?>\n    <script>require('awesome').go()</script>\n</body>\n</html>\n```\n\nThe Modules class will look for all js files in the folder you put it in, and any subfolders, and will id them by their path.\n\nYes, I am including every module, not actually checking dependencies. I refer you back to [my previous post](/2011/04/13/load-only-when-needed-or-preload-everything/) and say this is the simplest way, and if the caching headers are working, the experience won't suffer. You are welcome to use one of the [fantastic libraries](http://lmgtfy.com/?q=async+require+javascript) that loads modules on-demand, if you disagree.\n\nHopefully that is all the server-side API you need to worry about, but there is more if you need it.\n\n**So what is that library doing to my poor scripts to make the CommonJS module environment?**\n\nI will explain in detail what goes into it in another post, but if you are daring, you can check out the source on [github](https://github.com/thetalecrafter/modules).\n","slug":"commonjs-in-the-browser","published":1,"updated":"2018-05-08T17:28:54.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5d000hv1pp8nh34sl1","content":"<p>I’ve been thinking a lot lately about how to use <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1.1\" target=\"_blank\" rel=\"noopener\">CommonJS modules</a> in my web applications. I even started a <a href=\"https://github.com/thetalecrafter/modules\" target=\"_blank\" rel=\"noopener\">repository on github</a> for my implementation. As is apparent from <a href=\"http://lmgtfy.com/?q=commonjs+in+the+browser\" target=\"_blank\" rel=\"noopener\">searching</a>, the task is non-trivial, and there are lots of people trying to do the same thing, and every one of them has a different idea about how it should work.</p>\n<p><strong>But WHY would you want to use CommonJS (formerly known as ServerJS) modules in a client environment?</strong></p>\n<p>Ideally you can share modules between client and server, but that requires you to use a server environment like <a href=\"nodejs.org\">node.js</a>, which might make management really nervous. Even without sharing the CommonJS module system helps us avoid some annoyances in JavaScript development.</p>\n<ul>\n<li>Each module has it’s own scope. I don’t have to manually wrap each file in a function to get a new variable scope. (Of course, to achieve this, the boilerplate is going to have to wrap each module’s code in a function anyway.)</li>\n<li>Namespaces are only used in the require function, not everywhere in my code. Almost inevitably every web application I’ve worked in ends up using code like the following:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> whatIWanted = <span class=\"keyword\">new</span> FormerCompanyName.Common.CoolLibrary.ConstructorName( More.namespace.chains.than.you.can.follow );</span><br><span class=\"line\"><span class=\"comment\">// the rest of this file continues to use these ridiculously long namespaces</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Although I’m sure many will disagree with me, I much prefer the CommonJS way:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CoolModule = <span class=\"built_in\">require</span>(<span class=\"string\">'common/cool-library'</span>),</span><br><span class=\"line\">    thingINeed = <span class=\"built_in\">require</span>(<span class=\"string\">'more/namespace/chains/than/you/can/follow'</span>),</span><br><span class=\"line\">    whatIWanted = <span class=\"keyword\">new</span> CoolModule.ConstructorName(thingINeed);</span><br><span class=\"line\"><span class=\"comment\">// the rest of the file is void of long namespaces</span></span><br></pre></td></tr></table></figure>\n<p>And much more importantly, when I define a new module (or class as some insist on calling them):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FormerCompanyName.Common.CoolLibrary.ConstructorName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* ... */</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// versus</span></span><br><span class=\"line\">exports.ConstructorName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* ... */</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// or even</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* ... */</span>&#125; <span class=\"comment\">// this case isn't in the spec, but I really like it, so I made sure my library can handle it.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Because you can also use relative module identifiers (“./sibling-module”, “../uncle-module”), when the company changes it’s name, it can be as simple as renaming a folder to update all the top-level module ids.</li>\n<li>Additionally, modules can be included in the page in any order, and are only executed when first required, instead of all modules executing immediately upon inclusion, requiring the script order to be specific and fragile. If I add a new module using CommonJS, I can just append it to the end of the list, otherwise I have to make sure it is earlier in the page than whatever uses it, and after whatever it uses.<br><strong>Okay, but how much work is it going to be?</strong></li>\n</ul>\n<p>Let’s walk through first what I wanted my server-side code to look like, then what it has to do to make it work on the other side.</p>\n<p>As most of my server-side experience thus far has been in php, that’s the first language I’ve used in my implementation.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;My Awesome Application&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"awesome-styles.css\"</span> /&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- blah blah blah --&gt;</span><br><span class=\"line\">    <span class=\"meta\">&lt;?</span>= Modules::script() <span class=\"comment\">/* include all necessary script tags */</span> <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    &lt;script&gt;<span class=\"keyword\">require</span>(<span class=\"string\">'awesome'</span>).go()&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>The Modules class will look for all js files in the folder you put it in, and any subfolders, and will id them by their path.</p>\n<p>Yes, I am including every module, not actually checking dependencies. I refer you back to <a href=\"/2011/04/13/load-only-when-needed-or-preload-everything/\">my previous post</a> and say this is the simplest way, and if the caching headers are working, the experience won’t suffer. You are welcome to use one of the <a href=\"http://lmgtfy.com/?q=async+require+javascript\" target=\"_blank\" rel=\"noopener\">fantastic libraries</a> that loads modules on-demand, if you disagree.</p>\n<p>Hopefully that is all the server-side API you need to worry about, but there is more if you need it.</p>\n<p><strong>So what is that library doing to my poor scripts to make the CommonJS module environment?</strong></p>\n<p>I will explain in detail what goes into it in another post, but if you are daring, you can check out the source on <a href=\"https://github.com/thetalecrafter/modules\" target=\"_blank\" rel=\"noopener\">github</a>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I’ve been thinking a lot lately about how to use <a href=\"http://wiki.commonjs.org/wiki/Modules/1.1.1\" target=\"_blank\" rel=\"noopener\">CommonJS modules</a> in my web applications. I even started a <a href=\"https://github.com/thetalecrafter/modules\" target=\"_blank\" rel=\"noopener\">repository on github</a> for my implementation. As is apparent from <a href=\"http://lmgtfy.com/?q=commonjs+in+the+browser\" target=\"_blank\" rel=\"noopener\">searching</a>, the task is non-trivial, and there are lots of people trying to do the same thing, and every one of them has a different idea about how it should work.</p>\n<p><strong>But WHY would you want to use CommonJS (formerly known as ServerJS) modules in a client environment?</strong></p>\n<p>Ideally you can share modules between client and server, but that requires you to use a server environment like <a href=\"nodejs.org\">node.js</a>, which might make management really nervous. Even without sharing the CommonJS module system helps us avoid some annoyances in JavaScript development.</p>\n<ul>\n<li>Each module has it’s own scope. I don’t have to manually wrap each file in a function to get a new variable scope. (Of course, to achieve this, the boilerplate is going to have to wrap each module’s code in a function anyway.)</li>\n<li>Namespaces are only used in the require function, not everywhere in my code. Almost inevitably every web application I’ve worked in ends up using code like the following:<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> whatIWanted = <span class=\"keyword\">new</span> FormerCompanyName.Common.CoolLibrary.ConstructorName( More.namespace.chains.than.you.can.follow );</span><br><span class=\"line\"><span class=\"comment\">// the rest of this file continues to use these ridiculously long namespaces</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>Although I’m sure many will disagree with me, I much prefer the CommonJS way:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> CoolModule = <span class=\"built_in\">require</span>(<span class=\"string\">'common/cool-library'</span>),</span><br><span class=\"line\">    thingINeed = <span class=\"built_in\">require</span>(<span class=\"string\">'more/namespace/chains/than/you/can/follow'</span>),</span><br><span class=\"line\">    whatIWanted = <span class=\"keyword\">new</span> CoolModule.ConstructorName(thingINeed);</span><br><span class=\"line\"><span class=\"comment\">// the rest of the file is void of long namespaces</span></span><br></pre></td></tr></table></figure>\n<p>And much more importantly, when I define a new module (or class as some insist on calling them):</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FormerCompanyName.Common.CoolLibrary.ConstructorName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* ... */</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// versus</span></span><br><span class=\"line\">exports.ConstructorName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* ... */</span>&#125;;</span><br><span class=\"line\"><span class=\"comment\">// or even</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">/* ... */</span>&#125; <span class=\"comment\">// this case isn't in the spec, but I really like it, so I made sure my library can handle it.</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Because you can also use relative module identifiers (“./sibling-module”, “../uncle-module”), when the company changes it’s name, it can be as simple as renaming a folder to update all the top-level module ids.</li>\n<li>Additionally, modules can be included in the page in any order, and are only executed when first required, instead of all modules executing immediately upon inclusion, requiring the script order to be specific and fragile. If I add a new module using CommonJS, I can just append it to the end of the list, otherwise I have to make sure it is earlier in the page than whatever uses it, and after whatever it uses.<br><strong>Okay, but how much work is it going to be?</strong></li>\n</ul>\n<p>Let’s walk through first what I wanted my server-side code to look like, then what it has to do to make it work on the other side.</p>\n<p>As most of my server-side experience thus far has been in php, that’s the first language I’ve used in my implementation.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">    &lt;title&gt;My Awesome Application&lt;/title&gt;</span><br><span class=\"line\">    &lt;link rel=<span class=\"string\">\"stylesheet\"</span> href=<span class=\"string\">\"awesome-styles.css\"</span> /&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">    &lt;!-- blah blah blah --&gt;</span><br><span class=\"line\">    <span class=\"meta\">&lt;?</span>= Modules::script() <span class=\"comment\">/* include all necessary script tags */</span> <span class=\"meta\">?&gt;</span></span><br><span class=\"line\">    &lt;script&gt;<span class=\"keyword\">require</span>(<span class=\"string\">'awesome'</span>).go()&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>The Modules class will look for all js files in the folder you put it in, and any subfolders, and will id them by their path.</p>\n<p>Yes, I am including every module, not actually checking dependencies. I refer you back to <a href=\"/2011/04/13/load-only-when-needed-or-preload-everything/\">my previous post</a> and say this is the simplest way, and if the caching headers are working, the experience won’t suffer. You are welcome to use one of the <a href=\"http://lmgtfy.com/?q=async+require+javascript\" target=\"_blank\" rel=\"noopener\">fantastic libraries</a> that loads modules on-demand, if you disagree.</p>\n<p>Hopefully that is all the server-side API you need to worry about, but there is more if you need it.</p>\n<p><strong>So what is that library doing to my poor scripts to make the CommonJS module environment?</strong></p>\n<p>I will explain in detail what goes into it in another post, but if you are daring, you can check out the source on <a href=\"https://github.com/thetalecrafter/modules\" target=\"_blank\" rel=\"noopener\">github</a>.</p>\n"},{"title":"Breathless in a New World","date":"2015-06-24T02:03:10.000Z","_content":"\nLast night I was thinking about the E3 coverage of the upcoming game [No Man's Sky](http://www.no-mans-sky.com), as well as the worlds of [Metroid](http://www.metroid.com/). The following is definitely influenced by forementioned, but it isn't meant to fit in either as fan fiction. It's simply an attempt to capture how I imagine being alone on a foriegn world might feel. Especially if something else wanted to claim it first. You never know what is out there.\n\n---\n\nNo air. I desperately gulped at the void around my face, but I found nothing. Can't think. Can't breath. No air.\n\nMy captor unsealed the mask, and a hint of breath filled my starving lungs. Then again, it was sucked out and I was left gasping in vain.\n\nThe room tumbled about me, and the single light blinded me from everything else.\n\nMy insides lurched and the mask filled with bile. Again the mask was removed, and I collapsed on the ground. The bindings on my wrist tore into my flesh through the sudden fall. I barely noticed. I wheezed in the breath of life.\n\n\"We're going to try this again,\" rasped my reptilian captor. \"Who else knows about this world?\"\n\nI shook my head with closed eyes.\n\nThe sudden force of a boot pressed every molecule of oxygen from my breast.\n\n\"Final question,\" it calmly continued. \"After I have suffocated you in your own vomit, into which star shall I send your remains?\"\n\nA weapons I couldn't recognize rested against my head. In that moment I knew I could close my eyes forever. The searing pain in my chest and head would disappear. An accidental smile stole across my lips.\n\n\"You worthless filth, you.\" it sneered, feathers frilling out around its head.\n\n\"I sent ... a beacon,\" I whispered, between shallow breaths.\n\n\"What did you say?\" roared the creature, lifting me up to its face.\n\nI tried to chuckle, but it turned into more of a cough. I took a solid breath and repeated, \"I sent a beacon. It's only a matter of time now.\"\n\nIn disgust, my captor tossed me aside. In a moment I was alone, and the room was silent. Yet I waited. Rather, I rested, and tried to recouperate from near suffocation and being kicked by a being five times my mass.\n\nThe bite of the binding started to sting as my head cleared, so I got up and wandered to where my gear had been discarded. I took no time in locating my blade.\n\nOnce my arms were free, I made my way out of the makeshift shack, and trekked back to the starship. It was unharmed.\nThe data records synced to my ship's main computer the instant I boarded, and a summary presented itself on the screen.\n\n> Stage 3 inhabitable planet\n> Single-cell colonization only\n> Massive deposits of fuel-ready organic mass\n> Massive deposits of a variety of metals\n\n\"Send report beacon?\" the terminal prompted.\n\nI accepted. *I wouldn't want to be a liar, now would I?*\n","source":"_posts/breathless-in-a-new-world.md","raw":"title: Breathless in a New World\ndate: 2015-06-23 20:03:10\ntags:\n  - Short Story\n  - Science Fiction\ncategories:\n  - Prose\n---\n\nLast night I was thinking about the E3 coverage of the upcoming game [No Man's Sky](http://www.no-mans-sky.com), as well as the worlds of [Metroid](http://www.metroid.com/). The following is definitely influenced by forementioned, but it isn't meant to fit in either as fan fiction. It's simply an attempt to capture how I imagine being alone on a foriegn world might feel. Especially if something else wanted to claim it first. You never know what is out there.\n\n---\n\nNo air. I desperately gulped at the void around my face, but I found nothing. Can't think. Can't breath. No air.\n\nMy captor unsealed the mask, and a hint of breath filled my starving lungs. Then again, it was sucked out and I was left gasping in vain.\n\nThe room tumbled about me, and the single light blinded me from everything else.\n\nMy insides lurched and the mask filled with bile. Again the mask was removed, and I collapsed on the ground. The bindings on my wrist tore into my flesh through the sudden fall. I barely noticed. I wheezed in the breath of life.\n\n\"We're going to try this again,\" rasped my reptilian captor. \"Who else knows about this world?\"\n\nI shook my head with closed eyes.\n\nThe sudden force of a boot pressed every molecule of oxygen from my breast.\n\n\"Final question,\" it calmly continued. \"After I have suffocated you in your own vomit, into which star shall I send your remains?\"\n\nA weapons I couldn't recognize rested against my head. In that moment I knew I could close my eyes forever. The searing pain in my chest and head would disappear. An accidental smile stole across my lips.\n\n\"You worthless filth, you.\" it sneered, feathers frilling out around its head.\n\n\"I sent ... a beacon,\" I whispered, between shallow breaths.\n\n\"What did you say?\" roared the creature, lifting me up to its face.\n\nI tried to chuckle, but it turned into more of a cough. I took a solid breath and repeated, \"I sent a beacon. It's only a matter of time now.\"\n\nIn disgust, my captor tossed me aside. In a moment I was alone, and the room was silent. Yet I waited. Rather, I rested, and tried to recouperate from near suffocation and being kicked by a being five times my mass.\n\nThe bite of the binding started to sting as my head cleared, so I got up and wandered to where my gear had been discarded. I took no time in locating my blade.\n\nOnce my arms were free, I made my way out of the makeshift shack, and trekked back to the starship. It was unharmed.\nThe data records synced to my ship's main computer the instant I boarded, and a summary presented itself on the screen.\n\n> Stage 3 inhabitable planet\n> Single-cell colonization only\n> Massive deposits of fuel-ready organic mass\n> Massive deposits of a variety of metals\n\n\"Send report beacon?\" the terminal prompted.\n\nI accepted. *I wouldn't want to be a liar, now would I?*\n","slug":"breathless-in-a-new-world","published":1,"updated":"2018-05-08T17:28:54.322Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5e000iv1pp0jqihwwc","content":"<p>Last night I was thinking about the E3 coverage of the upcoming game <a href=\"http://www.no-mans-sky.com\" target=\"_blank\" rel=\"noopener\">No Man’s Sky</a>, as well as the worlds of <a href=\"http://www.metroid.com/\" target=\"_blank\" rel=\"noopener\">Metroid</a>. The following is definitely influenced by forementioned, but it isn’t meant to fit in either as fan fiction. It’s simply an attempt to capture how I imagine being alone on a foriegn world might feel. Especially if something else wanted to claim it first. You never know what is out there.</p>\n<hr>\n<p>No air. I desperately gulped at the void around my face, but I found nothing. Can’t think. Can’t breath. No air.</p>\n<p>My captor unsealed the mask, and a hint of breath filled my starving lungs. Then again, it was sucked out and I was left gasping in vain.</p>\n<p>The room tumbled about me, and the single light blinded me from everything else.</p>\n<p>My insides lurched and the mask filled with bile. Again the mask was removed, and I collapsed on the ground. The bindings on my wrist tore into my flesh through the sudden fall. I barely noticed. I wheezed in the breath of life.</p>\n<p>“We’re going to try this again,” rasped my reptilian captor. “Who else knows about this world?”</p>\n<p>I shook my head with closed eyes.</p>\n<p>The sudden force of a boot pressed every molecule of oxygen from my breast.</p>\n<p>“Final question,” it calmly continued. “After I have suffocated you in your own vomit, into which star shall I send your remains?”</p>\n<p>A weapons I couldn’t recognize rested against my head. In that moment I knew I could close my eyes forever. The searing pain in my chest and head would disappear. An accidental smile stole across my lips.</p>\n<p>“You worthless filth, you.” it sneered, feathers frilling out around its head.</p>\n<p>“I sent … a beacon,” I whispered, between shallow breaths.</p>\n<p>“What did you say?” roared the creature, lifting me up to its face.</p>\n<p>I tried to chuckle, but it turned into more of a cough. I took a solid breath and repeated, “I sent a beacon. It’s only a matter of time now.”</p>\n<p>In disgust, my captor tossed me aside. In a moment I was alone, and the room was silent. Yet I waited. Rather, I rested, and tried to recouperate from near suffocation and being kicked by a being five times my mass.</p>\n<p>The bite of the binding started to sting as my head cleared, so I got up and wandered to where my gear had been discarded. I took no time in locating my blade.</p>\n<p>Once my arms were free, I made my way out of the makeshift shack, and trekked back to the starship. It was unharmed.<br>The data records synced to my ship’s main computer the instant I boarded, and a summary presented itself on the screen.</p>\n<blockquote>\n<p>Stage 3 inhabitable planet<br>Single-cell colonization only<br>Massive deposits of fuel-ready organic mass<br>Massive deposits of a variety of metals</p>\n</blockquote>\n<p>“Send report beacon?” the terminal prompted.</p>\n<p>I accepted. <em>I wouldn’t want to be a liar, now would I?</em></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Last night I was thinking about the E3 coverage of the upcoming game <a href=\"http://www.no-mans-sky.com\" target=\"_blank\" rel=\"noopener\">No Man’s Sky</a>, as well as the worlds of <a href=\"http://www.metroid.com/\" target=\"_blank\" rel=\"noopener\">Metroid</a>. The following is definitely influenced by forementioned, but it isn’t meant to fit in either as fan fiction. It’s simply an attempt to capture how I imagine being alone on a foriegn world might feel. Especially if something else wanted to claim it first. You never know what is out there.</p>\n<hr>\n<p>No air. I desperately gulped at the void around my face, but I found nothing. Can’t think. Can’t breath. No air.</p>\n<p>My captor unsealed the mask, and a hint of breath filled my starving lungs. Then again, it was sucked out and I was left gasping in vain.</p>\n<p>The room tumbled about me, and the single light blinded me from everything else.</p>\n<p>My insides lurched and the mask filled with bile. Again the mask was removed, and I collapsed on the ground. The bindings on my wrist tore into my flesh through the sudden fall. I barely noticed. I wheezed in the breath of life.</p>\n<p>“We’re going to try this again,” rasped my reptilian captor. “Who else knows about this world?”</p>\n<p>I shook my head with closed eyes.</p>\n<p>The sudden force of a boot pressed every molecule of oxygen from my breast.</p>\n<p>“Final question,” it calmly continued. “After I have suffocated you in your own vomit, into which star shall I send your remains?”</p>\n<p>A weapons I couldn’t recognize rested against my head. In that moment I knew I could close my eyes forever. The searing pain in my chest and head would disappear. An accidental smile stole across my lips.</p>\n<p>“You worthless filth, you.” it sneered, feathers frilling out around its head.</p>\n<p>“I sent … a beacon,” I whispered, between shallow breaths.</p>\n<p>“What did you say?” roared the creature, lifting me up to its face.</p>\n<p>I tried to chuckle, but it turned into more of a cough. I took a solid breath and repeated, “I sent a beacon. It’s only a matter of time now.”</p>\n<p>In disgust, my captor tossed me aside. In a moment I was alone, and the room was silent. Yet I waited. Rather, I rested, and tried to recouperate from near suffocation and being kicked by a being five times my mass.</p>\n<p>The bite of the binding started to sting as my head cleared, so I got up and wandered to where my gear had been discarded. I took no time in locating my blade.</p>\n<p>Once my arms were free, I made my way out of the makeshift shack, and trekked back to the starship. It was unharmed.<br>The data records synced to my ship’s main computer the instant I boarded, and a summary presented itself on the screen.</p>\n<blockquote>\n<p>Stage 3 inhabitable planet<br>Single-cell colonization only<br>Massive deposits of fuel-ready organic mass<br>Massive deposits of a variety of metals</p>\n</blockquote>\n<p>“Send report beacon?” the terminal prompted.</p>\n<p>I accepted. <em>I wouldn’t want to be a liar, now would I?</em></p>\n"},{"title":"Copyright and the Right to Copy","id":"22","date":"2008-04-08T15:51:31.000Z","_content":"\nThe battle for control over mass-reproducible media is still far from over. The record companies are still not ready to embrace the way music can be distributed in our connected world. Now though, most people are tired of the debate. Back in 2003, Orson Scott Card wrote an [interesting article](http://www.ornery.org/essays/warwatch/2003-09-07-1.html \"MP3s Are Not the Devil\") about the competitors in the fight, and I found some points worth talking about.\n\n1.) The difficulty of technologically enforcing copyright\n\nUsing encrypted DVDss as one case, it is extremely easy to install DeCSS or similar libraries to circumvent the encryption. It is very annoying that I can't legally play DVDs at all in Linux. (Unless I get a particular distro OEM.) Aggravating customers is a bad business move.\n\n2.) The money makers are producers, not artists\n\nMost musicians make their big bucks on live concerts. Easily distributed mp3s have only made musicians more popular, and the crowds at their concerts bigger. Changing the copyright law will only hurt the big companies which are _necessarily_ made obsolete. We don't keep carriages around for fear of putting the drivers out of a job. Big record companies are an artifact.\n\n3.) The technology is getting faster\n\nThe technology that initially incited the debate is only going to improve over time. It will not stop because some want to still make money the way they used to. It should be their loss, not everyone else's.\n\nFinal thoughts\nI only use software, music, and movies that I got legally. Like myself, most people are willing to pay a reasonable amount for things they like, and make donations to developers and artists who improve our quality of life. When laws outlive their purpose, it's time for a change.","source":"_posts/copyright-and-the-right-to-copy.md","raw":"title: Copyright and the Right to Copy\nid: 22\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-04-08 09:51:31\ntags:\n---\n\nThe battle for control over mass-reproducible media is still far from over. The record companies are still not ready to embrace the way music can be distributed in our connected world. Now though, most people are tired of the debate. Back in 2003, Orson Scott Card wrote an [interesting article](http://www.ornery.org/essays/warwatch/2003-09-07-1.html \"MP3s Are Not the Devil\") about the competitors in the fight, and I found some points worth talking about.\n\n1.) The difficulty of technologically enforcing copyright\n\nUsing encrypted DVDss as one case, it is extremely easy to install DeCSS or similar libraries to circumvent the encryption. It is very annoying that I can't legally play DVDs at all in Linux. (Unless I get a particular distro OEM.) Aggravating customers is a bad business move.\n\n2.) The money makers are producers, not artists\n\nMost musicians make their big bucks on live concerts. Easily distributed mp3s have only made musicians more popular, and the crowds at their concerts bigger. Changing the copyright law will only hurt the big companies which are _necessarily_ made obsolete. We don't keep carriages around for fear of putting the drivers out of a job. Big record companies are an artifact.\n\n3.) The technology is getting faster\n\nThe technology that initially incited the debate is only going to improve over time. It will not stop because some want to still make money the way they used to. It should be their loss, not everyone else's.\n\nFinal thoughts\nI only use software, music, and movies that I got legally. Like myself, most people are willing to pay a reasonable amount for things they like, and make donations to developers and artists who improve our quality of life. When laws outlive their purpose, it's time for a change.","slug":"copyright-and-the-right-to-copy","published":1,"updated":"2018-05-08T17:28:54.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5g000mv1ppd4we6pqm","content":"<p>The battle for control over mass-reproducible media is still far from over. The record companies are still not ready to embrace the way music can be distributed in our connected world. Now though, most people are tired of the debate. Back in 2003, Orson Scott Card wrote an <a href=\"http://www.ornery.org/essays/warwatch/2003-09-07-1.html\" title=\"MP3s Are Not the Devil\" target=\"_blank\" rel=\"noopener\">interesting article</a> about the competitors in the fight, and I found some points worth talking about.</p>\n<p>1.) The difficulty of technologically enforcing copyright</p>\n<p>Using encrypted DVDss as one case, it is extremely easy to install DeCSS or similar libraries to circumvent the encryption. It is very annoying that I can’t legally play DVDs at all in Linux. (Unless I get a particular distro OEM.) Aggravating customers is a bad business move.</p>\n<p>2.) The money makers are producers, not artists</p>\n<p>Most musicians make their big bucks on live concerts. Easily distributed mp3s have only made musicians more popular, and the crowds at their concerts bigger. Changing the copyright law will only hurt the big companies which are <em>necessarily</em> made obsolete. We don’t keep carriages around for fear of putting the drivers out of a job. Big record companies are an artifact.</p>\n<p>3.) The technology is getting faster</p>\n<p>The technology that initially incited the debate is only going to improve over time. It will not stop because some want to still make money the way they used to. It should be their loss, not everyone else’s.</p>\n<p>Final thoughts<br>I only use software, music, and movies that I got legally. Like myself, most people are willing to pay a reasonable amount for things they like, and make donations to developers and artists who improve our quality of life. When laws outlive their purpose, it’s time for a change.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The battle for control over mass-reproducible media is still far from over. The record companies are still not ready to embrace the way music can be distributed in our connected world. Now though, most people are tired of the debate. Back in 2003, Orson Scott Card wrote an <a href=\"http://www.ornery.org/essays/warwatch/2003-09-07-1.html\" title=\"MP3s Are Not the Devil\" target=\"_blank\" rel=\"noopener\">interesting article</a> about the competitors in the fight, and I found some points worth talking about.</p>\n<p>1.) The difficulty of technologically enforcing copyright</p>\n<p>Using encrypted DVDss as one case, it is extremely easy to install DeCSS or similar libraries to circumvent the encryption. It is very annoying that I can’t legally play DVDs at all in Linux. (Unless I get a particular distro OEM.) Aggravating customers is a bad business move.</p>\n<p>2.) The money makers are producers, not artists</p>\n<p>Most musicians make their big bucks on live concerts. Easily distributed mp3s have only made musicians more popular, and the crowds at their concerts bigger. Changing the copyright law will only hurt the big companies which are <em>necessarily</em> made obsolete. We don’t keep carriages around for fear of putting the drivers out of a job. Big record companies are an artifact.</p>\n<p>3.) The technology is getting faster</p>\n<p>The technology that initially incited the debate is only going to improve over time. It will not stop because some want to still make money the way they used to. It should be their loss, not everyone else’s.</p>\n<p>Final thoughts<br>I only use software, music, and movies that I got legally. Like myself, most people are willing to pay a reasonable amount for things they like, and make donations to developers and artists who improve our quality of life. When laws outlive their purpose, it’s time for a change.</p>\n"},{"title":"Enough Already","id":"8","date":"2008-01-29T03:42:23.000Z","_content":"\nWhether it's playing a video game, or shopping the latest styles, \"I can stop whenever I want\" is insufficient. Repeatedly saying: \"Five more minutes\", \"one last game\", or \"just one more...\" is an early red flag of addiction. Understand that entertainment is useful, even requisite for sanity at times, but not a replacement for life. Few would list a new video game record as a priority, so don't give it more time than your work, education, or family. All play and no work make Joe own you at Halo, but lose his part-time job.","source":"_posts/enough-already.md","raw":"title: Enough Already\ntags:\n  - addiction\n  - entertainment\n  - Halo\n  - self-control\n  - shopping\n  - video games\nid: 8\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-01-28 20:42:23\n---\n\nWhether it's playing a video game, or shopping the latest styles, \"I can stop whenever I want\" is insufficient. Repeatedly saying: \"Five more minutes\", \"one last game\", or \"just one more...\" is an early red flag of addiction. Understand that entertainment is useful, even requisite for sanity at times, but not a replacement for life. Few would list a new video game record as a priority, so don't give it more time than your work, education, or family. All play and no work make Joe own you at Halo, but lose his part-time job.","slug":"enough-already","published":1,"updated":"2018-05-08T17:28:54.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5i000nv1pppkgh8jkv","content":"<p>Whether it’s playing a video game, or shopping the latest styles, “I can stop whenever I want” is insufficient. Repeatedly saying: “Five more minutes”, “one last game”, or “just one more…” is an early red flag of addiction. Understand that entertainment is useful, even requisite for sanity at times, but not a replacement for life. Few would list a new video game record as a priority, so don’t give it more time than your work, education, or family. All play and no work make Joe own you at Halo, but lose his part-time job.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Whether it’s playing a video game, or shopping the latest styles, “I can stop whenever I want” is insufficient. Repeatedly saying: “Five more minutes”, “one last game”, or “just one more…” is an early red flag of addiction. Understand that entertainment is useful, even requisite for sanity at times, but not a replacement for life. Few would list a new video game record as a priority, so don’t give it more time than your work, education, or family. All play and no work make Joe own you at Halo, but lose his part-time job.</p>\n"},{"title":"Discontinuance","id":"28","date":"2008-06-09T20:01:11.000Z","_content":"\nI hope I am not disappointing too many people, but I don't feel strongly enough about this blog and I don't have enough I want to say to blog on a regular basis.\n\nIf you are interested in reading things my wife and I write, we have a blog at [vanwagoner.wordpress.com](http://vanwagoner.wordpress.com).  It will likely be mostly her postings, but when I do write, it will go there first.","source":"_posts/discontinuance.md","raw":"title: Discontinuance\nid: 28\ncategories:\n  - General\ndate: 2008-06-09 14:01:11\ntags:\n---\n\nI hope I am not disappointing too many people, but I don't feel strongly enough about this blog and I don't have enough I want to say to blog on a regular basis.\n\nIf you are interested in reading things my wife and I write, we have a blog at [vanwagoner.wordpress.com](http://vanwagoner.wordpress.com).  It will likely be mostly her postings, but when I do write, it will go there first.","slug":"discontinuance","published":1,"updated":"2018-05-08T17:28:54.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5j000rv1ppllk0b7y0","content":"<p>I hope I am not disappointing too many people, but I don’t feel strongly enough about this blog and I don’t have enough I want to say to blog on a regular basis.</p>\n<p>If you are interested in reading things my wife and I write, we have a blog at <a href=\"http://vanwagoner.wordpress.com\" target=\"_blank\" rel=\"noopener\">vanwagoner.wordpress.com</a>.  It will likely be mostly her postings, but when I do write, it will go there first.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I hope I am not disappointing too many people, but I don’t feel strongly enough about this blog and I don’t have enough I want to say to blog on a regular basis.</p>\n<p>If you are interested in reading things my wife and I write, we have a blog at <a href=\"http://vanwagoner.wordpress.com\" target=\"_blank\" rel=\"noopener\">vanwagoner.wordpress.com</a>.  It will likely be mostly her postings, but when I do write, it will go there first.</p>\n"},{"title":"Distributed System Design","id":"30","date":"2009-01-19T18:38:25.000Z","_content":"\nThis is my last semester at BYU, and I am taking Distributes System Design. As I go through the preocess of creating (with my classmates) a distributed web application, I will be logging my progress and experiences here.\n\nP.S. - Happy Civil Rights Day! I'm using this holiday to catch up on my homework.","source":"_posts/distributed-system-design.md","raw":"title: Distributed System Design\nid: 30\ncategories:\n  - Distributed System Design\ndate: 2009-01-19 11:38:25\ntags:\n---\n\nThis is my last semester at BYU, and I am taking Distributes System Design. As I go through the preocess of creating (with my classmates) a distributed web application, I will be logging my progress and experiences here.\n\nP.S. - Happy Civil Rights Day! I'm using this holiday to catch up on my homework.","slug":"distributed-system-design","published":1,"updated":"2018-05-08T17:28:54.323Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5k000tv1ppcb2jq6p5","content":"<p>This is my last semester at BYU, and I am taking Distributes System Design. As I go through the preocess of creating (with my classmates) a distributed web application, I will be logging my progress and experiences here.</p>\n<p>P.S. - Happy Civil Rights Day! I’m using this holiday to catch up on my homework.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is my last semester at BYU, and I am taking Distributes System Design. As I go through the preocess of creating (with my classmates) a distributed web application, I will be logging my progress and experiences here.</p>\n<p>P.S. - Happy Civil Rights Day! I’m using this holiday to catch up on my homework.</p>\n"},{"title":"Equality and Homogeneity","id":"16","date":"2008-03-11T04:37:15.000Z","_content":"\nI am oft irked when politicians use the the term \"equality\".  All too often I get a sick feeling in my gut that what they are really advocating is homogeneity. Allow me to use [Title IX](http://www.dol.gov/oasam/regs/statutes/titleix.htm \"Educational Amendments\") as an example. In strict letter, Title IX insists on equality.  No one should be favored or disfavored because of sex. However, the [suggestion](http://www.cra.org/CRN/articles/sept03/wyden.html \"Computing Research News\") too often is that because there are less women in Math and Engineering, they should receive more grants, scholarships and \"encouragement\" to participate. Offering a disproportionate amount of support for women, in my mind, is against the equality and fairness explicit in Title IX, but rather pushes for homogeneity.\n\nI've realized over the years that as a white male I am excluded from many opportunities. I try not to complain, as my opportunities are still great, but I cringe at the idea that in order to give the _appearance_ of equality, schools and businesses must fill a quota of minority positions. With the ideal of equality, the best applicants should be hired, even if all of them are Hispanic, Buddhist, female, or (heaven forbid) white men. If 1 out of 100 applicants is a woman, her chances should be 1 : 100.\n\nI insist that men and women are different. People from different cultures value different things. I'm not saying that women shouldn't be in the hard sciences. I am saying let people compete in their desired field on level ground, even if it makes the demographics less diverse. We need to stop imposing a quota on how many people in a workplace or university department must come from a particular background. The numbers never will balance out perfectly, but perhaps we can finally achieve our goal of equality.","source":"_posts/equality-and-homogeneity.md","raw":"title: Equality and Homogeneity\ntags:\n  - computing\n  - engineering\n  - equality\n  - minority\n  - scholarship\n  - science\n  - Title IX\n  - women\nid: 16\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-03-10 22:37:15\n---\n\nI am oft irked when politicians use the the term \"equality\".  All too often I get a sick feeling in my gut that what they are really advocating is homogeneity. Allow me to use [Title IX](http://www.dol.gov/oasam/regs/statutes/titleix.htm \"Educational Amendments\") as an example. In strict letter, Title IX insists on equality.  No one should be favored or disfavored because of sex. However, the [suggestion](http://www.cra.org/CRN/articles/sept03/wyden.html \"Computing Research News\") too often is that because there are less women in Math and Engineering, they should receive more grants, scholarships and \"encouragement\" to participate. Offering a disproportionate amount of support for women, in my mind, is against the equality and fairness explicit in Title IX, but rather pushes for homogeneity.\n\nI've realized over the years that as a white male I am excluded from many opportunities. I try not to complain, as my opportunities are still great, but I cringe at the idea that in order to give the _appearance_ of equality, schools and businesses must fill a quota of minority positions. With the ideal of equality, the best applicants should be hired, even if all of them are Hispanic, Buddhist, female, or (heaven forbid) white men. If 1 out of 100 applicants is a woman, her chances should be 1 : 100.\n\nI insist that men and women are different. People from different cultures value different things. I'm not saying that women shouldn't be in the hard sciences. I am saying let people compete in their desired field on level ground, even if it makes the demographics less diverse. We need to stop imposing a quota on how many people in a workplace or university department must come from a particular background. The numbers never will balance out perfectly, but perhaps we can finally achieve our goal of equality.","slug":"equality-and-homogeneity","published":1,"updated":"2018-05-08T17:28:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5l000vv1pph9s1zx8x","content":"<p>I am oft irked when politicians use the the term “equality”.  All too often I get a sick feeling in my gut that what they are really advocating is homogeneity. Allow me to use <a href=\"http://www.dol.gov/oasam/regs/statutes/titleix.htm\" title=\"Educational Amendments\" target=\"_blank\" rel=\"noopener\">Title IX</a> as an example. In strict letter, Title IX insists on equality.  No one should be favored or disfavored because of sex. However, the <a href=\"http://www.cra.org/CRN/articles/sept03/wyden.html\" title=\"Computing Research News\" target=\"_blank\" rel=\"noopener\">suggestion</a> too often is that because there are less women in Math and Engineering, they should receive more grants, scholarships and “encouragement” to participate. Offering a disproportionate amount of support for women, in my mind, is against the equality and fairness explicit in Title IX, but rather pushes for homogeneity.</p>\n<p>I’ve realized over the years that as a white male I am excluded from many opportunities. I try not to complain, as my opportunities are still great, but I cringe at the idea that in order to give the <em>appearance</em> of equality, schools and businesses must fill a quota of minority positions. With the ideal of equality, the best applicants should be hired, even if all of them are Hispanic, Buddhist, female, or (heaven forbid) white men. If 1 out of 100 applicants is a woman, her chances should be 1 : 100.</p>\n<p>I insist that men and women are different. People from different cultures value different things. I’m not saying that women shouldn’t be in the hard sciences. I am saying let people compete in their desired field on level ground, even if it makes the demographics less diverse. We need to stop imposing a quota on how many people in a workplace or university department must come from a particular background. The numbers never will balance out perfectly, but perhaps we can finally achieve our goal of equality.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I am oft irked when politicians use the the term “equality”.  All too often I get a sick feeling in my gut that what they are really advocating is homogeneity. Allow me to use <a href=\"http://www.dol.gov/oasam/regs/statutes/titleix.htm\" title=\"Educational Amendments\" target=\"_blank\" rel=\"noopener\">Title IX</a> as an example. In strict letter, Title IX insists on equality.  No one should be favored or disfavored because of sex. However, the <a href=\"http://www.cra.org/CRN/articles/sept03/wyden.html\" title=\"Computing Research News\" target=\"_blank\" rel=\"noopener\">suggestion</a> too often is that because there are less women in Math and Engineering, they should receive more grants, scholarships and “encouragement” to participate. Offering a disproportionate amount of support for women, in my mind, is against the equality and fairness explicit in Title IX, but rather pushes for homogeneity.</p>\n<p>I’ve realized over the years that as a white male I am excluded from many opportunities. I try not to complain, as my opportunities are still great, but I cringe at the idea that in order to give the <em>appearance</em> of equality, schools and businesses must fill a quota of minority positions. With the ideal of equality, the best applicants should be hired, even if all of them are Hispanic, Buddhist, female, or (heaven forbid) white men. If 1 out of 100 applicants is a woman, her chances should be 1 : 100.</p>\n<p>I insist that men and women are different. People from different cultures value different things. I’m not saying that women shouldn’t be in the hard sciences. I am saying let people compete in their desired field on level ground, even if it makes the demographics less diverse. We need to stop imposing a quota on how many people in a workplace or university department must come from a particular background. The numbers never will balance out perfectly, but perhaps we can finally achieve our goal of equality.</p>\n"},{"title":"Growing Software","id":"24","date":"2008-04-11T20:54:37.000Z","_content":"\nAgile methods have proven time and again to produce better software quicker. Extreme programming, iterative development, and release early release often provide the designers and developers with more and better feedback from customers.\n\nI recently helped develop a custom software package, and I learned very quickly into the project that knowing upfront what the product needed to do was near impossible. Incrementally adding functions as they we discovered they were needed turned out to be fairly quick and easy, since we kept the architecture simple adding only what we knew was necessary, and removing what we found to not work, or not be necessary.\n\nNot only are these approaches better for the end result, but they are certainly more motivating for the developers themselves. At each stage of the process there is a prototype that compiles and runs, whether or not all the functionality is there. This helps avoid propagating early mistakes. Also, they can focus on one aspect of the product at a time, and receive verification from testing, and validation from the customer. In my limited experience the program ends up more efficient and maintainable in this process.\n\nIn the now dead waterfall approach to programming, where specifications are known upfront and the entire development is done together, and then all testing is done at the end, growing software one piece at a time deals with the fundamental issue that usually specs won't be correct or complete at the beginning. The waterfall model also leaves testing for the end, so the code where bugs are found have long since left the developers memory. Finding bugs, usually the hardest part, is greatly simplified when only one module was added since the last successful prototype.\n\nThough strictly speaking programs are deterministic and lifeless, I often see a personality (inadvertently instilled by the programmers) in software. When software is grown piece by piece rather than built from bottom to top, the software behaves better.","source":"_posts/growing-software.md","raw":"title: Growing Software\nid: 24\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-04-11 14:54:37\ntags:\n---\n\nAgile methods have proven time and again to produce better software quicker. Extreme programming, iterative development, and release early release often provide the designers and developers with more and better feedback from customers.\n\nI recently helped develop a custom software package, and I learned very quickly into the project that knowing upfront what the product needed to do was near impossible. Incrementally adding functions as they we discovered they were needed turned out to be fairly quick and easy, since we kept the architecture simple adding only what we knew was necessary, and removing what we found to not work, or not be necessary.\n\nNot only are these approaches better for the end result, but they are certainly more motivating for the developers themselves. At each stage of the process there is a prototype that compiles and runs, whether or not all the functionality is there. This helps avoid propagating early mistakes. Also, they can focus on one aspect of the product at a time, and receive verification from testing, and validation from the customer. In my limited experience the program ends up more efficient and maintainable in this process.\n\nIn the now dead waterfall approach to programming, where specifications are known upfront and the entire development is done together, and then all testing is done at the end, growing software one piece at a time deals with the fundamental issue that usually specs won't be correct or complete at the beginning. The waterfall model also leaves testing for the end, so the code where bugs are found have long since left the developers memory. Finding bugs, usually the hardest part, is greatly simplified when only one module was added since the last successful prototype.\n\nThough strictly speaking programs are deterministic and lifeless, I often see a personality (inadvertently instilled by the programmers) in software. When software is grown piece by piece rather than built from bottom to top, the software behaves better.","slug":"growing-software","published":1,"updated":"2018-05-08T17:28:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5r000zv1pp2fceateh","content":"<p>Agile methods have proven time and again to produce better software quicker. Extreme programming, iterative development, and release early release often provide the designers and developers with more and better feedback from customers.</p>\n<p>I recently helped develop a custom software package, and I learned very quickly into the project that knowing upfront what the product needed to do was near impossible. Incrementally adding functions as they we discovered they were needed turned out to be fairly quick and easy, since we kept the architecture simple adding only what we knew was necessary, and removing what we found to not work, or not be necessary.</p>\n<p>Not only are these approaches better for the end result, but they are certainly more motivating for the developers themselves. At each stage of the process there is a prototype that compiles and runs, whether or not all the functionality is there. This helps avoid propagating early mistakes. Also, they can focus on one aspect of the product at a time, and receive verification from testing, and validation from the customer. In my limited experience the program ends up more efficient and maintainable in this process.</p>\n<p>In the now dead waterfall approach to programming, where specifications are known upfront and the entire development is done together, and then all testing is done at the end, growing software one piece at a time deals with the fundamental issue that usually specs won’t be correct or complete at the beginning. The waterfall model also leaves testing for the end, so the code where bugs are found have long since left the developers memory. Finding bugs, usually the hardest part, is greatly simplified when only one module was added since the last successful prototype.</p>\n<p>Though strictly speaking programs are deterministic and lifeless, I often see a personality (inadvertently instilled by the programmers) in software. When software is grown piece by piece rather than built from bottom to top, the software behaves better.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Agile methods have proven time and again to produce better software quicker. Extreme programming, iterative development, and release early release often provide the designers and developers with more and better feedback from customers.</p>\n<p>I recently helped develop a custom software package, and I learned very quickly into the project that knowing upfront what the product needed to do was near impossible. Incrementally adding functions as they we discovered they were needed turned out to be fairly quick and easy, since we kept the architecture simple adding only what we knew was necessary, and removing what we found to not work, or not be necessary.</p>\n<p>Not only are these approaches better for the end result, but they are certainly more motivating for the developers themselves. At each stage of the process there is a prototype that compiles and runs, whether or not all the functionality is there. This helps avoid propagating early mistakes. Also, they can focus on one aspect of the product at a time, and receive verification from testing, and validation from the customer. In my limited experience the program ends up more efficient and maintainable in this process.</p>\n<p>In the now dead waterfall approach to programming, where specifications are known upfront and the entire development is done together, and then all testing is done at the end, growing software one piece at a time deals with the fundamental issue that usually specs won’t be correct or complete at the beginning. The waterfall model also leaves testing for the end, so the code where bugs are found have long since left the developers memory. Finding bugs, usually the hardest part, is greatly simplified when only one module was added since the last successful prototype.</p>\n<p>Though strictly speaking programs are deterministic and lifeless, I often see a personality (inadvertently instilled by the programmers) in software. When software is grown piece by piece rather than built from bottom to top, the software behaves better.</p>\n"},{"title":"So It Begins","id":"4","date":"2008-01-11T09:04:26.000Z","_content":"\nNow I've gone and made a blog for myself.  I suppose I should start by introducing myself.\n\nMy name is Andrew VanWagoner, and I am originally from Taylorsville, UT.  I am married to the most beautiful woman in the world, Julie Ann VanWagoner (formerly Crooks).  We have one daughter, Abigail Ruth, who will be two months old on Monday.  We live in Provo Utah where I am studying Computer Science at BYU.\n\nI am afraid my pen name the TaleCrafter is somewhat misleading, because I make my living as a Web Programmer.  In 2000, a friend and I thought up a fantasy world we called Tsera, and I began writing a book about it.  It's funny how much I wrote and then threw away.  In 2006 I had recently returned from Brazil and I decided to get going on that books again.  After reading the 200+ pages I had written prior, I was completely dissatisfied and started over.  Due to getting married, having kids, and trying to get an education, I now have a whole 10 pages worth in my book, <u>The Brothers of Linester</u>.\n\nWell, that seems to  state my life in a nutshell.  Life is good.","source":"_posts/hello-world.md","raw":"title: So It Begins\ntags:\n  - Andrew\n  - Brothers of Linester\n  - Julie\n  - Taylorsville\n  - VanWagoner\nid: 4\ncategories:\n  - General\ndate: 2008-01-11 02:04:26\n---\n\nNow I've gone and made a blog for myself.  I suppose I should start by introducing myself.\n\nMy name is Andrew VanWagoner, and I am originally from Taylorsville, UT.  I am married to the most beautiful woman in the world, Julie Ann VanWagoner (formerly Crooks).  We have one daughter, Abigail Ruth, who will be two months old on Monday.  We live in Provo Utah where I am studying Computer Science at BYU.\n\nI am afraid my pen name the TaleCrafter is somewhat misleading, because I make my living as a Web Programmer.  In 2000, a friend and I thought up a fantasy world we called Tsera, and I began writing a book about it.  It's funny how much I wrote and then threw away.  In 2006 I had recently returned from Brazil and I decided to get going on that books again.  After reading the 200+ pages I had written prior, I was completely dissatisfied and started over.  Due to getting married, having kids, and trying to get an education, I now have a whole 10 pages worth in my book, <u>The Brothers of Linester</u>.\n\nWell, that seems to  state my life in a nutshell.  Life is good.","slug":"hello-world","published":1,"updated":"2018-05-08T17:28:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5s0011v1ppvwkl1k0u","content":"<p>Now I’ve gone and made a blog for myself.  I suppose I should start by introducing myself.</p>\n<p>My name is Andrew VanWagoner, and I am originally from Taylorsville, UT.  I am married to the most beautiful woman in the world, Julie Ann VanWagoner (formerly Crooks).  We have one daughter, Abigail Ruth, who will be two months old on Monday.  We live in Provo Utah where I am studying Computer Science at BYU.</p>\n<p>I am afraid my pen name the TaleCrafter is somewhat misleading, because I make my living as a Web Programmer.  In 2000, a friend and I thought up a fantasy world we called Tsera, and I began writing a book about it.  It’s funny how much I wrote and then threw away.  In 2006 I had recently returned from Brazil and I decided to get going on that books again.  After reading the 200+ pages I had written prior, I was completely dissatisfied and started over.  Due to getting married, having kids, and trying to get an education, I now have a whole 10 pages worth in my book, <u>The Brothers of Linester</u>.</p>\n<p>Well, that seems to  state my life in a nutshell.  Life is good.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Now I’ve gone and made a blog for myself.  I suppose I should start by introducing myself.</p>\n<p>My name is Andrew VanWagoner, and I am originally from Taylorsville, UT.  I am married to the most beautiful woman in the world, Julie Ann VanWagoner (formerly Crooks).  We have one daughter, Abigail Ruth, who will be two months old on Monday.  We live in Provo Utah where I am studying Computer Science at BYU.</p>\n<p>I am afraid my pen name the TaleCrafter is somewhat misleading, because I make my living as a Web Programmer.  In 2000, a friend and I thought up a fantasy world we called Tsera, and I began writing a book about it.  It’s funny how much I wrote and then threw away.  In 2006 I had recently returned from Brazil and I decided to get going on that books again.  After reading the 200+ pages I had written prior, I was completely dissatisfied and started over.  Due to getting married, having kids, and trying to get an education, I now have a whole 10 pages worth in my book, <u>The Brothers of Linester</u>.</p>\n<p>Well, that seems to  state my life in a nutshell.  Life is good.</p>\n"},{"title":"Internet Safety Podcast and Wiki","id":"20","date":"2008-03-28T21:58:36.000Z","_content":"\nA few months ago, my wife and I began listening to the [Internet Safety Podcast](http://internetsafetypodcast.com/ \"Internet Safety Podcast\") put on by Charles Knutson and Joe Brockbank. What we found were simple ideas to protect our family from the trash on the Internet, without throwing the baby out with the bath water. I recommend to any parents out there to listen to podcast. It's interesting and fun, but still educates on how we can keep up with our tech-savvy kids.\n\nAlso on their web site is the [Internet Safety Wiki](http://wiki.internetsafetypodcast.com/ \"Internet Safety Wiki\"). This is a fledgling site dedicated to same principles as the Internet Safety Podcast. What they need, though, are more contributers. To the tech-savvy out there, this is a chance to make a positive difference helping parents learn about the technologies of today. Contribute your knowledge and skills to the Internet Safety Wiki.","source":"_posts/internet-safety-podcast-and-wiki.md","raw":"title: Internet Safety Podcast and Wiki\ntags:\n  - family\n  - internet\n  - Internet Safety Podcast\n  - Internet Safety Wiki\n  - parenting\n  - podcast\n  - safety\n  - wiki\nid: 20\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-03-28 15:58:36\n---\n\nA few months ago, my wife and I began listening to the [Internet Safety Podcast](http://internetsafetypodcast.com/ \"Internet Safety Podcast\") put on by Charles Knutson and Joe Brockbank. What we found were simple ideas to protect our family from the trash on the Internet, without throwing the baby out with the bath water. I recommend to any parents out there to listen to podcast. It's interesting and fun, but still educates on how we can keep up with our tech-savvy kids.\n\nAlso on their web site is the [Internet Safety Wiki](http://wiki.internetsafetypodcast.com/ \"Internet Safety Wiki\"). This is a fledgling site dedicated to same principles as the Internet Safety Podcast. What they need, though, are more contributers. To the tech-savvy out there, this is a chance to make a positive difference helping parents learn about the technologies of today. Contribute your knowledge and skills to the Internet Safety Wiki.","slug":"internet-safety-podcast-and-wiki","published":1,"updated":"2018-05-08T17:28:54.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5t0015v1ppjg2o457s","content":"<p>A few months ago, my wife and I began listening to the <a href=\"http://internetsafetypodcast.com/\" title=\"Internet Safety Podcast\" target=\"_blank\" rel=\"noopener\">Internet Safety Podcast</a> put on by Charles Knutson and Joe Brockbank. What we found were simple ideas to protect our family from the trash on the Internet, without throwing the baby out with the bath water. I recommend to any parents out there to listen to podcast. It’s interesting and fun, but still educates on how we can keep up with our tech-savvy kids.</p>\n<p>Also on their web site is the <a href=\"http://wiki.internetsafetypodcast.com/\" title=\"Internet Safety Wiki\" target=\"_blank\" rel=\"noopener\">Internet Safety Wiki</a>. This is a fledgling site dedicated to same principles as the Internet Safety Podcast. What they need, though, are more contributers. To the tech-savvy out there, this is a chance to make a positive difference helping parents learn about the technologies of today. Contribute your knowledge and skills to the Internet Safety Wiki.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>A few months ago, my wife and I began listening to the <a href=\"http://internetsafetypodcast.com/\" title=\"Internet Safety Podcast\" target=\"_blank\" rel=\"noopener\">Internet Safety Podcast</a> put on by Charles Knutson and Joe Brockbank. What we found were simple ideas to protect our family from the trash on the Internet, without throwing the baby out with the bath water. I recommend to any parents out there to listen to podcast. It’s interesting and fun, but still educates on how we can keep up with our tech-savvy kids.</p>\n<p>Also on their web site is the <a href=\"http://wiki.internetsafetypodcast.com/\" title=\"Internet Safety Wiki\" target=\"_blank\" rel=\"noopener\">Internet Safety Wiki</a>. This is a fledgling site dedicated to same principles as the Internet Safety Podcast. What they need, though, are more contributers. To the tech-savvy out there, this is a chance to make a positive difference helping parents learn about the technologies of today. Contribute your knowledge and skills to the Internet Safety Wiki.</p>\n"},{"title":"Greater than the sum of its components","id":"148","date":"2013-02-20T00:36:43.000Z","_content":"\nLately I've been working on a cool project written exclusively in JavaScript, with a [Node.js](http://nodejs.org/) & [MongoDB](http://www.mongodb.org/) back end, and a [CommonJS](http://thetalecrafter.github.com/modules/) [Backbone](http://backbonejs.org/) front end. What I have found most fun so far is the synergy I get between certain components.\n\n**Templates**\n\nFirst off, I admit I'm a reinvent-the-wheel kind of engineer. I readily find some minor fault in existing solutions and decide I have to write my own. [EJS](https://github.com/visionmedia/ejs) is really great, especially for someone coming from a PHP background, who doesn't think logic-less templates are better than sliced bread. However, I really needed templates that can run asynchronously, doing file or network io for includes and other such magic.\n\nSo, I made [Stencil](http://thetalecrafter.github.com/stencil/). I was able to make templates that compile without mucking up the line numbers, so debugging is very straight-forward. No exception rethrowing necessary. The very-important async use case was satisfied without making all templates forced to use the async pattern.\n\n```javascript\nsync_result = sync_tpl(data); // works if no async code in template\nasync_tpl(data, function(err, async_result) { }); // always works\n```\n\nWhere the whole becomes more than the sum of parts: A small snippet makes it so I can directly `require` my templates, and get back the function instead of the string:\n\n```javascript\nrequire.extensions['.html'] = function(module, filename) {\n\tvar fs = require('fs'), stencil = require('stencil-js'),\n\t\topts = { id:filename, src:fs.readFileSync(filename, 'utf8') };\n\tmodule._compile(\n\t\t'module.exports=' + stencil.compile(opts, true) + ';',\n\t\tfilename\n\t);\n};\n```\n\nNow the rest of my code that uses templates doesn't have to care that I use Stencil. You just `tpl = require('path/to/template.html')`. This is possible because Node.js has an extensible require, and Stencil allows you to compile to a JavaScript string instead of just to a function. If I were to go back and change the templating system to EJS, Jade, or Mustache, I would only need to update this one little snippet.\n\n**Client CommonJS**\n\nI liked Node.js's module system, and I didn't want to have to [replace it](http://requirejs.org/docs/node.html) or use a separate system on the front end. Don't get me started on mess of [UMD](https://github.com/umdjs/umd). So, I created my own [Modules library](http://thetalecrafter.github.com/modules/). You've [heard](http://thetalecrafter.com/2010/01/30/javascript-require-in-100-lines-of-code/ \"JavaScript require in 100 lines of code\") [about](http://thetalecrafter.com/2011/04/13/load-only-when-needed-or-preload-everything/ \"Load only when needed, or Preload everything?\") this [before](http://thetalecrafter.com/2011/09/22/commonjs-in-the-browser/ \"CommonJS in the Browser\").\n\nI got CommonJS modules to load (asynchronously) and run in the browser, so it was trivial to share code used on both ends. Again, line numbers weren't munged in the server-side translation, so debugging works just like you always expect it to.\n\nThe library runs as a middleware for [Express](http://expressjs.com/), enabling the reload functionality [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) lovers rave about, as well as standalone for concatenating and minifying bundles in the production build process. All with a client-side weight one-third that of [AlmondJS](https://github.com/jrburke/almond), although that or [RequireJS](http://requirejs.org/) would also work on the front-end, since Modules still uses AMD as its transport format.\n\nThe real magic though, is that the Modules library has an option for translating certain types of files, giving us the same `require` functionality for our templates that we had on the server, and because the translation happens server side (or at build time), the client code can keep a [Content Security Policy](http://www.html5rocks.com/en/tutorials/security/content-security-policy/) that disallows eval and unsafe inline code, as Stencil never has to be loaded in client code. (Lighter & more secure. Woohoo!)\n\n```javascript\napp.use(require('modules').middleware({\n\ttranslate:{\n\t\thtml:function tpl(name, file, src) {\n\t\t\tvar opts = { id:name, src:src };\n\t\t\treturn 'module.exports=' + stencil.compile(opts, true) + ';';\n\t\t}\n\t},\n\troot: './components/', // file root path\n\tpath: '/module/', // url root path\n\t// ... other options\n}));\n```\n\n**Backbone**\n\nOne magic thing that I got for free, is that Backbone and Underscore are already CommonJS compatible, so passing them through the same middleware just worked. [Async](https://github.com/caolan/async), and countless other Node.js modules also just work.\n\n**Adding it all together**\n\nWhile I chose to write my own templating and module components, many other libraries include the little hooks that make these synergies possible. Each component individually is really nothing spectacular, but when you put them all together you get a product that is cohesive from front to back, and really fun to work on.\n","source":"_posts/greater-than-the-sum-of-its-components.md","raw":"title: Greater than the sum of its components\ntags:\n  - AMD\n  - CommonJS\n  - JavaScript\n  - Node.js\n  - require\nid: 148\ncategories:\n  - JavaScript\ndate: 2013-02-19 17:36:43\n---\n\nLately I've been working on a cool project written exclusively in JavaScript, with a [Node.js](http://nodejs.org/) & [MongoDB](http://www.mongodb.org/) back end, and a [CommonJS](http://thetalecrafter.github.com/modules/) [Backbone](http://backbonejs.org/) front end. What I have found most fun so far is the synergy I get between certain components.\n\n**Templates**\n\nFirst off, I admit I'm a reinvent-the-wheel kind of engineer. I readily find some minor fault in existing solutions and decide I have to write my own. [EJS](https://github.com/visionmedia/ejs) is really great, especially for someone coming from a PHP background, who doesn't think logic-less templates are better than sliced bread. However, I really needed templates that can run asynchronously, doing file or network io for includes and other such magic.\n\nSo, I made [Stencil](http://thetalecrafter.github.com/stencil/). I was able to make templates that compile without mucking up the line numbers, so debugging is very straight-forward. No exception rethrowing necessary. The very-important async use case was satisfied without making all templates forced to use the async pattern.\n\n```javascript\nsync_result = sync_tpl(data); // works if no async code in template\nasync_tpl(data, function(err, async_result) { }); // always works\n```\n\nWhere the whole becomes more than the sum of parts: A small snippet makes it so I can directly `require` my templates, and get back the function instead of the string:\n\n```javascript\nrequire.extensions['.html'] = function(module, filename) {\n\tvar fs = require('fs'), stencil = require('stencil-js'),\n\t\topts = { id:filename, src:fs.readFileSync(filename, 'utf8') };\n\tmodule._compile(\n\t\t'module.exports=' + stencil.compile(opts, true) + ';',\n\t\tfilename\n\t);\n};\n```\n\nNow the rest of my code that uses templates doesn't have to care that I use Stencil. You just `tpl = require('path/to/template.html')`. This is possible because Node.js has an extensible require, and Stencil allows you to compile to a JavaScript string instead of just to a function. If I were to go back and change the templating system to EJS, Jade, or Mustache, I would only need to update this one little snippet.\n\n**Client CommonJS**\n\nI liked Node.js's module system, and I didn't want to have to [replace it](http://requirejs.org/docs/node.html) or use a separate system on the front end. Don't get me started on mess of [UMD](https://github.com/umdjs/umd). So, I created my own [Modules library](http://thetalecrafter.github.com/modules/). You've [heard](http://thetalecrafter.com/2010/01/30/javascript-require-in-100-lines-of-code/ \"JavaScript require in 100 lines of code\") [about](http://thetalecrafter.com/2011/04/13/load-only-when-needed-or-preload-everything/ \"Load only when needed, or Preload everything?\") this [before](http://thetalecrafter.com/2011/09/22/commonjs-in-the-browser/ \"CommonJS in the Browser\").\n\nI got CommonJS modules to load (asynchronously) and run in the browser, so it was trivial to share code used on both ends. Again, line numbers weren't munged in the server-side translation, so debugging works just like you always expect it to.\n\nThe library runs as a middleware for [Express](http://expressjs.com/), enabling the reload functionality [AMD](https://github.com/amdjs/amdjs-api/wiki/AMD) lovers rave about, as well as standalone for concatenating and minifying bundles in the production build process. All with a client-side weight one-third that of [AlmondJS](https://github.com/jrburke/almond), although that or [RequireJS](http://requirejs.org/) would also work on the front-end, since Modules still uses AMD as its transport format.\n\nThe real magic though, is that the Modules library has an option for translating certain types of files, giving us the same `require` functionality for our templates that we had on the server, and because the translation happens server side (or at build time), the client code can keep a [Content Security Policy](http://www.html5rocks.com/en/tutorials/security/content-security-policy/) that disallows eval and unsafe inline code, as Stencil never has to be loaded in client code. (Lighter & more secure. Woohoo!)\n\n```javascript\napp.use(require('modules').middleware({\n\ttranslate:{\n\t\thtml:function tpl(name, file, src) {\n\t\t\tvar opts = { id:name, src:src };\n\t\t\treturn 'module.exports=' + stencil.compile(opts, true) + ';';\n\t\t}\n\t},\n\troot: './components/', // file root path\n\tpath: '/module/', // url root path\n\t// ... other options\n}));\n```\n\n**Backbone**\n\nOne magic thing that I got for free, is that Backbone and Underscore are already CommonJS compatible, so passing them through the same middleware just worked. [Async](https://github.com/caolan/async), and countless other Node.js modules also just work.\n\n**Adding it all together**\n\nWhile I chose to write my own templating and module components, many other libraries include the little hooks that make these synergies possible. Each component individually is really nothing spectacular, but when you put them all together you get a product that is cohesive from front to back, and really fun to work on.\n","slug":"greater-than-the-sum-of-its-components","published":1,"updated":"2018-05-08T17:28:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5u0017v1ppjz0e52el","content":"<p>Lately I’ve been working on a cool project written exclusively in JavaScript, with a <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a> &amp; <a href=\"http://www.mongodb.org/\" target=\"_blank\" rel=\"noopener\">MongoDB</a> back end, and a <a href=\"http://thetalecrafter.github.com/modules/\" target=\"_blank\" rel=\"noopener\">CommonJS</a> <a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"noopener\">Backbone</a> front end. What I have found most fun so far is the synergy I get between certain components.</p>\n<p><strong>Templates</strong></p>\n<p>First off, I admit I’m a reinvent-the-wheel kind of engineer. I readily find some minor fault in existing solutions and decide I have to write my own. <a href=\"https://github.com/visionmedia/ejs\" target=\"_blank\" rel=\"noopener\">EJS</a> is really great, especially for someone coming from a PHP background, who doesn’t think logic-less templates are better than sliced bread. However, I really needed templates that can run asynchronously, doing file or network io for includes and other such magic.</p>\n<p>So, I made <a href=\"http://thetalecrafter.github.com/stencil/\" target=\"_blank\" rel=\"noopener\">Stencil</a>. I was able to make templates that compile without mucking up the line numbers, so debugging is very straight-forward. No exception rethrowing necessary. The very-important async use case was satisfied without making all templates forced to use the async pattern.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync_result = sync_tpl(data); <span class=\"comment\">// works if no async code in template</span></span><br><span class=\"line\">async_tpl(data, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, async_result</span>) </span>&#123; &#125;); <span class=\"comment\">// always works</span></span><br></pre></td></tr></table></figure>\n<p>Where the whole becomes more than the sum of parts: A small snippet makes it so I can directly <code>require</code> my templates, and get back the function instead of the string:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.extensions[<span class=\"string\">'.html'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, filename</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>), stencil = <span class=\"built_in\">require</span>(<span class=\"string\">'stencil-js'</span>),</span><br><span class=\"line\">\t\topts = &#123; <span class=\"attr\">id</span>:filename, <span class=\"attr\">src</span>:fs.readFileSync(filename, <span class=\"string\">'utf8'</span>) &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>._compile(</span><br><span class=\"line\">\t\t<span class=\"string\">'module.exports='</span> + stencil.compile(opts, <span class=\"literal\">true</span>) + <span class=\"string\">';'</span>,</span><br><span class=\"line\">\t\tfilename</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Now the rest of my code that uses templates doesn’t have to care that I use Stencil. You just <code>tpl = require(&#39;path/to/template.html&#39;)</code>. This is possible because Node.js has an extensible require, and Stencil allows you to compile to a JavaScript string instead of just to a function. If I were to go back and change the templating system to EJS, Jade, or Mustache, I would only need to update this one little snippet.</p>\n<p><strong>Client CommonJS</strong></p>\n<p>I liked Node.js’s module system, and I didn’t want to have to <a href=\"http://requirejs.org/docs/node.html\" target=\"_blank\" rel=\"noopener\">replace it</a> or use a separate system on the front end. Don’t get me started on mess of <a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"noopener\">UMD</a>. So, I created my own <a href=\"http://thetalecrafter.github.com/modules/\" target=\"_blank\" rel=\"noopener\">Modules library</a>. You’ve <a href=\"http://thetalecrafter.com/2010/01/30/javascript-require-in-100-lines-of-code/\" title=\"JavaScript require in 100 lines of code\" target=\"_blank\" rel=\"noopener\">heard</a> <a href=\"http://thetalecrafter.com/2011/04/13/load-only-when-needed-or-preload-everything/\" title=\"Load only when needed, or Preload everything?\" target=\"_blank\" rel=\"noopener\">about</a> this <a href=\"http://thetalecrafter.com/2011/09/22/commonjs-in-the-browser/\" title=\"CommonJS in the Browser\" target=\"_blank\" rel=\"noopener\">before</a>.</p>\n<p>I got CommonJS modules to load (asynchronously) and run in the browser, so it was trivial to share code used on both ends. Again, line numbers weren’t munged in the server-side translation, so debugging works just like you always expect it to.</p>\n<p>The library runs as a middleware for <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express</a>, enabling the reload functionality <a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">AMD</a> lovers rave about, as well as standalone for concatenating and minifying bundles in the production build process. All with a client-side weight one-third that of <a href=\"https://github.com/jrburke/almond\" target=\"_blank\" rel=\"noopener\">AlmondJS</a>, although that or <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">RequireJS</a> would also work on the front-end, since Modules still uses AMD as its transport format.</p>\n<p>The real magic though, is that the Modules library has an option for translating certain types of files, giving us the same <code>require</code> functionality for our templates that we had on the server, and because the translation happens server side (or at build time), the client code can keep a <a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\" target=\"_blank\" rel=\"noopener\">Content Security Policy</a> that disallows eval and unsafe inline code, as Stencil never has to be loaded in client code. (Lighter &amp; more secure. Woohoo!)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'modules'</span>).middleware(&#123;</span><br><span class=\"line\">\ttranslate:&#123;</span><br><span class=\"line\">\t\thtml:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tpl</span>(<span class=\"params\">name, file, src</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> opts = &#123; <span class=\"attr\">id</span>:name, <span class=\"attr\">src</span>:src &#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'module.exports='</span> + stencil.compile(opts, <span class=\"literal\">true</span>) + <span class=\"string\">';'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\troot: <span class=\"string\">'./components/'</span>, <span class=\"comment\">// file root path</span></span><br><span class=\"line\">\tpath: <span class=\"string\">'/module/'</span>, <span class=\"comment\">// url root path</span></span><br><span class=\"line\">\t<span class=\"comment\">// ... other options</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p><strong>Backbone</strong></p>\n<p>One magic thing that I got for free, is that Backbone and Underscore are already CommonJS compatible, so passing them through the same middleware just worked. <a href=\"https://github.com/caolan/async\" target=\"_blank\" rel=\"noopener\">Async</a>, and countless other Node.js modules also just work.</p>\n<p><strong>Adding it all together</strong></p>\n<p>While I chose to write my own templating and module components, many other libraries include the little hooks that make these synergies possible. Each component individually is really nothing spectacular, but when you put them all together you get a product that is cohesive from front to back, and really fun to work on.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Lately I’ve been working on a cool project written exclusively in JavaScript, with a <a href=\"http://nodejs.org/\" target=\"_blank\" rel=\"noopener\">Node.js</a> &amp; <a href=\"http://www.mongodb.org/\" target=\"_blank\" rel=\"noopener\">MongoDB</a> back end, and a <a href=\"http://thetalecrafter.github.com/modules/\" target=\"_blank\" rel=\"noopener\">CommonJS</a> <a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"noopener\">Backbone</a> front end. What I have found most fun so far is the synergy I get between certain components.</p>\n<p><strong>Templates</strong></p>\n<p>First off, I admit I’m a reinvent-the-wheel kind of engineer. I readily find some minor fault in existing solutions and decide I have to write my own. <a href=\"https://github.com/visionmedia/ejs\" target=\"_blank\" rel=\"noopener\">EJS</a> is really great, especially for someone coming from a PHP background, who doesn’t think logic-less templates are better than sliced bread. However, I really needed templates that can run asynchronously, doing file or network io for includes and other such magic.</p>\n<p>So, I made <a href=\"http://thetalecrafter.github.com/stencil/\" target=\"_blank\" rel=\"noopener\">Stencil</a>. I was able to make templates that compile without mucking up the line numbers, so debugging is very straight-forward. No exception rethrowing necessary. The very-important async use case was satisfied without making all templates forced to use the async pattern.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sync_result = sync_tpl(data); <span class=\"comment\">// works if no async code in template</span></span><br><span class=\"line\">async_tpl(data, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err, async_result</span>) </span>&#123; &#125;); <span class=\"comment\">// always works</span></span><br></pre></td></tr></table></figure>\n<p>Where the whole becomes more than the sum of parts: A small snippet makes it so I can directly <code>require</code> my templates, and get back the function instead of the string:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.extensions[<span class=\"string\">'.html'</span>] = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">module, filename</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>), stencil = <span class=\"built_in\">require</span>(<span class=\"string\">'stencil-js'</span>),</span><br><span class=\"line\">\t\topts = &#123; <span class=\"attr\">id</span>:filename, <span class=\"attr\">src</span>:fs.readFileSync(filename, <span class=\"string\">'utf8'</span>) &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">module</span>._compile(</span><br><span class=\"line\">\t\t<span class=\"string\">'module.exports='</span> + stencil.compile(opts, <span class=\"literal\">true</span>) + <span class=\"string\">';'</span>,</span><br><span class=\"line\">\t\tfilename</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>Now the rest of my code that uses templates doesn’t have to care that I use Stencil. You just <code>tpl = require(&#39;path/to/template.html&#39;)</code>. This is possible because Node.js has an extensible require, and Stencil allows you to compile to a JavaScript string instead of just to a function. If I were to go back and change the templating system to EJS, Jade, or Mustache, I would only need to update this one little snippet.</p>\n<p><strong>Client CommonJS</strong></p>\n<p>I liked Node.js’s module system, and I didn’t want to have to <a href=\"http://requirejs.org/docs/node.html\" target=\"_blank\" rel=\"noopener\">replace it</a> or use a separate system on the front end. Don’t get me started on mess of <a href=\"https://github.com/umdjs/umd\" target=\"_blank\" rel=\"noopener\">UMD</a>. So, I created my own <a href=\"http://thetalecrafter.github.com/modules/\" target=\"_blank\" rel=\"noopener\">Modules library</a>. You’ve <a href=\"http://thetalecrafter.com/2010/01/30/javascript-require-in-100-lines-of-code/\" title=\"JavaScript require in 100 lines of code\" target=\"_blank\" rel=\"noopener\">heard</a> <a href=\"http://thetalecrafter.com/2011/04/13/load-only-when-needed-or-preload-everything/\" title=\"Load only when needed, or Preload everything?\" target=\"_blank\" rel=\"noopener\">about</a> this <a href=\"http://thetalecrafter.com/2011/09/22/commonjs-in-the-browser/\" title=\"CommonJS in the Browser\" target=\"_blank\" rel=\"noopener\">before</a>.</p>\n<p>I got CommonJS modules to load (asynchronously) and run in the browser, so it was trivial to share code used on both ends. Again, line numbers weren’t munged in the server-side translation, so debugging works just like you always expect it to.</p>\n<p>The library runs as a middleware for <a href=\"http://expressjs.com/\" target=\"_blank\" rel=\"noopener\">Express</a>, enabling the reload functionality <a href=\"https://github.com/amdjs/amdjs-api/wiki/AMD\" target=\"_blank\" rel=\"noopener\">AMD</a> lovers rave about, as well as standalone for concatenating and minifying bundles in the production build process. All with a client-side weight one-third that of <a href=\"https://github.com/jrburke/almond\" target=\"_blank\" rel=\"noopener\">AlmondJS</a>, although that or <a href=\"http://requirejs.org/\" target=\"_blank\" rel=\"noopener\">RequireJS</a> would also work on the front-end, since Modules still uses AMD as its transport format.</p>\n<p>The real magic though, is that the Modules library has an option for translating certain types of files, giving us the same <code>require</code> functionality for our templates that we had on the server, and because the translation happens server side (or at build time), the client code can keep a <a href=\"http://www.html5rocks.com/en/tutorials/security/content-security-policy/\" target=\"_blank\" rel=\"noopener\">Content Security Policy</a> that disallows eval and unsafe inline code, as Stencil never has to be loaded in client code. (Lighter &amp; more secure. Woohoo!)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(<span class=\"built_in\">require</span>(<span class=\"string\">'modules'</span>).middleware(&#123;</span><br><span class=\"line\">\ttranslate:&#123;</span><br><span class=\"line\">\t\thtml:<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">tpl</span>(<span class=\"params\">name, file, src</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> opts = &#123; <span class=\"attr\">id</span>:name, <span class=\"attr\">src</span>:src &#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">'module.exports='</span> + stencil.compile(opts, <span class=\"literal\">true</span>) + <span class=\"string\">';'</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\troot: <span class=\"string\">'./components/'</span>, <span class=\"comment\">// file root path</span></span><br><span class=\"line\">\tpath: <span class=\"string\">'/module/'</span>, <span class=\"comment\">// url root path</span></span><br><span class=\"line\">\t<span class=\"comment\">// ... other options</span></span><br><span class=\"line\">&#125;));</span><br></pre></td></tr></table></figure>\n<p><strong>Backbone</strong></p>\n<p>One magic thing that I got for free, is that Backbone and Underscore are already CommonJS compatible, so passing them through the same middleware just worked. <a href=\"https://github.com/caolan/async\" target=\"_blank\" rel=\"noopener\">Async</a>, and countless other Node.js modules also just work.</p>\n<p><strong>Adding it all together</strong></p>\n<p>While I chose to write my own templating and module components, many other libraries include the little hooks that make these synergies possible. Each component individually is really nothing spectacular, but when you put them all together you get a product that is cohesive from front to back, and really fun to work on.</p>\n"},{"title":"It's a Small World - Part II","id":"18","date":"2008-03-20T16:00:37.000Z","_content":"\nOur world is ever changing. Decades ago, only countries needed to compete globally to ensure their economic health. Years ago, businesses acquired the need to globalize. Now, in our ever [shrinking world](http://thetalecrafter.wordpress.com/2008/01/16/its-a-small-world/ \"It\"), individuals are finding that they must compete with others worldwide to thrive.\n\nThomas Friedman, in his book [_The World is Flat_](http://www.amazon.com/World-Flat-3-0-History-Twenty-first/dp/0312425074/ \"Amazon.com\"), gives us some insight into how and why this globalization is happening. In short, the new Web platform, combined with ever decreasing cost to connect, gives individuals a new power to communicate globally. This translates into smarter clients, who know where to find the best deal, and smarter businesses, that can give more to their customers.\n\nFor a long time, I was under the impression that specialization was key. In order to get a letter in high school, or get a scholarship in college, you need to excel in one field. Friedman on the other hand suggests that a liberal arts education, where you are comfortable with a wide variety of skills, will be more valuable to companies. You will be better prepared to adapt to the constantly changing world, and when your job is outsourced, there will still be work you can do.\n\nSo, as the world moves from the vertical to horizontal, individuals must be prepared to move horizontally. If you are prepared, this small world will bring excitement rather than fear.","source":"_posts/its-a-small-world-part-ii.md","raw":"title: \"It's a Small World - Part II\"\ntags:\n  - education\n  - flat\n  - globalization\n  - internet\n  - preparation\n  - Small World\n  - The World is Flat\n  - Thomas Friedman\nid: 18\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-03-20 10:00:37\n---\n\nOur world is ever changing. Decades ago, only countries needed to compete globally to ensure their economic health. Years ago, businesses acquired the need to globalize. Now, in our ever [shrinking world](http://thetalecrafter.wordpress.com/2008/01/16/its-a-small-world/ \"It\"), individuals are finding that they must compete with others worldwide to thrive.\n\nThomas Friedman, in his book [_The World is Flat_](http://www.amazon.com/World-Flat-3-0-History-Twenty-first/dp/0312425074/ \"Amazon.com\"), gives us some insight into how and why this globalization is happening. In short, the new Web platform, combined with ever decreasing cost to connect, gives individuals a new power to communicate globally. This translates into smarter clients, who know where to find the best deal, and smarter businesses, that can give more to their customers.\n\nFor a long time, I was under the impression that specialization was key. In order to get a letter in high school, or get a scholarship in college, you need to excel in one field. Friedman on the other hand suggests that a liberal arts education, where you are comfortable with a wide variety of skills, will be more valuable to companies. You will be better prepared to adapt to the constantly changing world, and when your job is outsourced, there will still be work you can do.\n\nSo, as the world moves from the vertical to horizontal, individuals must be prepared to move horizontally. If you are prepared, this small world will bring excitement rather than fear.","slug":"its-a-small-world-part-ii","published":1,"updated":"2018-05-08T17:28:54.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5w001bv1pp5kddu8i9","content":"<p>Our world is ever changing. Decades ago, only countries needed to compete globally to ensure their economic health. Years ago, businesses acquired the need to globalize. Now, in our ever <a href=\"http://thetalecrafter.wordpress.com/2008/01/16/its-a-small-world/\" title=\"It\" target=\"_blank\" rel=\"noopener\">shrinking world</a>, individuals are finding that they must compete with others worldwide to thrive.</p>\n<p>Thomas Friedman, in his book <a href=\"http://www.amazon.com/World-Flat-3-0-History-Twenty-first/dp/0312425074/\" title=\"Amazon.com\" target=\"_blank\" rel=\"noopener\"><em>The World is Flat</em></a>, gives us some insight into how and why this globalization is happening. In short, the new Web platform, combined with ever decreasing cost to connect, gives individuals a new power to communicate globally. This translates into smarter clients, who know where to find the best deal, and smarter businesses, that can give more to their customers.</p>\n<p>For a long time, I was under the impression that specialization was key. In order to get a letter in high school, or get a scholarship in college, you need to excel in one field. Friedman on the other hand suggests that a liberal arts education, where you are comfortable with a wide variety of skills, will be more valuable to companies. You will be better prepared to adapt to the constantly changing world, and when your job is outsourced, there will still be work you can do.</p>\n<p>So, as the world moves from the vertical to horizontal, individuals must be prepared to move horizontally. If you are prepared, this small world will bring excitement rather than fear.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Our world is ever changing. Decades ago, only countries needed to compete globally to ensure their economic health. Years ago, businesses acquired the need to globalize. Now, in our ever <a href=\"http://thetalecrafter.wordpress.com/2008/01/16/its-a-small-world/\" title=\"It\" target=\"_blank\" rel=\"noopener\">shrinking world</a>, individuals are finding that they must compete with others worldwide to thrive.</p>\n<p>Thomas Friedman, in his book <a href=\"http://www.amazon.com/World-Flat-3-0-History-Twenty-first/dp/0312425074/\" title=\"Amazon.com\" target=\"_blank\" rel=\"noopener\"><em>The World is Flat</em></a>, gives us some insight into how and why this globalization is happening. In short, the new Web platform, combined with ever decreasing cost to connect, gives individuals a new power to communicate globally. This translates into smarter clients, who know where to find the best deal, and smarter businesses, that can give more to their customers.</p>\n<p>For a long time, I was under the impression that specialization was key. In order to get a letter in high school, or get a scholarship in college, you need to excel in one field. Friedman on the other hand suggests that a liberal arts education, where you are comfortable with a wide variety of skills, will be more valuable to companies. You will be better prepared to adapt to the constantly changing world, and when your job is outsourced, there will still be work you can do.</p>\n<p>So, as the world moves from the vertical to horizontal, individuals must be prepared to move horizontally. If you are prepared, this small world will bring excitement rather than fear.</p>\n"},{"title":"I thought I new you(JavaScript);","id":"73","date":"2011-04-04T22:08:01.000Z","_content":"\nThis is the first of hopefully many posts aiming to demystify javascript.\n\nThe first thing to get over is the name. [JavaScript is not Java](http://www.456bereastreet.com/archive/200909/java_is_not_javascript/). The name came from trying to ride on Java's hype. [JavaScript is to Java as Hamster is to Ham](http://adactio.com/journal/1595). Understand? Moving on...\n\nHopefully, most programmers now know that JavaScript is object-oriented. I'm afraid though that most believe object-oriented is synonymous with classical inheritance, which you will not find in JavaScript. JavaScript instead uses prototypal inheritance.\n\nClassical Inheritance in Java:\n\n```java\nclass Fruit {\n  private String name;\n  public Fruit(String n) { name = n; }\n  public toString() { return name; }\n}\n\nclass Banana extends Fruit {\n  public Banana() { super(\"banana\"); }\n}\n\n// (new Banana()) instanceof Banana and Fruit\n```\n\nWith classical inheritance, as in Java, you define classes. Classes are templates or blueprints for what an object of that type will be like. Objects, which are instances of a class, get all the methods and fields associated with the class and the classes it inherits.\n\nWhen you call a method, first the runtime looks in the class, then if it can't find the definition, it traverses up the class hierarchy until it finds the method definition.\n\nPrototypal Inheritance in JavaScript:\n\n```javascript\nfunction Fruit(name) { this.name = name; }\nFruit.prototype = { name:null, toString:function() { return this.name; } };\n\nfunction Banana() { Fruit.call(this, 'banana'); }\nBanana.prototype = new Fruit(null);\n\n// (new Banana()) instanceOf Banana and Fruit \n```\n\nAs you can see in JavaScript, with prototypal inheritance, there are no classes. The 'class' keyword is not used. Objects inherit from other objects. (The Banana prototype is an 'instance' of Fruit.) Constructors are just normal functions that you may call with the 'new' keyword.\n\nWhen you access any property, the runtime checks the object, then if it cannot find the property, it traverses up the prototype object hierarchy until it finds the property. If it doesn't find the property, it returns undefined.\n\nThe new keyword is a little deceptive, because it looks the same as Java. This is closer to what really happens:\n\n```javascript\n// var banana = new Banana(a, b);\nvar banana = {}; // new Object()\n// assume __proto__ is a hidden field, used internally for the prototype hierarchy\nbanana.__proto__ = Banana.prototype;\nvar temp = Banana.call(banana, a, b); // call the Banana function with 'this' set to the banana object\nbanana = (temp && typeof temp === 'object') ? temp : banana;\n\n// banana.name;\nvar temp = banana;\nwhile (!temp.hasOwnProperty('name') && temp.__proto__) { temp = temp.__proto__; }\nreturn temp.hasOwnProperty('name') ? temp.name : undefined;\n```\n\nPlease note that this code is an oversimplification, but hopefully helps you to understand what is happening behind the scenes. One of the interesting things you may have noticed from the above code is that when you call 'new Banana()', you might not get back what you expect. See one way you can implement the Factory pattern in JavaScript:\n\n```javascript\nfunction Fruit(name, color) {\n  if (typeof Fruit[name] === 'function')) return new Fruit[name]();\n  this.name = name;\n  this.color = color;\n  return this;\n}\nFruit.prototype = { name:null, color:null };\n\nFruit.Banana = function Banana() { return this; };\nFruit.Banana.prototype = new Fruit('Banana', 'yellow');\n\nFruit.Apple = function Apple() { return this; };\nFruit.Apple.prototype = new Fruit('Apple', 'red');\n\nvar banana = new Fruit('Banana'); // instanceOf Fruit and Banana\nvar apple = new Fruit('Apple'); // instanceOf Fruit and Apple\nvar kiwi = new Fruit('Kiwi'); // instanceOf Fruit\n```\n\nAs most of JavaScript's powerful dynamic features, it could easily be used for evil as well as for good.\n\n```javascript\nfunction Droid() { return new IPhone(); }\nvar phone = new Droid(); // this is not the droid you're looking for\n```\n\n[wtfjs.com](http://wtfjs.com/) is full of examples where JavaScript does weird things, but almost invariably because you tried to do something weird in the code. With a small amount of restraint on the developer's part, JavaScript can be powerful and need not be a mystery.\n","source":"_posts/i-thought-i-new-you-javascript.md","raw":"title: I thought I new you(JavaScript);\ntags:\n  - class\n  - inheritance\n  - JavaScript\n  - learn\n  - oop\n  - script\n  - understand\nid: 73\ncategories:\n  - JavaScript\ndate: 2011-04-04 16:08:01\n---\n\nThis is the first of hopefully many posts aiming to demystify javascript.\n\nThe first thing to get over is the name. [JavaScript is not Java](http://www.456bereastreet.com/archive/200909/java_is_not_javascript/). The name came from trying to ride on Java's hype. [JavaScript is to Java as Hamster is to Ham](http://adactio.com/journal/1595). Understand? Moving on...\n\nHopefully, most programmers now know that JavaScript is object-oriented. I'm afraid though that most believe object-oriented is synonymous with classical inheritance, which you will not find in JavaScript. JavaScript instead uses prototypal inheritance.\n\nClassical Inheritance in Java:\n\n```java\nclass Fruit {\n  private String name;\n  public Fruit(String n) { name = n; }\n  public toString() { return name; }\n}\n\nclass Banana extends Fruit {\n  public Banana() { super(\"banana\"); }\n}\n\n// (new Banana()) instanceof Banana and Fruit\n```\n\nWith classical inheritance, as in Java, you define classes. Classes are templates or blueprints for what an object of that type will be like. Objects, which are instances of a class, get all the methods and fields associated with the class and the classes it inherits.\n\nWhen you call a method, first the runtime looks in the class, then if it can't find the definition, it traverses up the class hierarchy until it finds the method definition.\n\nPrototypal Inheritance in JavaScript:\n\n```javascript\nfunction Fruit(name) { this.name = name; }\nFruit.prototype = { name:null, toString:function() { return this.name; } };\n\nfunction Banana() { Fruit.call(this, 'banana'); }\nBanana.prototype = new Fruit(null);\n\n// (new Banana()) instanceOf Banana and Fruit \n```\n\nAs you can see in JavaScript, with prototypal inheritance, there are no classes. The 'class' keyword is not used. Objects inherit from other objects. (The Banana prototype is an 'instance' of Fruit.) Constructors are just normal functions that you may call with the 'new' keyword.\n\nWhen you access any property, the runtime checks the object, then if it cannot find the property, it traverses up the prototype object hierarchy until it finds the property. If it doesn't find the property, it returns undefined.\n\nThe new keyword is a little deceptive, because it looks the same as Java. This is closer to what really happens:\n\n```javascript\n// var banana = new Banana(a, b);\nvar banana = {}; // new Object()\n// assume __proto__ is a hidden field, used internally for the prototype hierarchy\nbanana.__proto__ = Banana.prototype;\nvar temp = Banana.call(banana, a, b); // call the Banana function with 'this' set to the banana object\nbanana = (temp && typeof temp === 'object') ? temp : banana;\n\n// banana.name;\nvar temp = banana;\nwhile (!temp.hasOwnProperty('name') && temp.__proto__) { temp = temp.__proto__; }\nreturn temp.hasOwnProperty('name') ? temp.name : undefined;\n```\n\nPlease note that this code is an oversimplification, but hopefully helps you to understand what is happening behind the scenes. One of the interesting things you may have noticed from the above code is that when you call 'new Banana()', you might not get back what you expect. See one way you can implement the Factory pattern in JavaScript:\n\n```javascript\nfunction Fruit(name, color) {\n  if (typeof Fruit[name] === 'function')) return new Fruit[name]();\n  this.name = name;\n  this.color = color;\n  return this;\n}\nFruit.prototype = { name:null, color:null };\n\nFruit.Banana = function Banana() { return this; };\nFruit.Banana.prototype = new Fruit('Banana', 'yellow');\n\nFruit.Apple = function Apple() { return this; };\nFruit.Apple.prototype = new Fruit('Apple', 'red');\n\nvar banana = new Fruit('Banana'); // instanceOf Fruit and Banana\nvar apple = new Fruit('Apple'); // instanceOf Fruit and Apple\nvar kiwi = new Fruit('Kiwi'); // instanceOf Fruit\n```\n\nAs most of JavaScript's powerful dynamic features, it could easily be used for evil as well as for good.\n\n```javascript\nfunction Droid() { return new IPhone(); }\nvar phone = new Droid(); // this is not the droid you're looking for\n```\n\n[wtfjs.com](http://wtfjs.com/) is full of examples where JavaScript does weird things, but almost invariably because you tried to do something weird in the code. With a small amount of restraint on the developer's part, JavaScript can be powerful and need not be a mystery.\n","slug":"i-thought-i-new-you-javascript","published":1,"updated":"2018-05-08T17:28:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5x001ev1ppp5j27tta","content":"<p>This is the first of hopefully many posts aiming to demystify javascript.</p>\n<p>The first thing to get over is the name. <a href=\"http://www.456bereastreet.com/archive/200909/java_is_not_javascript/\" target=\"_blank\" rel=\"noopener\">JavaScript is not Java</a>. The name came from trying to ride on Java’s hype. <a href=\"http://adactio.com/journal/1595\" target=\"_blank\" rel=\"noopener\">JavaScript is to Java as Hamster is to Ham</a>. Understand? Moving on…</p>\n<p>Hopefully, most programmers now know that JavaScript is object-oriented. I’m afraid though that most believe object-oriented is synonymous with classical inheritance, which you will not find in JavaScript. JavaScript instead uses prototypal inheritance.</p>\n<p>Classical Inheritance in Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Fruit</span><span class=\"params\">(String n)</span> </span>&#123; name = n; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Banana</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">super</span>(<span class=\"string\">\"banana\"</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (new Banana()) instanceof Banana and Fruit</span></span><br></pre></td></tr></table></figure>\n<p>With classical inheritance, as in Java, you define classes. Classes are templates or blueprints for what an object of that type will be like. Objects, which are instances of a class, get all the methods and fields associated with the class and the classes it inherits.</p>\n<p>When you call a method, first the runtime looks in the class, then if it can’t find the definition, it traverses up the class hierarchy until it finds the method definition.</p>\n<p>Prototypal Inheritance in JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fruit</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"keyword\">this</span>.name = name; &#125;</span><br><span class=\"line\">Fruit.prototype = &#123; <span class=\"attr\">name</span>:<span class=\"literal\">null</span>, <span class=\"attr\">toString</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Banana</span>(<span class=\"params\"></span>) </span>&#123; Fruit.call(<span class=\"keyword\">this</span>, <span class=\"string\">'banana'</span>); &#125;</span><br><span class=\"line\">Banana.prototype = <span class=\"keyword\">new</span> Fruit(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (new Banana()) instanceOf Banana and Fruit</span></span><br></pre></td></tr></table></figure>\n<p>As you can see in JavaScript, with prototypal inheritance, there are no classes. The ‘class’ keyword is not used. Objects inherit from other objects. (The Banana prototype is an ‘instance’ of Fruit.) Constructors are just normal functions that you may call with the ‘new’ keyword.</p>\n<p>When you access any property, the runtime checks the object, then if it cannot find the property, it traverses up the prototype object hierarchy until it finds the property. If it doesn’t find the property, it returns undefined.</p>\n<p>The new keyword is a little deceptive, because it looks the same as Java. This is closer to what really happens:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var banana = new Banana(a, b);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> banana = &#123;&#125;; <span class=\"comment\">// new Object()</span></span><br><span class=\"line\"><span class=\"comment\">// assume __proto__ is a hidden field, used internally for the prototype hierarchy</span></span><br><span class=\"line\">banana.__proto__ = Banana.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = Banana.call(banana, a, b); <span class=\"comment\">// call the Banana function with 'this' set to the banana object</span></span><br><span class=\"line\">banana = (temp &amp;&amp; <span class=\"keyword\">typeof</span> temp === <span class=\"string\">'object'</span>) ? temp : banana;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// banana.name;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = banana;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!temp.hasOwnProperty(<span class=\"string\">'name'</span>) &amp;&amp; temp.__proto__) &#123; temp = temp.__proto__; &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> temp.hasOwnProperty(<span class=\"string\">'name'</span>) ? temp.name : <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n<p>Please note that this code is an oversimplification, but hopefully helps you to understand what is happening behind the scenes. One of the interesting things you may have noticed from the above code is that when you call ‘new Banana()’, you might not get back what you expect. See one way you can implement the Factory pattern in JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fruit</span>(<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> Fruit[name] === <span class=\"string\">'function'</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fruit[name]();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Fruit.prototype = &#123; <span class=\"attr\">name</span>:<span class=\"literal\">null</span>, <span class=\"attr\">color</span>:<span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Fruit.Banana = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Banana</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;;</span><br><span class=\"line\">Fruit.Banana.prototype = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Banana'</span>, <span class=\"string\">'yellow'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Fruit.Apple = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Apple</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;;</span><br><span class=\"line\">Fruit.Apple.prototype = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Apple'</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> banana = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Banana'</span>); <span class=\"comment\">// instanceOf Fruit and Banana</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Apple'</span>); <span class=\"comment\">// instanceOf Fruit and Apple</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> kiwi = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Kiwi'</span>); <span class=\"comment\">// instanceOf Fruit</span></span><br></pre></td></tr></table></figure>\n<p>As most of JavaScript’s powerful dynamic features, it could easily be used for evil as well as for good.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Droid</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IPhone(); &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> phone = <span class=\"keyword\">new</span> Droid(); <span class=\"comment\">// this is not the droid you're looking for</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://wtfjs.com/\" target=\"_blank\" rel=\"noopener\">wtfjs.com</a> is full of examples where JavaScript does weird things, but almost invariably because you tried to do something weird in the code. With a small amount of restraint on the developer’s part, JavaScript can be powerful and need not be a mystery.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>This is the first of hopefully many posts aiming to demystify javascript.</p>\n<p>The first thing to get over is the name. <a href=\"http://www.456bereastreet.com/archive/200909/java_is_not_javascript/\" target=\"_blank\" rel=\"noopener\">JavaScript is not Java</a>. The name came from trying to ride on Java’s hype. <a href=\"http://adactio.com/journal/1595\" target=\"_blank\" rel=\"noopener\">JavaScript is to Java as Hamster is to Ham</a>. Understand? Moving on…</p>\n<p>Hopefully, most programmers now know that JavaScript is object-oriented. I’m afraid though that most believe object-oriented is synonymous with classical inheritance, which you will not find in JavaScript. JavaScript instead uses prototypal inheritance.</p>\n<p>Classical Inheritance in Java:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Fruit</span><span class=\"params\">(String n)</span> </span>&#123; name = n; &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">toString</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">return</span> name; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Banana</span> <span class=\"keyword\">extends</span> <span class=\"title\">Fruit</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Banana</span><span class=\"params\">()</span> </span>&#123; <span class=\"keyword\">super</span>(<span class=\"string\">\"banana\"</span>); &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (new Banana()) instanceof Banana and Fruit</span></span><br></pre></td></tr></table></figure>\n<p>With classical inheritance, as in Java, you define classes. Classes are templates or blueprints for what an object of that type will be like. Objects, which are instances of a class, get all the methods and fields associated with the class and the classes it inherits.</p>\n<p>When you call a method, first the runtime looks in the class, then if it can’t find the definition, it traverses up the class hierarchy until it finds the method definition.</p>\n<p>Prototypal Inheritance in JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fruit</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"keyword\">this</span>.name = name; &#125;</span><br><span class=\"line\">Fruit.prototype = &#123; <span class=\"attr\">name</span>:<span class=\"literal\">null</span>, <span class=\"attr\">toString</span>:<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name; &#125; &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Banana</span>(<span class=\"params\"></span>) </span>&#123; Fruit.call(<span class=\"keyword\">this</span>, <span class=\"string\">'banana'</span>); &#125;</span><br><span class=\"line\">Banana.prototype = <span class=\"keyword\">new</span> Fruit(<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// (new Banana()) instanceOf Banana and Fruit</span></span><br></pre></td></tr></table></figure>\n<p>As you can see in JavaScript, with prototypal inheritance, there are no classes. The ‘class’ keyword is not used. Objects inherit from other objects. (The Banana prototype is an ‘instance’ of Fruit.) Constructors are just normal functions that you may call with the ‘new’ keyword.</p>\n<p>When you access any property, the runtime checks the object, then if it cannot find the property, it traverses up the prototype object hierarchy until it finds the property. If it doesn’t find the property, it returns undefined.</p>\n<p>The new keyword is a little deceptive, because it looks the same as Java. This is closer to what really happens:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var banana = new Banana(a, b);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> banana = &#123;&#125;; <span class=\"comment\">// new Object()</span></span><br><span class=\"line\"><span class=\"comment\">// assume __proto__ is a hidden field, used internally for the prototype hierarchy</span></span><br><span class=\"line\">banana.__proto__ = Banana.prototype;</span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = Banana.call(banana, a, b); <span class=\"comment\">// call the Banana function with 'this' set to the banana object</span></span><br><span class=\"line\">banana = (temp &amp;&amp; <span class=\"keyword\">typeof</span> temp === <span class=\"string\">'object'</span>) ? temp : banana;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// banana.name;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> temp = banana;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (!temp.hasOwnProperty(<span class=\"string\">'name'</span>) &amp;&amp; temp.__proto__) &#123; temp = temp.__proto__; &#125;</span><br><span class=\"line\"><span class=\"keyword\">return</span> temp.hasOwnProperty(<span class=\"string\">'name'</span>) ? temp.name : <span class=\"literal\">undefined</span>;</span><br></pre></td></tr></table></figure>\n<p>Please note that this code is an oversimplification, but hopefully helps you to understand what is happening behind the scenes. One of the interesting things you may have noticed from the above code is that when you call ‘new Banana()’, you might not get back what you expect. See one way you can implement the Factory pattern in JavaScript:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Fruit</span>(<span class=\"params\">name, color</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> Fruit[name] === <span class=\"string\">'function'</span>)) <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Fruit[name]();</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color = color;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Fruit.prototype = &#123; <span class=\"attr\">name</span>:<span class=\"literal\">null</span>, <span class=\"attr\">color</span>:<span class=\"literal\">null</span> &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Fruit.Banana = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Banana</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;;</span><br><span class=\"line\">Fruit.Banana.prototype = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Banana'</span>, <span class=\"string\">'yellow'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Fruit.Apple = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Apple</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>; &#125;;</span><br><span class=\"line\">Fruit.Apple.prototype = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Apple'</span>, <span class=\"string\">'red'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> banana = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Banana'</span>); <span class=\"comment\">// instanceOf Fruit and Banana</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> apple = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Apple'</span>); <span class=\"comment\">// instanceOf Fruit and Apple</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> kiwi = <span class=\"keyword\">new</span> Fruit(<span class=\"string\">'Kiwi'</span>); <span class=\"comment\">// instanceOf Fruit</span></span><br></pre></td></tr></table></figure>\n<p>As most of JavaScript’s powerful dynamic features, it could easily be used for evil as well as for good.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Droid</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> IPhone(); &#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> phone = <span class=\"keyword\">new</span> Droid(); <span class=\"comment\">// this is not the droid you're looking for</span></span><br></pre></td></tr></table></figure>\n<p><a href=\"http://wtfjs.com/\" target=\"_blank\" rel=\"noopener\">wtfjs.com</a> is full of examples where JavaScript does weird things, but almost invariably because you tried to do something weird in the code. With a small amount of restraint on the developer’s part, JavaScript can be powerful and need not be a mystery.</p>\n"},{"title":"It's a Small World","id":"6","date":"2008-01-17T05:06:39.000Z","_content":"\n\"It's a small world after all.\" The Sherman Brothers presented that novel idea at the 1964 World's Fair. That was before Google. Now the world is at the average Joe's fingertips. Yesterday's obstacles of distance, language, and culture are dissolving as millions connect instantly on the Internet. But there is a catch. Internet communication has become so easy, that though Joe chats with dozens online, he has never had more than five word conversations with his roommate. Even if he has, he can't remember the guy's name.","source":"_posts/its-a-small-world.md","raw":"title: \"It's a Small World\"\ntags:\n  - average Joe\n  - communication\n  - Google\n  - internet\n  - Small World\nid: 6\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-01-16 22:06:39\n---\n\n\"It's a small world after all.\" The Sherman Brothers presented that novel idea at the 1964 World's Fair. That was before Google. Now the world is at the average Joe's fingertips. Yesterday's obstacles of distance, language, and culture are dissolving as millions connect instantly on the Internet. But there is a catch. Internet communication has become so easy, that though Joe chats with dozens online, he has never had more than five word conversations with his roommate. Even if he has, he can't remember the guy's name.","slug":"its-a-small-world","published":1,"updated":"2018-05-08T17:28:54.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5y001iv1ppsi2w0bxn","content":"<p>“It’s a small world after all.” The Sherman Brothers presented that novel idea at the 1964 World’s Fair. That was before Google. Now the world is at the average Joe’s fingertips. Yesterday’s obstacles of distance, language, and culture are dissolving as millions connect instantly on the Internet. But there is a catch. Internet communication has become so easy, that though Joe chats with dozens online, he has never had more than five word conversations with his roommate. Even if he has, he can’t remember the guy’s name.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>“It’s a small world after all.” The Sherman Brothers presented that novel idea at the 1964 World’s Fair. That was before Google. Now the world is at the average Joe’s fingertips. Yesterday’s obstacles of distance, language, and culture are dissolving as millions connect instantly on the Internet. But there is a catch. Internet communication has become so easy, that though Joe chats with dozens online, he has never had more than five word conversations with his roommate. Even if he has, he can’t remember the guy’s name.</p>\n"},{"title":"JavaScript Require Update","id":"62","date":"2010-08-21T18:47:42.000Z","_content":"\nI've updated the code I use to require scripts and styles on my web pages.\n\nCheck it out, or fork it at github: [http://github.com/thetalecrafter/require](http://github.com/thetalecrafter/require)\n\nUsage:\n\nmain file:\n\n```javascript\n\trequire.setObjUrl('jQuery', function(name) {\n\t\treturn name === 'jQuery' ? 'http://code.jquery.com/jquery-1.5.2.min.js' :\n\t\t\t'http://cdn-' + (name.length % 4) + '.example/plugins/' + name + '.js'; });\n\trequire('jQuery.myplugin', function(myplugin) { /* both have loaded when this executes */ });\n```\n\nplugin file:\n\n```javascript\n\trequire('jQuery', function(jQuery) {\n\t\tjQuery.myplugin = ...\n\t});\n```\n\nrequire css: Any requirement matching `/\\.css$/i` will be treated as a css requirement.\n\n```javascript\n\trequire('myplugin.css', function() { /* You can count on styles being available here */ });\n```\n\nrequire image: Any requirement matching /\\.(?:gif|jpe?g|png)$/i will be treated as an image requirement.\n\n```javascript\n\trequire('myplugin_bg.png', function() { /* You can count on the image being available here */ });\n```\n","source":"_posts/javascript-require-update.md","raw":"title: JavaScript Require Update\ntags:\n  - ajax\n  - include\n  - JavaScript\n  - require\n  - script\nid: 62\ncategories:\n  - JavaScript\ndate: 2010-08-21 12:47:42\n---\n\nI've updated the code I use to require scripts and styles on my web pages.\n\nCheck it out, or fork it at github: [http://github.com/thetalecrafter/require](http://github.com/thetalecrafter/require)\n\nUsage:\n\nmain file:\n\n```javascript\n\trequire.setObjUrl('jQuery', function(name) {\n\t\treturn name === 'jQuery' ? 'http://code.jquery.com/jquery-1.5.2.min.js' :\n\t\t\t'http://cdn-' + (name.length % 4) + '.example/plugins/' + name + '.js'; });\n\trequire('jQuery.myplugin', function(myplugin) { /* both have loaded when this executes */ });\n```\n\nplugin file:\n\n```javascript\n\trequire('jQuery', function(jQuery) {\n\t\tjQuery.myplugin = ...\n\t});\n```\n\nrequire css: Any requirement matching `/\\.css$/i` will be treated as a css requirement.\n\n```javascript\n\trequire('myplugin.css', function() { /* You can count on styles being available here */ });\n```\n\nrequire image: Any requirement matching /\\.(?:gif|jpe?g|png)$/i will be treated as an image requirement.\n\n```javascript\n\trequire('myplugin_bg.png', function() { /* You can count on the image being available here */ });\n```\n","slug":"javascript-require-update","published":1,"updated":"2018-05-08T17:28:54.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei5z001lv1pp1uxsiueu","content":"<p>I’ve updated the code I use to require scripts and styles on my web pages.</p>\n<p>Check it out, or fork it at github: <a href=\"http://github.com/thetalecrafter/require\" target=\"_blank\" rel=\"noopener\">http://github.com/thetalecrafter/require</a></p>\n<p>Usage:</p>\n<p>main file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.setObjUrl(<span class=\"string\">'jQuery'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> name === <span class=\"string\">'jQuery'</span> ? <span class=\"string\">'http://code.jquery.com/jquery-1.5.2.min.js'</span> :</span><br><span class=\"line\">\t\t<span class=\"string\">'http://cdn-'</span> + (name.length % <span class=\"number\">4</span>) + <span class=\"string\">'.example/plugins/'</span> + name + <span class=\"string\">'.js'</span>; &#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'jQuery.myplugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myplugin</span>) </span>&#123; <span class=\"comment\">/* both have loaded when this executes */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>plugin file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'jQuery'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jQuery</span>) </span>&#123;</span><br><span class=\"line\">\tjQuery.myplugin = ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>require css: Any requirement matching <code>/\\.css$/i</code> will be treated as a css requirement.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'myplugin.css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* You can count on styles being available here */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>require image: Any requirement matching /.(?:gif|jpe?g|png)$/i will be treated as an image requirement.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'myplugin_bg.png'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* You can count on the image being available here */</span> &#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>I’ve updated the code I use to require scripts and styles on my web pages.</p>\n<p>Check it out, or fork it at github: <a href=\"http://github.com/thetalecrafter/require\" target=\"_blank\" rel=\"noopener\">http://github.com/thetalecrafter/require</a></p>\n<p>Usage:</p>\n<p>main file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>.setObjUrl(<span class=\"string\">'jQuery'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> name === <span class=\"string\">'jQuery'</span> ? <span class=\"string\">'http://code.jquery.com/jquery-1.5.2.min.js'</span> :</span><br><span class=\"line\">\t\t<span class=\"string\">'http://cdn-'</span> + (name.length % <span class=\"number\">4</span>) + <span class=\"string\">'.example/plugins/'</span> + name + <span class=\"string\">'.js'</span>; &#125;);</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'jQuery.myplugin'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">myplugin</span>) </span>&#123; <span class=\"comment\">/* both have loaded when this executes */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>plugin file:</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'jQuery'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">jQuery</span>) </span>&#123;</span><br><span class=\"line\">\tjQuery.myplugin = ...</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>require css: Any requirement matching <code>/\\.css$/i</code> will be treated as a css requirement.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'myplugin.css'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* You can count on styles being available here */</span> &#125;);</span><br></pre></td></tr></table></figure>\n<p>require image: Any requirement matching /.(?:gif|jpe?g|png)$/i will be treated as an image requirement.</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'myplugin_bg.png'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">/* You can count on the image being available here */</span> &#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"JSON and POST in PHP","id":"37","date":"2009-02-05T05:25:03.000Z","_content":"\nAs I've been trying to do Lab 2 without having to modify my ami or change my apache configuration, I've found some nice helpers.\n\nFirst, trying to encode and decode JSON in PHP 5.2 is easy... you just use the built in functions json_encode() and json_decode(). However, my Fedora ami is only running PHP 5.03\\. So, how do I use JSON without recompiling my php installation, or downloading 5 billion files? Michal Migurski created a php-json library that is now a part of PEAR, but he still has a copy of his original encoder/decoder at [http://mike.teczno.com/JSON/JSON.phps](http://mike.teczno.com/JSON/JSON.phps). It's licenced BSD-style so have at it.\n\nNext, I wanted to sent http requests by POST, including file uploads, again without downloading 5 billion files or messing with my ami. My solution was to actually learn the 'application/x-www-form-urlencoded' format and 'multipart/form-data' format and send the HTTP request across a socket.\n\nA resource that helped me with the 'application/x-www-form-urlencoded' format is on [www.wellho.net](http://www.wellho.net/resources/ex.php4?item=h110/getpost.php). For the 'multipart/form-data' format [http://chxo.com/be2/20050724_93bf.html](http://chxo.com/be2/20050724_93bf.html) was very helpful. One gotcha to remember though is that PHP heredoc strings usually use \\n line endings. While this may not cause any problems, to be safe and consistent with HTTP, you should use \\r\\n line endings.\n\nPutting the two together into one function gave me the following:\n\n```php\nfunction http_post($host, $path, $data_hash, $file = '', $file_param_name = '') {\n\t$boundary = md5(uniqid());\n\tif ($file && $file_param_name) {\n\t\t$binary = file_get_contents($file['tmp_name']);\n\n\t\t$content_type = \"multipart/form-data; boundary=$boundary\";\n\n\t\t$items = array();\n\t\tforeach (array_keys($data_hash) as $key) {\n\t\t\tarray_push($items, \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n{$data_hash[$key]}\\r\\n\");\n\t\t}\n\t\tarray_push($items, \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$file_param_name\\\"; filename=\\\"{$file['name']}\\\"\\r\\n\");\n\t\tarray_push($items, \"Content-Type: {$file['type']}\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n$binary\\r\\n--$boundary--\\r\\n\");\n\t\t$data = implode('', $items);\n\t} else {\n\t\t$content_type = 'application/x-www-form-urlencoded; charset=UTF-8';\n\n\t\t$items = array();\n\t\tforeach (array_keys($data_hash) as $key) {\n\t\t\tarray_push($items, urlencode($key) . '=' . urlencode($data_hash[$key]));\n\t\t}\n\t\t$data = implode('&', $items);\n\t}\n\n\t$content_length = strlen($data);\n\t$fp = fsockopen($host, 80);\n\tfputs($fp, \"POST $path HTTP/1.1\\r\\n\");\n\tfputs($fp, \"Host: $host\\r\\n\");\n\tfputs($fp, \"Content-Type: $content_type\\r\\n\");\n\tfputs($fp, \"Content-Length: $content_length\\r\\n\");\n\tfputs($fp, \"Connection: close\\r\\n\\r\\n\");\n\tfputs($fp, $data, $content_length);\n\n\t$http_response = stream_get_contents($fp);\n\tfclose($fp);\n\n\tlist($headers, $body) = explode(\"\\r\\n\\r\\n\", $http_response, 2);\n\treturn $body;\n}\n```\n\nNote that the `$file` parameter would be `$_FILES['your-form-input-name']`, and `$file_param_name` would be `'your-form-input-name'`. `$data_hash`, I assume would be obvious. It's an associative array with key => value pairs to send. The upload file would not appear in `$data_hash`.\n","source":"_posts/json-and-post-in-php.md","raw":"title: JSON and POST in PHP\ntags:\n  - file upload\n  - JSON\n  - multipart\n  - multipart/form-data\n  - php\n  - POST\nid: 37\ncategories:\n  - Distributed System Design\ndate: 2009-02-04 22:25:03\n---\n\nAs I've been trying to do Lab 2 without having to modify my ami or change my apache configuration, I've found some nice helpers.\n\nFirst, trying to encode and decode JSON in PHP 5.2 is easy... you just use the built in functions json_encode() and json_decode(). However, my Fedora ami is only running PHP 5.03\\. So, how do I use JSON without recompiling my php installation, or downloading 5 billion files? Michal Migurski created a php-json library that is now a part of PEAR, but he still has a copy of his original encoder/decoder at [http://mike.teczno.com/JSON/JSON.phps](http://mike.teczno.com/JSON/JSON.phps). It's licenced BSD-style so have at it.\n\nNext, I wanted to sent http requests by POST, including file uploads, again without downloading 5 billion files or messing with my ami. My solution was to actually learn the 'application/x-www-form-urlencoded' format and 'multipart/form-data' format and send the HTTP request across a socket.\n\nA resource that helped me with the 'application/x-www-form-urlencoded' format is on [www.wellho.net](http://www.wellho.net/resources/ex.php4?item=h110/getpost.php). For the 'multipart/form-data' format [http://chxo.com/be2/20050724_93bf.html](http://chxo.com/be2/20050724_93bf.html) was very helpful. One gotcha to remember though is that PHP heredoc strings usually use \\n line endings. While this may not cause any problems, to be safe and consistent with HTTP, you should use \\r\\n line endings.\n\nPutting the two together into one function gave me the following:\n\n```php\nfunction http_post($host, $path, $data_hash, $file = '', $file_param_name = '') {\n\t$boundary = md5(uniqid());\n\tif ($file && $file_param_name) {\n\t\t$binary = file_get_contents($file['tmp_name']);\n\n\t\t$content_type = \"multipart/form-data; boundary=$boundary\";\n\n\t\t$items = array();\n\t\tforeach (array_keys($data_hash) as $key) {\n\t\t\tarray_push($items, \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n{$data_hash[$key]}\\r\\n\");\n\t\t}\n\t\tarray_push($items, \"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$file_param_name\\\"; filename=\\\"{$file['name']}\\\"\\r\\n\");\n\t\tarray_push($items, \"Content-Type: {$file['type']}\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n$binary\\r\\n--$boundary--\\r\\n\");\n\t\t$data = implode('', $items);\n\t} else {\n\t\t$content_type = 'application/x-www-form-urlencoded; charset=UTF-8';\n\n\t\t$items = array();\n\t\tforeach (array_keys($data_hash) as $key) {\n\t\t\tarray_push($items, urlencode($key) . '=' . urlencode($data_hash[$key]));\n\t\t}\n\t\t$data = implode('&', $items);\n\t}\n\n\t$content_length = strlen($data);\n\t$fp = fsockopen($host, 80);\n\tfputs($fp, \"POST $path HTTP/1.1\\r\\n\");\n\tfputs($fp, \"Host: $host\\r\\n\");\n\tfputs($fp, \"Content-Type: $content_type\\r\\n\");\n\tfputs($fp, \"Content-Length: $content_length\\r\\n\");\n\tfputs($fp, \"Connection: close\\r\\n\\r\\n\");\n\tfputs($fp, $data, $content_length);\n\n\t$http_response = stream_get_contents($fp);\n\tfclose($fp);\n\n\tlist($headers, $body) = explode(\"\\r\\n\\r\\n\", $http_response, 2);\n\treturn $body;\n}\n```\n\nNote that the `$file` parameter would be `$_FILES['your-form-input-name']`, and `$file_param_name` would be `'your-form-input-name'`. `$data_hash`, I assume would be obvious. It's an associative array with key => value pairs to send. The upload file would not appear in `$data_hash`.\n","slug":"json-and-post-in-php","published":1,"updated":"2018-05-08T17:28:54.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei60001ov1ppr8evdsd9","content":"<p>As I’ve been trying to do Lab 2 without having to modify my ami or change my apache configuration, I’ve found some nice helpers.</p>\n<p>First, trying to encode and decode JSON in PHP 5.2 is easy… you just use the built in functions json_encode() and json_decode(). However, my Fedora ami is only running PHP 5.03. So, how do I use JSON without recompiling my php installation, or downloading 5 billion files? Michal Migurski created a php-json library that is now a part of PEAR, but he still has a copy of his original encoder/decoder at <a href=\"http://mike.teczno.com/JSON/JSON.phps\" target=\"_blank\" rel=\"noopener\">http://mike.teczno.com/JSON/JSON.phps</a>. It’s licenced BSD-style so have at it.</p>\n<p>Next, I wanted to sent http requests by POST, including file uploads, again without downloading 5 billion files or messing with my ami. My solution was to actually learn the ‘application/x-www-form-urlencoded’ format and ‘multipart/form-data’ format and send the HTTP request across a socket.</p>\n<p>A resource that helped me with the ‘application/x-www-form-urlencoded’ format is on <a href=\"http://www.wellho.net/resources/ex.php4?item=h110/getpost.php\" target=\"_blank\" rel=\"noopener\">www.wellho.net</a>. For the ‘multipart/form-data’ format <a href=\"http://chxo.com/be2/20050724_93bf.html\" target=\"_blank\" rel=\"noopener\">http://chxo.com/be2/20050724_93bf.html</a> was very helpful. One gotcha to remember though is that PHP heredoc strings usually use \\n line endings. While this may not cause any problems, to be safe and consistent with HTTP, you should use \\r\\n line endings.</p>\n<p>Putting the two together into one function gave me the following:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">http_post</span><span class=\"params\">($host, $path, $data_hash, $file = <span class=\"string\">''</span>, $file_param_name = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">\t$boundary = md5(uniqid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ($file &amp;&amp; $file_param_name) &#123;</span><br><span class=\"line\">\t\t$binary = file_get_contents($file[<span class=\"string\">'tmp_name'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$content_type = <span class=\"string\">\"multipart/form-data; boundary=$boundary\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$items = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span> (array_keys($data_hash) <span class=\"keyword\">as</span> $key) &#123;</span><br><span class=\"line\">\t\t\tarray_push($items, <span class=\"string\">\"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n&#123;$data_hash[$key]&#125;\\r\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tarray_push($items, <span class=\"string\">\"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$file_param_name\\\"; filename=\\\"&#123;$file['name']&#125;\\\"\\r\\n\"</span>);</span><br><span class=\"line\">\t\tarray_push($items, <span class=\"string\">\"Content-Type: &#123;$file['type']&#125;\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n$binary\\r\\n--$boundary--\\r\\n\"</span>);</span><br><span class=\"line\">\t\t$data = implode(<span class=\"string\">''</span>, $items);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t$content_type = <span class=\"string\">'application/x-www-form-urlencoded; charset=UTF-8'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$items = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span> (array_keys($data_hash) <span class=\"keyword\">as</span> $key) &#123;</span><br><span class=\"line\">\t\t\tarray_push($items, urlencode($key) . <span class=\"string\">'='</span> . urlencode($data_hash[$key]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$data = implode(<span class=\"string\">'&amp;'</span>, $items);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t$content_length = strlen($data);</span><br><span class=\"line\">\t$fp = fsockopen($host, <span class=\"number\">80</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"POST $path HTTP/1.1\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Host: $host\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Content-Type: $content_type\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Content-Length: $content_length\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Connection: close\\r\\n\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, $data, $content_length);</span><br><span class=\"line\"></span><br><span class=\"line\">\t$http_response = stream_get_contents($fp);</span><br><span class=\"line\">\tfclose($fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">list</span>($headers, $body) = explode(<span class=\"string\">\"\\r\\n\\r\\n\"</span>, $http_response, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> $body;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note that the <code>$file</code> parameter would be <code>$_FILES[&#39;your-form-input-name&#39;]</code>, and <code>$file_param_name</code> would be <code>&#39;your-form-input-name&#39;</code>. <code>$data_hash</code>, I assume would be obvious. It’s an associative array with key =&gt; value pairs to send. The upload file would not appear in <code>$data_hash</code>.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As I’ve been trying to do Lab 2 without having to modify my ami or change my apache configuration, I’ve found some nice helpers.</p>\n<p>First, trying to encode and decode JSON in PHP 5.2 is easy… you just use the built in functions json_encode() and json_decode(). However, my Fedora ami is only running PHP 5.03. So, how do I use JSON without recompiling my php installation, or downloading 5 billion files? Michal Migurski created a php-json library that is now a part of PEAR, but he still has a copy of his original encoder/decoder at <a href=\"http://mike.teczno.com/JSON/JSON.phps\" target=\"_blank\" rel=\"noopener\">http://mike.teczno.com/JSON/JSON.phps</a>. It’s licenced BSD-style so have at it.</p>\n<p>Next, I wanted to sent http requests by POST, including file uploads, again without downloading 5 billion files or messing with my ami. My solution was to actually learn the ‘application/x-www-form-urlencoded’ format and ‘multipart/form-data’ format and send the HTTP request across a socket.</p>\n<p>A resource that helped me with the ‘application/x-www-form-urlencoded’ format is on <a href=\"http://www.wellho.net/resources/ex.php4?item=h110/getpost.php\" target=\"_blank\" rel=\"noopener\">www.wellho.net</a>. For the ‘multipart/form-data’ format <a href=\"http://chxo.com/be2/20050724_93bf.html\" target=\"_blank\" rel=\"noopener\">http://chxo.com/be2/20050724_93bf.html</a> was very helpful. One gotcha to remember though is that PHP heredoc strings usually use \\n line endings. While this may not cause any problems, to be safe and consistent with HTTP, you should use \\r\\n line endings.</p>\n<p>Putting the two together into one function gave me the following:</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">http_post</span><span class=\"params\">($host, $path, $data_hash, $file = <span class=\"string\">''</span>, $file_param_name = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">\t$boundary = md5(uniqid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ($file &amp;&amp; $file_param_name) &#123;</span><br><span class=\"line\">\t\t$binary = file_get_contents($file[<span class=\"string\">'tmp_name'</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$content_type = <span class=\"string\">\"multipart/form-data; boundary=$boundary\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$items = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span> (array_keys($data_hash) <span class=\"keyword\">as</span> $key) &#123;</span><br><span class=\"line\">\t\t\tarray_push($items, <span class=\"string\">\"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$key\\\"\\r\\n\\r\\n&#123;$data_hash[$key]&#125;\\r\\n\"</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tarray_push($items, <span class=\"string\">\"--$boundary\\r\\nContent-Disposition: form-data; name=\\\"$file_param_name\\\"; filename=\\\"&#123;$file['name']&#125;\\\"\\r\\n\"</span>);</span><br><span class=\"line\">\t\tarray_push($items, <span class=\"string\">\"Content-Type: &#123;$file['type']&#125;\\r\\nContent-Transfer-Encoding: binary\\r\\n\\r\\n$binary\\r\\n--$boundary--\\r\\n\"</span>);</span><br><span class=\"line\">\t\t$data = implode(<span class=\"string\">''</span>, $items);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t$content_type = <span class=\"string\">'application/x-www-form-urlencoded; charset=UTF-8'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$items = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span> (array_keys($data_hash) <span class=\"keyword\">as</span> $key) &#123;</span><br><span class=\"line\">\t\t\tarray_push($items, urlencode($key) . <span class=\"string\">'='</span> . urlencode($data_hash[$key]));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$data = implode(<span class=\"string\">'&amp;'</span>, $items);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t$content_length = strlen($data);</span><br><span class=\"line\">\t$fp = fsockopen($host, <span class=\"number\">80</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"POST $path HTTP/1.1\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Host: $host\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Content-Type: $content_type\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Content-Length: $content_length\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, <span class=\"string\">\"Connection: close\\r\\n\\r\\n\"</span>);</span><br><span class=\"line\">\tfputs($fp, $data, $content_length);</span><br><span class=\"line\"></span><br><span class=\"line\">\t$http_response = stream_get_contents($fp);</span><br><span class=\"line\">\tfclose($fp);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">list</span>($headers, $body) = explode(<span class=\"string\">\"\\r\\n\\r\\n\"</span>, $http_response, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> $body;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Note that the <code>$file</code> parameter would be <code>$_FILES[&#39;your-form-input-name&#39;]</code>, and <code>$file_param_name</code> would be <code>&#39;your-form-input-name&#39;</code>. <code>$data_hash</code>, I assume would be obvious. It’s an associative array with key =&gt; value pairs to send. The upload file would not appear in <code>$data_hash</code>.</p>\n"},{"title":"JavaScript require in 100 lines of code","id":"49","date":"2010-01-31T01:32:41.000Z","_content":"\n**UPDATE**: I've changed up my code a bit in the follow up post: [JavaScript Require Update](/2010/08/21/javascript-require-update/)\n**UPDATE**: Although my initial intent was to write require with minimal code, my latest version in github is much longer, but preforms better and is much more feature rich. Check it out, or fork it at github: [http://github.com/thetalecrafter/require](http://github.com/thetalecrafter/require)\n\nLately I've been toying with dependency management in JavaScript. Most implementations of require (at least that I've seen) use polling, a function in the loaded script, synchronous XMLHttpRequest (dojo.require), or some combination of those.\n\nPolling is less than ideal, since more code runs than is necessary. It can slow down the responsiveness of the page if the interval is too short, and the user waits longer than necessary if the interval is too long.\n\nPutting a function in the loaded file means that everything you load has to understand the system. You cannot load arbitrary files. This makes it harder to do mash-ups involving other peoples' code.\n\nSynchronous requests lock up the browser. If the server is latent, the user may feel the browser has crashed, and if the server goes down, it can actually crash the browser. In addition, XMLHttpRequest responses are not cached like script tags, meaning that the dynamic packages may need to be reloaded with every page load.\n\nSo... when looking at writing my own require function I knew I wanted:\n\n*   Event-driven code. (No polling. No more code execution than necessary.)\n*   No requirements on the contents of required files.\n*   Asynchronous loads (No chance of freezing or crashing the browser.)\n*   Take advantage of the browser's cache.\n*   Nested requires. (A file isn't loaded until everything it requires is loaded.)\n*   Decent browser compatibility (IE6+, FF2+, Chrome, Safari 3+, Opera).\n*   No external library requirements.\nOne thing I ended up giving up to get the aforementioned wants: Loading scripts in parallel. Nested requires were unreliable since not all browsers guarantee execution order of dynamically inserted script tags, therefore too hard to determine the parent requirement. I'm looking at you Safari. Any pointers to improve that would be appreciated.\n\nMy testing has been less than thorough, and there are many situations I didn't try to handle. (Like checking to see if the script was already included statically.)\n\nWithout further ado, here's my code: (the most up-to-date is available on [github](http://github.com/thetalecrafter/require))\n\n```javascript\n/**\n * _.require v0.3 by Andy VanWagoner, distributed under the ISC licence.\n * Provides require function for javascript.\n *\n * Copyright (c) 2010, Andy VanWagoner\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n(function() {\n\tvar map = {}, root = [], reqs = {}, q = [], CREATED = 0, QUEUED = 1, REQUESTED = 2, LOADED = 3, COMPLETE = 4, FAILED = 5;\n\n\tfunction Requirement(url) {\n\t\tthis.url = url;\n\t\tthis.listeners = [];\n\t\tthis.status = CREATED;\n\t\tthis.children = [];\n\t\treqs[url] = this;\n\t}\n\n\tRequirement.prototype = {\n\t\tpush: function push(child) { this.children.push(child); },\n\t\tcheck: function check() {\n\t\t\tvar list = this.children, i = list.length, l;\n\t\t\twhile (i) { if (list[--i].status !== COMPLETE) return; }\n\n\t\t\tthis.status = COMPLETE;\n\t\t\tfor (list = this.listeners, l = list.length; i < l; ++i) { list[i](); }\n\t\t},\n\t\tloaded: function loaded() {\n\t\t\tthis.status = LOADED;\n\t\t\tthis.check();\n\t\t\tif (q.shift() === this && q.length) q[0].load();\n\t\t},\n\t\tfailed: function failed() {\n\t\t\tthis.status = FAILED;\n\t\t\tif (q.shift() === this && q.length) q[0].load();\n\t\t},\n\t\tload: function load() { // Make request.\n\t\t\tvar r = this, d = document, s = d.createElement('script');\n\t\t\ts.type = 'text/javascript';\n\t\t\ts.src = r.url;\n\t\t\ts.requirement = r;\n\t\t\tfunction cleanup() { // make sure event & cleanup happens only once.\n\t\t\t\tif (!s.onload) return true;\n\t\t\t\ts.onload = s.onerror = s.onreadystatechange = null;\n\t\t\t\td.body.removeChild(s);\n\t\t\t}\n\t\t\ts.onload = function onload() { if (!cleanup()) r.loaded(); };\n\t\t\ts.onerror = function onerror() { if (!cleanup()) r.failed(); };\n\t\t\tif (s.readyState) { // for IE; note there is no way to detect failure to load.\n\t\t\t\ts.onreadystatechange = function () { if (s.readyState === 'complete' || s.readyState === 'loaded') s.onload(); };\n\t\t\t}\n\t\t\tr.status = REQUESTED;\n\t\t\td.body.appendChild(s);\n\t\t},\n\t\trequest: function request(onready) {\n\t\t\tthis.listeners.push(onready);\n\t\t\tif (this.status === COMPLETE) { onready(); return; }\n\n\t\t\tvar tags = document.getElementsByTagName('script'), i = tags.length, parent = 0;\n\t\t\twhile (i && !parent) { parent = tags[--i].requirement; }\n\t\t\t(parent || root).push(this);\n\t\t\tif (parent) this.listeners.push(function() { parent.check(); });\n\n\t\t\tif (this.status === CREATED) {\n\t\t\t\tthis.status = QUEUED;\n\t\t\t\tif (q.push(this) === 1) { this.load(); }\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction resolve(name) {\n\t\tif (/\\/|\\\\|\\.js$/.test(name)) return name;\n\t\tif (map[name]) return map[name];\n\t\tvar parts = name.split('.'), used = [], ns;\n\t\twhile (parts.length) {\n\t\t\tif (map[ns = parts.join('.')]) return map[ns] + used.reverse().join('/') + '.js';\n\t\t\tused.push(parts.pop());\n\t\t}\n\t\treturn used.reverse().join('/') + '.js';\n\t}\n\n\tfunction absolutize(url) {\n\t\tif (/^(https?|ftp|file):/.test(url)) return url;\n\t\treturn (/^\\//.test(url) ? absolutize.base : absolutize.path) + url;\n\t}\n\t(function () {\n\t\tvar tags = document.getElementsByTagName('base'), href = (tags.length ? tags.get(tags.length - 1) : location).href;\n\t\tabsolutize.path = href.substr(0, href.lastIndexOf('/') + 1) || href;\n\t\tabsolutize.base = href.split(/\\\\|\\//).slice(0, 3).join('/');\n\t})();\n\n\tfunction require(arr, onready) {\n\t\tif (typeof arr === 'string') arr = [ arr ]; // make sure we have an array.\n\t\tif (typeof onready !== 'function') onready = false;\n\t\tvar left = arr.length, i = arr.length;\n\t\tif (!left && onready) onready();\n\t\twhile (i) { // Update or create the requirement node.\n\t\t\tvar url = absolutize(resolve(arr[--i])), req = reqs[url] || new Requirement(url);\n\t\t\treq.request(function check() { if (!--left && onready) onready(); });\n\t\t}\n\t}\n\n\trequire.map = function mapto(name, loc) { map[name] = loc; };\n\trequire.unmap = function unmap(name) { delete map[name]; };\n\trequire.tree = root;\n\tjQuery.require = require;\n})();\n```\n","source":"_posts/javascript-require-in-100-lines-of-code.md","raw":"title: JavaScript require in 100 lines of code\ntags:\n  - ajax\n  - include\n  - JavaScript\n  - require\n  - script\nid: 49\ncategories:\n  - JavaScript\ndate: 2010-01-30 18:32:41\n---\n\n**UPDATE**: I've changed up my code a bit in the follow up post: [JavaScript Require Update](/2010/08/21/javascript-require-update/)\n**UPDATE**: Although my initial intent was to write require with minimal code, my latest version in github is much longer, but preforms better and is much more feature rich. Check it out, or fork it at github: [http://github.com/thetalecrafter/require](http://github.com/thetalecrafter/require)\n\nLately I've been toying with dependency management in JavaScript. Most implementations of require (at least that I've seen) use polling, a function in the loaded script, synchronous XMLHttpRequest (dojo.require), or some combination of those.\n\nPolling is less than ideal, since more code runs than is necessary. It can slow down the responsiveness of the page if the interval is too short, and the user waits longer than necessary if the interval is too long.\n\nPutting a function in the loaded file means that everything you load has to understand the system. You cannot load arbitrary files. This makes it harder to do mash-ups involving other peoples' code.\n\nSynchronous requests lock up the browser. If the server is latent, the user may feel the browser has crashed, and if the server goes down, it can actually crash the browser. In addition, XMLHttpRequest responses are not cached like script tags, meaning that the dynamic packages may need to be reloaded with every page load.\n\nSo... when looking at writing my own require function I knew I wanted:\n\n*   Event-driven code. (No polling. No more code execution than necessary.)\n*   No requirements on the contents of required files.\n*   Asynchronous loads (No chance of freezing or crashing the browser.)\n*   Take advantage of the browser's cache.\n*   Nested requires. (A file isn't loaded until everything it requires is loaded.)\n*   Decent browser compatibility (IE6+, FF2+, Chrome, Safari 3+, Opera).\n*   No external library requirements.\nOne thing I ended up giving up to get the aforementioned wants: Loading scripts in parallel. Nested requires were unreliable since not all browsers guarantee execution order of dynamically inserted script tags, therefore too hard to determine the parent requirement. I'm looking at you Safari. Any pointers to improve that would be appreciated.\n\nMy testing has been less than thorough, and there are many situations I didn't try to handle. (Like checking to see if the script was already included statically.)\n\nWithout further ado, here's my code: (the most up-to-date is available on [github](http://github.com/thetalecrafter/require))\n\n```javascript\n/**\n * _.require v0.3 by Andy VanWagoner, distributed under the ISC licence.\n * Provides require function for javascript.\n *\n * Copyright (c) 2010, Andy VanWagoner\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n(function() {\n\tvar map = {}, root = [], reqs = {}, q = [], CREATED = 0, QUEUED = 1, REQUESTED = 2, LOADED = 3, COMPLETE = 4, FAILED = 5;\n\n\tfunction Requirement(url) {\n\t\tthis.url = url;\n\t\tthis.listeners = [];\n\t\tthis.status = CREATED;\n\t\tthis.children = [];\n\t\treqs[url] = this;\n\t}\n\n\tRequirement.prototype = {\n\t\tpush: function push(child) { this.children.push(child); },\n\t\tcheck: function check() {\n\t\t\tvar list = this.children, i = list.length, l;\n\t\t\twhile (i) { if (list[--i].status !== COMPLETE) return; }\n\n\t\t\tthis.status = COMPLETE;\n\t\t\tfor (list = this.listeners, l = list.length; i < l; ++i) { list[i](); }\n\t\t},\n\t\tloaded: function loaded() {\n\t\t\tthis.status = LOADED;\n\t\t\tthis.check();\n\t\t\tif (q.shift() === this && q.length) q[0].load();\n\t\t},\n\t\tfailed: function failed() {\n\t\t\tthis.status = FAILED;\n\t\t\tif (q.shift() === this && q.length) q[0].load();\n\t\t},\n\t\tload: function load() { // Make request.\n\t\t\tvar r = this, d = document, s = d.createElement('script');\n\t\t\ts.type = 'text/javascript';\n\t\t\ts.src = r.url;\n\t\t\ts.requirement = r;\n\t\t\tfunction cleanup() { // make sure event & cleanup happens only once.\n\t\t\t\tif (!s.onload) return true;\n\t\t\t\ts.onload = s.onerror = s.onreadystatechange = null;\n\t\t\t\td.body.removeChild(s);\n\t\t\t}\n\t\t\ts.onload = function onload() { if (!cleanup()) r.loaded(); };\n\t\t\ts.onerror = function onerror() { if (!cleanup()) r.failed(); };\n\t\t\tif (s.readyState) { // for IE; note there is no way to detect failure to load.\n\t\t\t\ts.onreadystatechange = function () { if (s.readyState === 'complete' || s.readyState === 'loaded') s.onload(); };\n\t\t\t}\n\t\t\tr.status = REQUESTED;\n\t\t\td.body.appendChild(s);\n\t\t},\n\t\trequest: function request(onready) {\n\t\t\tthis.listeners.push(onready);\n\t\t\tif (this.status === COMPLETE) { onready(); return; }\n\n\t\t\tvar tags = document.getElementsByTagName('script'), i = tags.length, parent = 0;\n\t\t\twhile (i && !parent) { parent = tags[--i].requirement; }\n\t\t\t(parent || root).push(this);\n\t\t\tif (parent) this.listeners.push(function() { parent.check(); });\n\n\t\t\tif (this.status === CREATED) {\n\t\t\t\tthis.status = QUEUED;\n\t\t\t\tif (q.push(this) === 1) { this.load(); }\n\t\t\t}\n\t\t}\n\t};\n\n\tfunction resolve(name) {\n\t\tif (/\\/|\\\\|\\.js$/.test(name)) return name;\n\t\tif (map[name]) return map[name];\n\t\tvar parts = name.split('.'), used = [], ns;\n\t\twhile (parts.length) {\n\t\t\tif (map[ns = parts.join('.')]) return map[ns] + used.reverse().join('/') + '.js';\n\t\t\tused.push(parts.pop());\n\t\t}\n\t\treturn used.reverse().join('/') + '.js';\n\t}\n\n\tfunction absolutize(url) {\n\t\tif (/^(https?|ftp|file):/.test(url)) return url;\n\t\treturn (/^\\//.test(url) ? absolutize.base : absolutize.path) + url;\n\t}\n\t(function () {\n\t\tvar tags = document.getElementsByTagName('base'), href = (tags.length ? tags.get(tags.length - 1) : location).href;\n\t\tabsolutize.path = href.substr(0, href.lastIndexOf('/') + 1) || href;\n\t\tabsolutize.base = href.split(/\\\\|\\//).slice(0, 3).join('/');\n\t})();\n\n\tfunction require(arr, onready) {\n\t\tif (typeof arr === 'string') arr = [ arr ]; // make sure we have an array.\n\t\tif (typeof onready !== 'function') onready = false;\n\t\tvar left = arr.length, i = arr.length;\n\t\tif (!left && onready) onready();\n\t\twhile (i) { // Update or create the requirement node.\n\t\t\tvar url = absolutize(resolve(arr[--i])), req = reqs[url] || new Requirement(url);\n\t\t\treq.request(function check() { if (!--left && onready) onready(); });\n\t\t}\n\t}\n\n\trequire.map = function mapto(name, loc) { map[name] = loc; };\n\trequire.unmap = function unmap(name) { delete map[name]; };\n\trequire.tree = root;\n\tjQuery.require = require;\n})();\n```\n","slug":"javascript-require-in-100-lines-of-code","published":1,"updated":"2018-05-08T17:28:54.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei61001sv1pp0p469obf","content":"<p><strong>UPDATE</strong>: I’ve changed up my code a bit in the follow up post: <a href=\"/2010/08/21/javascript-require-update/\">JavaScript Require Update</a><br><strong>UPDATE</strong>: Although my initial intent was to write require with minimal code, my latest version in github is much longer, but preforms better and is much more feature rich. Check it out, or fork it at github: <a href=\"http://github.com/thetalecrafter/require\" target=\"_blank\" rel=\"noopener\">http://github.com/thetalecrafter/require</a></p>\n<p>Lately I’ve been toying with dependency management in JavaScript. Most implementations of require (at least that I’ve seen) use polling, a function in the loaded script, synchronous XMLHttpRequest (dojo.require), or some combination of those.</p>\n<p>Polling is less than ideal, since more code runs than is necessary. It can slow down the responsiveness of the page if the interval is too short, and the user waits longer than necessary if the interval is too long.</p>\n<p>Putting a function in the loaded file means that everything you load has to understand the system. You cannot load arbitrary files. This makes it harder to do mash-ups involving other peoples’ code.</p>\n<p>Synchronous requests lock up the browser. If the server is latent, the user may feel the browser has crashed, and if the server goes down, it can actually crash the browser. In addition, XMLHttpRequest responses are not cached like script tags, meaning that the dynamic packages may need to be reloaded with every page load.</p>\n<p>So… when looking at writing my own require function I knew I wanted:</p>\n<ul>\n<li>Event-driven code. (No polling. No more code execution than necessary.)</li>\n<li>No requirements on the contents of required files.</li>\n<li>Asynchronous loads (No chance of freezing or crashing the browser.)</li>\n<li>Take advantage of the browser’s cache.</li>\n<li>Nested requires. (A file isn’t loaded until everything it requires is loaded.)</li>\n<li>Decent browser compatibility (IE6+, FF2+, Chrome, Safari 3+, Opera).</li>\n<li>No external library requirements.<br>One thing I ended up giving up to get the aforementioned wants: Loading scripts in parallel. Nested requires were unreliable since not all browsers guarantee execution order of dynamically inserted script tags, therefore too hard to determine the parent requirement. I’m looking at you Safari. Any pointers to improve that would be appreciated.</li>\n</ul>\n<p>My testing has been less than thorough, and there are many situations I didn’t try to handle. (Like checking to see if the script was already included statically.)</p>\n<p>Without further ado, here’s my code: (the most up-to-date is available on <a href=\"http://github.com/thetalecrafter/require\" target=\"_blank\" rel=\"noopener\">github</a>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * _.require v0.3 by Andy VanWagoner, distributed under the ISC licence.</span></span><br><span class=\"line\"><span class=\"comment\"> * Provides require function for javascript.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2010, Andy VanWagoner</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Permission to use, copy, modify, and/or distribute this software for any</span></span><br><span class=\"line\"><span class=\"comment\"> * purpose with or without fee is hereby granted, provided that the above</span></span><br><span class=\"line\"><span class=\"comment\"> * copyright notice and this permission notice appear in all copies.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class=\"line\"><span class=\"comment\"> * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class=\"line\"><span class=\"comment\"> * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class=\"line\"><span class=\"comment\"> * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class=\"line\"><span class=\"comment\"> * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class=\"line\"><span class=\"comment\"> * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class=\"line\"><span class=\"comment\"> * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> map = &#123;&#125;, root = [], reqs = &#123;&#125;, q = [], CREATED = <span class=\"number\">0</span>, QUEUED = <span class=\"number\">1</span>, REQUESTED = <span class=\"number\">2</span>, LOADED = <span class=\"number\">3</span>, COMPLETE = <span class=\"number\">4</span>, FAILED = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Requirement</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.status = CREATED;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">\t\treqs[url] = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tRequirement.prototype = &#123;</span><br><span class=\"line\">\t\tpush: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">child</span>) </span>&#123; <span class=\"keyword\">this</span>.children.push(child); &#125;,</span><br><span class=\"line\">\t\tcheck: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> list = <span class=\"keyword\">this</span>.children, i = list.length, l;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i) &#123; <span class=\"keyword\">if</span> (list[--i].status !== COMPLETE) <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = COMPLETE;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (list = <span class=\"keyword\">this</span>.listeners, l = list.length; i &lt; l; ++i) &#123; list[i](); &#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tloaded: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loaded</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = LOADED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.check();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (q.shift() === <span class=\"keyword\">this</span> &amp;&amp; q.length) q[<span class=\"number\">0</span>].load();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tfailed: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">failed</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = FAILED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (q.shift() === <span class=\"keyword\">this</span> &amp;&amp; q.length) q[<span class=\"number\">0</span>].load();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tload: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// Make request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> r = <span class=\"keyword\">this</span>, d = <span class=\"built_in\">document</span>, s = d.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">\t\t\ts.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">\t\t\ts.src = r.url;</span><br><span class=\"line\">\t\t\ts.requirement = r;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cleanup</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// make sure event &amp; cleanup happens only once.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!s.onload) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\ts.onload = s.onerror = s.onreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\td.body.removeChild(s);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.onload = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onload</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (!cleanup()) r.loaded(); &#125;;</span><br><span class=\"line\">\t\t\ts.onerror = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onerror</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (!cleanup()) r.failed(); &#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s.readyState) &#123; <span class=\"comment\">// for IE; note there is no way to detect failure to load.</span></span><br><span class=\"line\">\t\t\t\ts.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (s.readyState === <span class=\"string\">'complete'</span> || s.readyState === <span class=\"string\">'loaded'</span>) s.onload(); &#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tr.status = REQUESTED;</span><br><span class=\"line\">\t\t\td.body.appendChild(s);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\trequest: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">onready</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.listeners.push(onready);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === COMPLETE) &#123; onready(); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> tags = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>), i = tags.length, parent = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &amp;&amp; !parent) &#123; parent = tags[--i].requirement; &#125;</span><br><span class=\"line\">\t\t\t(parent || root).push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (parent) <span class=\"keyword\">this</span>.listeners.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; parent.check(); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === CREATED) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.status = QUEUED;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (q.push(<span class=\"keyword\">this</span>) === <span class=\"number\">1</span>) &#123; <span class=\"keyword\">this</span>.load(); &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/\\/|\\\\|\\.js$/</span>.test(name)) <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (map[name]) <span class=\"keyword\">return</span> map[name];</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> parts = name.split(<span class=\"string\">'.'</span>), used = [], ns;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (parts.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (map[ns = parts.join(<span class=\"string\">'.'</span>)]) <span class=\"keyword\">return</span> map[ns] + used.reverse().join(<span class=\"string\">'/'</span>) + <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">\t\t\tused.push(parts.pop());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> used.reverse().join(<span class=\"string\">'/'</span>) + <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absolutize</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/^(https?|ftp|file):/</span>.test(url)) <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"regexp\">/^\\//</span>.test(url) ? absolutize.base : absolutize.path) + url;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tags = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'base'</span>), href = (tags.length ? tags.get(tags.length - <span class=\"number\">1</span>) : location).href;</span><br><span class=\"line\">\t\tabsolutize.path = href.substr(<span class=\"number\">0</span>, href.lastIndexOf(<span class=\"string\">'/'</span>) + <span class=\"number\">1</span>) || href;</span><br><span class=\"line\">\t\tabsolutize.base = href.split(<span class=\"regexp\">/\\\\|\\//</span>).slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>).join(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">arr, onready</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arr === <span class=\"string\">'string'</span>) arr = [ arr ]; <span class=\"comment\">// make sure we have an array.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onready !== <span class=\"string\">'function'</span>) onready = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> left = arr.length, i = arr.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!left &amp;&amp; onready) onready();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i) &#123; <span class=\"comment\">// Update or create the requirement node.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> url = absolutize(resolve(arr[--i])), req = reqs[url] || <span class=\"keyword\">new</span> Requirement(url);</span><br><span class=\"line\">\t\t\treq.request(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (!--left &amp;&amp; onready) onready(); &#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>.map = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapto</span>(<span class=\"params\">name, loc</span>) </span>&#123; map[name] = loc; &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>.unmap = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmap</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"keyword\">delete</span> map[name]; &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>.tree = root;</span><br><span class=\"line\">\tjQuery.require = <span class=\"built_in\">require</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>UPDATE</strong>: I’ve changed up my code a bit in the follow up post: <a href=\"/2010/08/21/javascript-require-update/\">JavaScript Require Update</a><br><strong>UPDATE</strong>: Although my initial intent was to write require with minimal code, my latest version in github is much longer, but preforms better and is much more feature rich. Check it out, or fork it at github: <a href=\"http://github.com/thetalecrafter/require\" target=\"_blank\" rel=\"noopener\">http://github.com/thetalecrafter/require</a></p>\n<p>Lately I’ve been toying with dependency management in JavaScript. Most implementations of require (at least that I’ve seen) use polling, a function in the loaded script, synchronous XMLHttpRequest (dojo.require), or some combination of those.</p>\n<p>Polling is less than ideal, since more code runs than is necessary. It can slow down the responsiveness of the page if the interval is too short, and the user waits longer than necessary if the interval is too long.</p>\n<p>Putting a function in the loaded file means that everything you load has to understand the system. You cannot load arbitrary files. This makes it harder to do mash-ups involving other peoples’ code.</p>\n<p>Synchronous requests lock up the browser. If the server is latent, the user may feel the browser has crashed, and if the server goes down, it can actually crash the browser. In addition, XMLHttpRequest responses are not cached like script tags, meaning that the dynamic packages may need to be reloaded with every page load.</p>\n<p>So… when looking at writing my own require function I knew I wanted:</p>\n<ul>\n<li>Event-driven code. (No polling. No more code execution than necessary.)</li>\n<li>No requirements on the contents of required files.</li>\n<li>Asynchronous loads (No chance of freezing or crashing the browser.)</li>\n<li>Take advantage of the browser’s cache.</li>\n<li>Nested requires. (A file isn’t loaded until everything it requires is loaded.)</li>\n<li>Decent browser compatibility (IE6+, FF2+, Chrome, Safari 3+, Opera).</li>\n<li>No external library requirements.<br>One thing I ended up giving up to get the aforementioned wants: Loading scripts in parallel. Nested requires were unreliable since not all browsers guarantee execution order of dynamically inserted script tags, therefore too hard to determine the parent requirement. I’m looking at you Safari. Any pointers to improve that would be appreciated.</li>\n</ul>\n<p>My testing has been less than thorough, and there are many situations I didn’t try to handle. (Like checking to see if the script was already included statically.)</p>\n<p>Without further ado, here’s my code: (the most up-to-date is available on <a href=\"http://github.com/thetalecrafter/require\" target=\"_blank\" rel=\"noopener\">github</a>)</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * _.require v0.3 by Andy VanWagoner, distributed under the ISC licence.</span></span><br><span class=\"line\"><span class=\"comment\"> * Provides require function for javascript.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2010, Andy VanWagoner</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Permission to use, copy, modify, and/or distribute this software for any</span></span><br><span class=\"line\"><span class=\"comment\"> * purpose with or without fee is hereby granted, provided that the above</span></span><br><span class=\"line\"><span class=\"comment\"> * copyright notice and this permission notice appear in all copies.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class=\"line\"><span class=\"comment\"> * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class=\"line\"><span class=\"comment\"> * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class=\"line\"><span class=\"comment\"> * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class=\"line\"><span class=\"comment\"> * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class=\"line\"><span class=\"comment\"> * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class=\"line\"><span class=\"comment\"> * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> map = &#123;&#125;, root = [], reqs = &#123;&#125;, q = [], CREATED = <span class=\"number\">0</span>, QUEUED = <span class=\"number\">1</span>, REQUESTED = <span class=\"number\">2</span>, LOADED = <span class=\"number\">3</span>, COMPLETE = <span class=\"number\">4</span>, FAILED = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Requirement</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.url = url;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.listeners = [];</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.status = CREATED;</span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.children = [];</span><br><span class=\"line\">\t\treqs[url] = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tRequirement.prototype = &#123;</span><br><span class=\"line\">\t\tpush: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">push</span>(<span class=\"params\">child</span>) </span>&#123; <span class=\"keyword\">this</span>.children.push(child); &#125;,</span><br><span class=\"line\">\t\tcheck: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> list = <span class=\"keyword\">this</span>.children, i = list.length, l;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i) &#123; <span class=\"keyword\">if</span> (list[--i].status !== COMPLETE) <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = COMPLETE;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (list = <span class=\"keyword\">this</span>.listeners, l = list.length; i &lt; l; ++i) &#123; list[i](); &#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tloaded: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">loaded</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = LOADED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.check();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (q.shift() === <span class=\"keyword\">this</span> &amp;&amp; q.length) q[<span class=\"number\">0</span>].load();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tfailed: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">failed</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.status = FAILED;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (q.shift() === <span class=\"keyword\">this</span> &amp;&amp; q.length) q[<span class=\"number\">0</span>].load();</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\tload: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">load</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// Make request.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> r = <span class=\"keyword\">this</span>, d = <span class=\"built_in\">document</span>, s = d.createElement(<span class=\"string\">'script'</span>);</span><br><span class=\"line\">\t\t\ts.type = <span class=\"string\">'text/javascript'</span>;</span><br><span class=\"line\">\t\t\ts.src = r.url;</span><br><span class=\"line\">\t\t\ts.requirement = r;</span><br><span class=\"line\">\t\t\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">cleanup</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// make sure event &amp; cleanup happens only once.</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!s.onload) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\t\ts.onload = s.onerror = s.onreadystatechange = <span class=\"literal\">null</span>;</span><br><span class=\"line\">\t\t\t\td.body.removeChild(s);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\ts.onload = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onload</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (!cleanup()) r.loaded(); &#125;;</span><br><span class=\"line\">\t\t\ts.onerror = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onerror</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (!cleanup()) r.failed(); &#125;;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (s.readyState) &#123; <span class=\"comment\">// for IE; note there is no way to detect failure to load.</span></span><br><span class=\"line\">\t\t\t\ts.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (s.readyState === <span class=\"string\">'complete'</span> || s.readyState === <span class=\"string\">'loaded'</span>) s.onload(); &#125;;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tr.status = REQUESTED;</span><br><span class=\"line\">\t\t\td.body.appendChild(s);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\trequest: <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">request</span>(<span class=\"params\">onready</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">this</span>.listeners.push(onready);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === COMPLETE) &#123; onready(); <span class=\"keyword\">return</span>; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> tags = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>), i = tags.length, parent = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &amp;&amp; !parent) &#123; parent = tags[--i].requirement; &#125;</span><br><span class=\"line\">\t\t\t(parent || root).push(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (parent) <span class=\"keyword\">this</span>.listeners.push(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; parent.check(); &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.status === CREATED) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">this</span>.status = QUEUED;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (q.push(<span class=\"keyword\">this</span>) === <span class=\"number\">1</span>) &#123; <span class=\"keyword\">this</span>.load(); &#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">resolve</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/\\/|\\\\|\\.js$/</span>.test(name)) <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (map[name]) <span class=\"keyword\">return</span> map[name];</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> parts = name.split(<span class=\"string\">'.'</span>), used = [], ns;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (parts.length) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (map[ns = parts.join(<span class=\"string\">'.'</span>)]) <span class=\"keyword\">return</span> map[ns] + used.reverse().join(<span class=\"string\">'/'</span>) + <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">\t\t\tused.push(parts.pop());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> used.reverse().join(<span class=\"string\">'/'</span>) + <span class=\"string\">'.js'</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">absolutize</span>(<span class=\"params\">url</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"regexp\">/^(https?|ftp|file):/</span>.test(url)) <span class=\"keyword\">return</span> url;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (<span class=\"regexp\">/^\\//</span>.test(url) ? absolutize.base : absolutize.path) + url;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> tags = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'base'</span>), href = (tags.length ? tags.get(tags.length - <span class=\"number\">1</span>) : location).href;</span><br><span class=\"line\">\t\tabsolutize.path = href.substr(<span class=\"number\">0</span>, href.lastIndexOf(<span class=\"string\">'/'</span>) + <span class=\"number\">1</span>) || href;</span><br><span class=\"line\">\t\tabsolutize.base = href.split(<span class=\"regexp\">/\\\\|\\//</span>).slice(<span class=\"number\">0</span>, <span class=\"number\">3</span>).join(<span class=\"string\">'/'</span>);</span><br><span class=\"line\">\t&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">require</span>(<span class=\"params\">arr, onready</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> arr === <span class=\"string\">'string'</span>) arr = [ arr ]; <span class=\"comment\">// make sure we have an array.</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> onready !== <span class=\"string\">'function'</span>) onready = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> left = arr.length, i = arr.length;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!left &amp;&amp; onready) onready();</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i) &#123; <span class=\"comment\">// Update or create the requirement node.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> url = absolutize(resolve(arr[--i])), req = reqs[url] || <span class=\"keyword\">new</span> Requirement(url);</span><br><span class=\"line\">\t\t\treq.request(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">check</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"keyword\">if</span> (!--left &amp;&amp; onready) onready(); &#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">require</span>.map = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mapto</span>(<span class=\"params\">name, loc</span>) </span>&#123; map[name] = loc; &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>.unmap = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">unmap</span>(<span class=\"params\">name</span>) </span>&#123; <span class=\"keyword\">delete</span> map[name]; &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">require</span>.tree = root;</span><br><span class=\"line\">\tjQuery.require = <span class=\"built_in\">require</span>;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n"},{"title":"Internet Protests to Censorship","id":"17","date":"2008-03-12T21:49:01.000Z","_content":"\nToday is Online Free Expression Day. [Reporters Without Borders (RSF)](http://www.rsf.org/ \"RSF\") is promoting public \"virtual\" protests against governments that censor Internet content, calling them [Internet enemies](http://us.oneworld.net/external/?url=http%3A%2F%2Fwww.rsf.org%2Farticle.php3%3Fid_article%3D26017 \"Internet enemies\"). My question is, how much should the government intervene? Harassment, indecent exposure, and sedition are all punishable off of the web, so should the government block this content on the web? The problem is that there is no clear line as to where content becomes unreasonably objectionable. I assert that the government should have a say about what information stumbles into the hands of the people they are sworn to protect, but the line should be determined by the voters. The people should know what is being blocked.\n\nAdditional Reading:\n\n*   [BBC News - Virtual demos over net censorship\n](http://news.bbc.co.uk/2/hi/in_depth/7292130.stm \"BBC News\")\n*   [Electronic Privacy Information Center](http://epic.org/free_speech/censorship/ \"epic.org\")\n*   [Religious Tolerance - Internet Censorship](http://www.religioustolerance.org/cyberpat.htm \"ReligiousTolerance.org\")","source":"_posts/internet-protests-to-censorship.md","raw":"title: Internet Protests to Censorship\ntags:\n  - censorship\n  - government\n  - internet\n  - Online Free Expression Day\n  - Reporters Without Borders\nid: 17\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-03-12 15:49:01\n---\n\nToday is Online Free Expression Day. [Reporters Without Borders (RSF)](http://www.rsf.org/ \"RSF\") is promoting public \"virtual\" protests against governments that censor Internet content, calling them [Internet enemies](http://us.oneworld.net/external/?url=http%3A%2F%2Fwww.rsf.org%2Farticle.php3%3Fid_article%3D26017 \"Internet enemies\"). My question is, how much should the government intervene? Harassment, indecent exposure, and sedition are all punishable off of the web, so should the government block this content on the web? The problem is that there is no clear line as to where content becomes unreasonably objectionable. I assert that the government should have a say about what information stumbles into the hands of the people they are sworn to protect, but the line should be determined by the voters. The people should know what is being blocked.\n\nAdditional Reading:\n\n*   [BBC News - Virtual demos over net censorship\n](http://news.bbc.co.uk/2/hi/in_depth/7292130.stm \"BBC News\")\n*   [Electronic Privacy Information Center](http://epic.org/free_speech/censorship/ \"epic.org\")\n*   [Religious Tolerance - Internet Censorship](http://www.religioustolerance.org/cyberpat.htm \"ReligiousTolerance.org\")","slug":"internet-protests-to-censorship","published":1,"updated":"2018-05-08T17:28:54.324Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei62001vv1ppvcgc4zsz","content":"<p>Today is Online Free Expression Day. <a href=\"http://www.rsf.org/\" title=\"RSF\" target=\"_blank\" rel=\"noopener\">Reporters Without Borders (RSF)</a> is promoting public “virtual” protests against governments that censor Internet content, calling them <a href=\"http://us.oneworld.net/external/?url=http%3A%2F%2Fwww.rsf.org%2Farticle.php3%3Fid_article%3D26017\" title=\"Internet enemies\" target=\"_blank\" rel=\"noopener\">Internet enemies</a>. My question is, how much should the government intervene? Harassment, indecent exposure, and sedition are all punishable off of the web, so should the government block this content on the web? The problem is that there is no clear line as to where content becomes unreasonably objectionable. I assert that the government should have a say about what information stumbles into the hands of the people they are sworn to protect, but the line should be determined by the voters. The people should know what is being blocked.</p>\n<p>Additional Reading:</p>\n<ul>\n<li><a href=\"http://news.bbc.co.uk/2/hi/in_depth/7292130.stm\" title=\"BBC News\" target=\"_blank\" rel=\"noopener\">BBC News - Virtual demos over net censorship\n</a></li>\n<li><a href=\"http://epic.org/free_speech/censorship/\" title=\"epic.org\" target=\"_blank\" rel=\"noopener\">Electronic Privacy Information Center</a></li>\n<li><a href=\"http://www.religioustolerance.org/cyberpat.htm\" title=\"ReligiousTolerance.org\" target=\"_blank\" rel=\"noopener\">Religious Tolerance - Internet Censorship</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Today is Online Free Expression Day. <a href=\"http://www.rsf.org/\" title=\"RSF\" target=\"_blank\" rel=\"noopener\">Reporters Without Borders (RSF)</a> is promoting public “virtual” protests against governments that censor Internet content, calling them <a href=\"http://us.oneworld.net/external/?url=http%3A%2F%2Fwww.rsf.org%2Farticle.php3%3Fid_article%3D26017\" title=\"Internet enemies\" target=\"_blank\" rel=\"noopener\">Internet enemies</a>. My question is, how much should the government intervene? Harassment, indecent exposure, and sedition are all punishable off of the web, so should the government block this content on the web? The problem is that there is no clear line as to where content becomes unreasonably objectionable. I assert that the government should have a say about what information stumbles into the hands of the people they are sworn to protect, but the line should be determined by the voters. The people should know what is being blocked.</p>\n<p>Additional Reading:</p>\n<ul>\n<li><a href=\"http://news.bbc.co.uk/2/hi/in_depth/7292130.stm\" title=\"BBC News\" target=\"_blank\" rel=\"noopener\">BBC News - Virtual demos over net censorship\n</a></li>\n<li><a href=\"http://epic.org/free_speech/censorship/\" title=\"epic.org\" target=\"_blank\" rel=\"noopener\">Electronic Privacy Information Center</a></li>\n<li><a href=\"http://www.religioustolerance.org/cyberpat.htm\" title=\"ReligiousTolerance.org\" target=\"_blank\" rel=\"noopener\">Religious Tolerance - Internet Censorship</a></li>\n</ul>\n"},{"title":"Jumping the Fold","date":"2015-07-25T21:08:36.000Z","_content":"\nImagine if the three dimensional universe we observe actually was all folded up through a fourth spacial dimension, like a paper all wadded up. While another galaxy might be unfathomably far from us traveling in the three normal dimensions, it could be a short trip across this extra dimension our universe is bent up through.\n\n---\n\nMy eyes were closed in an expression that probably looked like a wince.\n\n\"First time, kid?\" asked the pilot in front of me.\n\nI nodded without opening my eyes.\n\n\"You alright back there?\"\n\nI nodded again.\n\n\"I can't see you back there, so you're gonna need to give me a verbal.\"\n\nI opened my eyes. The tandem seats in this diminutive ship made me claustrophobic in addition to being anxious about the jump.\n\n\"I'm as ready as I'll ever be,\" I replied.\n\n\"Good,\" laughed the pilot. \"The fold should be right here in front of us. We are jumping on my mark. 3... 2... 1... mark.\"\n\nThe stars blinked out in the distance. I expected some sensation of force, but there was none. I felt nothing.\n\nConsciously I slowed my breath to calm my uneasy nerves, but the pounding in my chest only got louder.\n\nI could still see the pilot in the dim light cast by the ship's controls, but outside was complete darkness.\n\nAfter a minute or two, the silence broke.\n\n\"Almost there,\" said the pilot.\n\nSo our comms work in the fold.\n\n\"Just hang in there another few seconds,\" she continued. \"Done.\"\n\nAs if flipping a switch, stars suddenly blinked back into view, but they were not the stars I saw only a moment ago.\n\nThe pilot tried awkwardly to twist around to look at me. \"How was it?\" she asked.\n\nI hesitated to answer, so she offered a response for me. \"Rather uneventful, huh?\"\n\n\"Yeah,\" I replied, \"I was expecting a little more something.\"\n\nShe laughed as if they all say that. \"Welcome to fold jumping. You just traveled about a hundred meters in a direction we don't have a word for yet, and landed two and a half million light years from where you started. Pretty cool, eh?\"\n\nNo response came to mind. I just stared blankly at her.\n\nAfter a moment, she rolled her eyes (I think; It's hard to tell through her helmet) and she turned back to the main console.\n\n\"The station will take about an hour to reach from here through normal space, so I'll get us going. You just collect your thoughts and let me know when you're ready to talk.\"\n\nI nodded. She waited a minute.\n\n\"Verbal acknowledgment, please.\"\n\n\"Okay,\" I said.\n\n\"Thank you.\"\n\n","source":"_posts/jumping-the-fold.md","raw":"title: Jumping the Fold\ndate: 2015-07-25 15:08:36\ntags:\n  - Short Story\n  - Science Fiction\ncategories:\n  - Prose\n---\n\nImagine if the three dimensional universe we observe actually was all folded up through a fourth spacial dimension, like a paper all wadded up. While another galaxy might be unfathomably far from us traveling in the three normal dimensions, it could be a short trip across this extra dimension our universe is bent up through.\n\n---\n\nMy eyes were closed in an expression that probably looked like a wince.\n\n\"First time, kid?\" asked the pilot in front of me.\n\nI nodded without opening my eyes.\n\n\"You alright back there?\"\n\nI nodded again.\n\n\"I can't see you back there, so you're gonna need to give me a verbal.\"\n\nI opened my eyes. The tandem seats in this diminutive ship made me claustrophobic in addition to being anxious about the jump.\n\n\"I'm as ready as I'll ever be,\" I replied.\n\n\"Good,\" laughed the pilot. \"The fold should be right here in front of us. We are jumping on my mark. 3... 2... 1... mark.\"\n\nThe stars blinked out in the distance. I expected some sensation of force, but there was none. I felt nothing.\n\nConsciously I slowed my breath to calm my uneasy nerves, but the pounding in my chest only got louder.\n\nI could still see the pilot in the dim light cast by the ship's controls, but outside was complete darkness.\n\nAfter a minute or two, the silence broke.\n\n\"Almost there,\" said the pilot.\n\nSo our comms work in the fold.\n\n\"Just hang in there another few seconds,\" she continued. \"Done.\"\n\nAs if flipping a switch, stars suddenly blinked back into view, but they were not the stars I saw only a moment ago.\n\nThe pilot tried awkwardly to twist around to look at me. \"How was it?\" she asked.\n\nI hesitated to answer, so she offered a response for me. \"Rather uneventful, huh?\"\n\n\"Yeah,\" I replied, \"I was expecting a little more something.\"\n\nShe laughed as if they all say that. \"Welcome to fold jumping. You just traveled about a hundred meters in a direction we don't have a word for yet, and landed two and a half million light years from where you started. Pretty cool, eh?\"\n\nNo response came to mind. I just stared blankly at her.\n\nAfter a moment, she rolled her eyes (I think; It's hard to tell through her helmet) and she turned back to the main console.\n\n\"The station will take about an hour to reach from here through normal space, so I'll get us going. You just collect your thoughts and let me know when you're ready to talk.\"\n\nI nodded. She waited a minute.\n\n\"Verbal acknowledgment, please.\"\n\n\"Okay,\" I said.\n\n\"Thank you.\"\n\n","slug":"jumping-the-fold","published":1,"updated":"2018-05-08T17:28:54.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei64001zv1ppj5i7pej3","content":"<p>Imagine if the three dimensional universe we observe actually was all folded up through a fourth spacial dimension, like a paper all wadded up. While another galaxy might be unfathomably far from us traveling in the three normal dimensions, it could be a short trip across this extra dimension our universe is bent up through.</p>\n<hr>\n<p>My eyes were closed in an expression that probably looked like a wince.</p>\n<p>“First time, kid?” asked the pilot in front of me.</p>\n<p>I nodded without opening my eyes.</p>\n<p>“You alright back there?”</p>\n<p>I nodded again.</p>\n<p>“I can’t see you back there, so you’re gonna need to give me a verbal.”</p>\n<p>I opened my eyes. The tandem seats in this diminutive ship made me claustrophobic in addition to being anxious about the jump.</p>\n<p>“I’m as ready as I’ll ever be,” I replied.</p>\n<p>“Good,” laughed the pilot. “The fold should be right here in front of us. We are jumping on my mark. 3… 2… 1… mark.”</p>\n<p>The stars blinked out in the distance. I expected some sensation of force, but there was none. I felt nothing.</p>\n<p>Consciously I slowed my breath to calm my uneasy nerves, but the pounding in my chest only got louder.</p>\n<p>I could still see the pilot in the dim light cast by the ship’s controls, but outside was complete darkness.</p>\n<p>After a minute or two, the silence broke.</p>\n<p>“Almost there,” said the pilot.</p>\n<p>So our comms work in the fold.</p>\n<p>“Just hang in there another few seconds,” she continued. “Done.”</p>\n<p>As if flipping a switch, stars suddenly blinked back into view, but they were not the stars I saw only a moment ago.</p>\n<p>The pilot tried awkwardly to twist around to look at me. “How was it?” she asked.</p>\n<p>I hesitated to answer, so she offered a response for me. “Rather uneventful, huh?”</p>\n<p>“Yeah,” I replied, “I was expecting a little more something.”</p>\n<p>She laughed as if they all say that. “Welcome to fold jumping. You just traveled about a hundred meters in a direction we don’t have a word for yet, and landed two and a half million light years from where you started. Pretty cool, eh?”</p>\n<p>No response came to mind. I just stared blankly at her.</p>\n<p>After a moment, she rolled her eyes (I think; It’s hard to tell through her helmet) and she turned back to the main console.</p>\n<p>“The station will take about an hour to reach from here through normal space, so I’ll get us going. You just collect your thoughts and let me know when you’re ready to talk.”</p>\n<p>I nodded. She waited a minute.</p>\n<p>“Verbal acknowledgment, please.”</p>\n<p>“Okay,” I said.</p>\n<p>“Thank you.”</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Imagine if the three dimensional universe we observe actually was all folded up through a fourth spacial dimension, like a paper all wadded up. While another galaxy might be unfathomably far from us traveling in the three normal dimensions, it could be a short trip across this extra dimension our universe is bent up through.</p>\n<hr>\n<p>My eyes were closed in an expression that probably looked like a wince.</p>\n<p>“First time, kid?” asked the pilot in front of me.</p>\n<p>I nodded without opening my eyes.</p>\n<p>“You alright back there?”</p>\n<p>I nodded again.</p>\n<p>“I can’t see you back there, so you’re gonna need to give me a verbal.”</p>\n<p>I opened my eyes. The tandem seats in this diminutive ship made me claustrophobic in addition to being anxious about the jump.</p>\n<p>“I’m as ready as I’ll ever be,” I replied.</p>\n<p>“Good,” laughed the pilot. “The fold should be right here in front of us. We are jumping on my mark. 3… 2… 1… mark.”</p>\n<p>The stars blinked out in the distance. I expected some sensation of force, but there was none. I felt nothing.</p>\n<p>Consciously I slowed my breath to calm my uneasy nerves, but the pounding in my chest only got louder.</p>\n<p>I could still see the pilot in the dim light cast by the ship’s controls, but outside was complete darkness.</p>\n<p>After a minute or two, the silence broke.</p>\n<p>“Almost there,” said the pilot.</p>\n<p>So our comms work in the fold.</p>\n<p>“Just hang in there another few seconds,” she continued. “Done.”</p>\n<p>As if flipping a switch, stars suddenly blinked back into view, but they were not the stars I saw only a moment ago.</p>\n<p>The pilot tried awkwardly to twist around to look at me. “How was it?” she asked.</p>\n<p>I hesitated to answer, so she offered a response for me. “Rather uneventful, huh?”</p>\n<p>“Yeah,” I replied, “I was expecting a little more something.”</p>\n<p>She laughed as if they all say that. “Welcome to fold jumping. You just traveled about a hundred meters in a direction we don’t have a word for yet, and landed two and a half million light years from where you started. Pretty cool, eh?”</p>\n<p>No response came to mind. I just stared blankly at her.</p>\n<p>After a moment, she rolled her eyes (I think; It’s hard to tell through her helmet) and she turned back to the main console.</p>\n<p>“The station will take about an hour to reach from here through normal space, so I’ll get us going. You just collect your thoughts and let me know when you’re ready to talk.”</p>\n<p>I nodded. She waited a minute.</p>\n<p>“Verbal acknowledgment, please.”</p>\n<p>“Okay,” I said.</p>\n<p>“Thank you.”</p>\n"},{"title":"Load only when needed, or Preload everything?","id":"93","date":"2011-04-13T18:47:07.000Z","_content":"\nAs JavaScript and web application best practices have formed over the last several years, there have appeared two contesting patterns in loading the scripts needed for an application:\n\n**Don't load any JavaScript until you know you need it.**\n\nI usually feel like this is the way to go, because a lot of my code is specific to a particular widget or workflow. Why make the page take longer to load initially for something the user won't do every visit? Just put in minimal stubs to load the full functionality once the user begins down that workflow, or interacts with the widget.\n\nPros:\n\n*   Lighter initial page weight\n*   Encourages functionally modular code\n*   Memory performance boost (important if you have to support old browsers)\n*   Speed performance boost (if done right)\n\nCons:\n\n*   Adds additional complexity to code\n*   Laggy performance (if done wrong)\n*   Lots of HTTP requests\n\n**Combine and minify all JavaScript into one file loaded at the end of the html file.**\n\nYou know beforehand what is going to be needed on each page, and YSlow warned you about too many HTTP requests. Bundle up all the scripts into one download which will be cached after the first page view.\n\nPros:\n\n*   Easy to implement (lots of code will do it for you)\n*   Initial page load (once cached) is really fast\n\nCons:\n\n*   Load a lot more than usually necessary\n*   Initial load can be much slower\n\nSo how do you know which pattern to follow? It depends! If your application is very complex, and large portions of the functionality are used infrequently, it makes a lot of sense to use an on-demand pattern. If your application is fairly simple, or if all of the code is likely to be used every time, then combining all of the scripts and including it from the start will be much easier.\n\nI recently worked on a smaller application where I divided all the script into two files. The first was loaded initially, and provided enough functionality for the login dialog only. Upon successful login, the second script was loaded, which combined all of the remaining pieces of application.\n\nThe point I most want to make is this: **Don't just follow a pattern because it is a \"best practice\".** Take the time to figure out the best solution for your project.","source":"_posts/load-only-when-needed-or-preload-everything.md","raw":"title: 'Load only when needed, or Preload everything?'\ntags:\n  - ajax\n  - JavaScript\n  - minify\n  - require\n  - script\nid: 93\ncategories:\n  - JavaScript\ndate: 2011-04-13 12:47:07\n---\n\nAs JavaScript and web application best practices have formed over the last several years, there have appeared two contesting patterns in loading the scripts needed for an application:\n\n**Don't load any JavaScript until you know you need it.**\n\nI usually feel like this is the way to go, because a lot of my code is specific to a particular widget or workflow. Why make the page take longer to load initially for something the user won't do every visit? Just put in minimal stubs to load the full functionality once the user begins down that workflow, or interacts with the widget.\n\nPros:\n\n*   Lighter initial page weight\n*   Encourages functionally modular code\n*   Memory performance boost (important if you have to support old browsers)\n*   Speed performance boost (if done right)\n\nCons:\n\n*   Adds additional complexity to code\n*   Laggy performance (if done wrong)\n*   Lots of HTTP requests\n\n**Combine and minify all JavaScript into one file loaded at the end of the html file.**\n\nYou know beforehand what is going to be needed on each page, and YSlow warned you about too many HTTP requests. Bundle up all the scripts into one download which will be cached after the first page view.\n\nPros:\n\n*   Easy to implement (lots of code will do it for you)\n*   Initial page load (once cached) is really fast\n\nCons:\n\n*   Load a lot more than usually necessary\n*   Initial load can be much slower\n\nSo how do you know which pattern to follow? It depends! If your application is very complex, and large portions of the functionality are used infrequently, it makes a lot of sense to use an on-demand pattern. If your application is fairly simple, or if all of the code is likely to be used every time, then combining all of the scripts and including it from the start will be much easier.\n\nI recently worked on a smaller application where I divided all the script into two files. The first was loaded initially, and provided enough functionality for the login dialog only. Upon successful login, the second script was loaded, which combined all of the remaining pieces of application.\n\nThe point I most want to make is this: **Don't just follow a pattern because it is a \"best practice\".** Take the time to figure out the best solution for your project.","slug":"load-only-when-needed-or-preload-everything","published":1,"updated":"2018-05-08T17:28:54.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei650021v1ppgnu6sijj","content":"<p>As JavaScript and web application best practices have formed over the last several years, there have appeared two contesting patterns in loading the scripts needed for an application:</p>\n<p><strong>Don’t load any JavaScript until you know you need it.</strong></p>\n<p>I usually feel like this is the way to go, because a lot of my code is specific to a particular widget or workflow. Why make the page take longer to load initially for something the user won’t do every visit? Just put in minimal stubs to load the full functionality once the user begins down that workflow, or interacts with the widget.</p>\n<p>Pros:</p>\n<ul>\n<li>Lighter initial page weight</li>\n<li>Encourages functionally modular code</li>\n<li>Memory performance boost (important if you have to support old browsers)</li>\n<li>Speed performance boost (if done right)</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Adds additional complexity to code</li>\n<li>Laggy performance (if done wrong)</li>\n<li>Lots of HTTP requests</li>\n</ul>\n<p><strong>Combine and minify all JavaScript into one file loaded at the end of the html file.</strong></p>\n<p>You know beforehand what is going to be needed on each page, and YSlow warned you about too many HTTP requests. Bundle up all the scripts into one download which will be cached after the first page view.</p>\n<p>Pros:</p>\n<ul>\n<li>Easy to implement (lots of code will do it for you)</li>\n<li>Initial page load (once cached) is really fast</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Load a lot more than usually necessary</li>\n<li>Initial load can be much slower</li>\n</ul>\n<p>So how do you know which pattern to follow? It depends! If your application is very complex, and large portions of the functionality are used infrequently, it makes a lot of sense to use an on-demand pattern. If your application is fairly simple, or if all of the code is likely to be used every time, then combining all of the scripts and including it from the start will be much easier.</p>\n<p>I recently worked on a smaller application where I divided all the script into two files. The first was loaded initially, and provided enough functionality for the login dialog only. Upon successful login, the second script was loaded, which combined all of the remaining pieces of application.</p>\n<p>The point I most want to make is this: <strong>Don’t just follow a pattern because it is a “best practice”.</strong> Take the time to figure out the best solution for your project.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As JavaScript and web application best practices have formed over the last several years, there have appeared two contesting patterns in loading the scripts needed for an application:</p>\n<p><strong>Don’t load any JavaScript until you know you need it.</strong></p>\n<p>I usually feel like this is the way to go, because a lot of my code is specific to a particular widget or workflow. Why make the page take longer to load initially for something the user won’t do every visit? Just put in minimal stubs to load the full functionality once the user begins down that workflow, or interacts with the widget.</p>\n<p>Pros:</p>\n<ul>\n<li>Lighter initial page weight</li>\n<li>Encourages functionally modular code</li>\n<li>Memory performance boost (important if you have to support old browsers)</li>\n<li>Speed performance boost (if done right)</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Adds additional complexity to code</li>\n<li>Laggy performance (if done wrong)</li>\n<li>Lots of HTTP requests</li>\n</ul>\n<p><strong>Combine and minify all JavaScript into one file loaded at the end of the html file.</strong></p>\n<p>You know beforehand what is going to be needed on each page, and YSlow warned you about too many HTTP requests. Bundle up all the scripts into one download which will be cached after the first page view.</p>\n<p>Pros:</p>\n<ul>\n<li>Easy to implement (lots of code will do it for you)</li>\n<li>Initial page load (once cached) is really fast</li>\n</ul>\n<p>Cons:</p>\n<ul>\n<li>Load a lot more than usually necessary</li>\n<li>Initial load can be much slower</li>\n</ul>\n<p>So how do you know which pattern to follow? It depends! If your application is very complex, and large portions of the functionality are used infrequently, it makes a lot of sense to use an on-demand pattern. If your application is fairly simple, or if all of the code is likely to be used every time, then combining all of the scripts and including it from the start will be much easier.</p>\n<p>I recently worked on a smaller application where I divided all the script into two files. The first was loaded initially, and provided enough functionality for the login dialog only. Upon successful login, the second script was loaded, which combined all of the remaining pieces of application.</p>\n<p>The point I most want to make is this: <strong>Don’t just follow a pattern because it is a “best practice”.</strong> Take the time to figure out the best solution for your project.</p>\n"},{"title":"One World, One Family","id":"11","date":"2008-02-07T02:00:00.000Z","_content":"\nWe are all related somehow. The idea certainly doesn't appeal to everybody; I know that I know people I'd never admit kinship with no matter how closely our genes match. Yet we are all connected. If you go far enough up the family tree we all come from the same Adam and Eve, and it's surprising how many of us are related through much more recent figures in history, such as [Charlemagne](http://www.familyorigins.com/users/b/l/o/David-A-Blocher-WA/FAMO2-0001/index.htm). We, the descendants of so many great people, have the task of finding how we are connected and of learning about those who came before. It has never been easier than now, in our time of Internet communication.\n","source":"_posts/one-world-one-family.md","raw":"title: 'One World, One Family'\ntags:\n  - Charlemagne\n  - family\n  - family history\n  - genealogy\nid: 11\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-02-06 19:00:00\n---\n\nWe are all related somehow. The idea certainly doesn't appeal to everybody; I know that I know people I'd never admit kinship with no matter how closely our genes match. Yet we are all connected. If you go far enough up the family tree we all come from the same Adam and Eve, and it's surprising how many of us are related through much more recent figures in history, such as [Charlemagne](http://www.familyorigins.com/users/b/l/o/David-A-Blocher-WA/FAMO2-0001/index.htm). We, the descendants of so many great people, have the task of finding how we are connected and of learning about those who came before. It has never been easier than now, in our time of Internet communication.\n","slug":"one-world-one-family","published":1,"updated":"2018-05-08T17:28:54.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei660024v1pptyet6ec8","content":"<p>We are all related somehow. The idea certainly doesn’t appeal to everybody; I know that I know people I’d never admit kinship with no matter how closely our genes match. Yet we are all connected. If you go far enough up the family tree we all come from the same Adam and Eve, and it’s surprising how many of us are related through much more recent figures in history, such as <a href=\"http://www.familyorigins.com/users/b/l/o/David-A-Blocher-WA/FAMO2-0001/index.htm\" target=\"_blank\" rel=\"noopener\">Charlemagne</a>. We, the descendants of so many great people, have the task of finding how we are connected and of learning about those who came before. It has never been easier than now, in our time of Internet communication.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>We are all related somehow. The idea certainly doesn’t appeal to everybody; I know that I know people I’d never admit kinship with no matter how closely our genes match. Yet we are all connected. If you go far enough up the family tree we all come from the same Adam and Eve, and it’s surprising how many of us are related through much more recent figures in history, such as <a href=\"http://www.familyorigins.com/users/b/l/o/David-A-Blocher-WA/FAMO2-0001/index.htm\" target=\"_blank\" rel=\"noopener\">Charlemagne</a>. We, the descendants of so many great people, have the task of finding how we are connected and of learning about those who came before. It has never been easier than now, in our time of Internet communication.</p>\n"},{"title":"More Than Just a Member","id":"13","date":"2008-02-22T02:32:21.000Z","_content":"\nAs a member of the LDS Church, I believe it to be the only true church on the Earth. I know that phrase usually sparks unpleasant feelings among members of other churches, so I'd like to explain myself.  Again my disclaimer is: Although I believe myself to be representative of an active LDS member, I do not claim to state the Church's official position.\n\nUnfortunately, many people assume the use of \"only true church\" implies that all Mormons believe that Mormons go to Heaven, and all others go to Hell. This not what I believe. I certainly would not make such a [judgment](http://scriptures.lds.org/en/rom/14/10#10 \"Romans 14 v 10\"), neither of LDS members, nor of those of other faiths.\n\nWhen I say the \"[only true church](http://scriptures.lds.org/en/dc/1/30#30 \"Doctrine and Covenants 1 v 30\")\" I have singled out the LDS Church because it is fundamentally different than mainstream Christianity, though both share the key belief.\n\nJesus Christ [established His church](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/jesus-christ-established-his-church \"Mormon.org\") while on the earth.  When He died, resurrected and finally ascended into heaven, he left that church in the hands of the Apostles, with [Peter](http://scriptures.lds.org/en/matt/16/18#18 \"Matthew 16 v 18\") as the earthly head of the Church.  [Seventies](http://scriptures.lds.org/en/luke/10/1,17#1 \"Luke 10 vv 1, 17\") were also called to lead the church as well as local leaders, including bishops.  Christ continued to lead the Church by revelation to these leaders He had [ordained](http://scriptures.lds.org/en/matt/16#19 \"Matthew 16 v 19\").\n\nHowever, the doctrine, authority, and organization [were lost](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-great-apostasy \"Mormon.org\") over time.  [Peter](http://scriptures.lds.org/en/2_pet/2 \"Second Peter 2\") knew that this would happen, and both [Paul](http://scriptures.lds.org/en/gal/1/6#6 \"Galations 1 v 6\") and [Jude](http://scriptures.lds.org/en/jude/1 \"Jude\") saw it happening.  This apostasy necessitated a restoration.\n\nJust as He had [always](http://scriptures.lds.org/en/amos/3/7#7 \"Amos 3 v 7\") [done](http://scriptures.lds.org/en/deut/18/15,18-22#15 \"Deuteronomy 18 vv 15, 18-22\"), God called a [prophet](http://scriptures.lds.org/en/dc/1/17#17 \"Doctrine and Covenants 1 v 17\") again to restore the doctrine and priesthood.  Through Joseph Smith Jr., Christ [again established](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-restoration-of-the-gospel \"Mormon.org\") His Church.  That is why it is called the Church of _Jesus Christ_ of Latter-day Saints.\n\nThe [priesthood authority](http://scriptures.lds.org/en/heb/5/1,4,6,10#1 \"Hebrews 5 vv 1, 4, 6, 10\") is essential.  Only by this [proper authority](http://scriptures.lds.org/en/dc/22 \"Doctrine and Covenants 22\") are ordinances, such as baptism, made [valid eternally](http://scriptures.lds.org/en/matt/18/18#18 \"Matthew 18 v 18\").  The promises, or covenants, that we make with God in the saving ordinances <span style=\"font-style:italic;\">must</span> be made and kept for us to return to the Kingdom of Heaven.  Simply being a member of this, or any other church, [isn't enough](http://scriptures.lds.org/en/matt/7/21#21 \"Matthew 7 v 21\").\n\nMany mistakenly think that Mormons believe in salvation by [works](http://scriptures.lds.org/en/james/2/14-26#14 \"James 2 vv 14-26\") alone, which simply isn't true.  The ordinances are [necessary](http://scriptures.lds.org/en/john/3/5#5 \"John 3 v 5\"), but [not sufficient](http://scriptures.lds.org/en/2_ne/2/8#8 \"Second Nephi 2 v 8\") for salvation.  I know that Christ is our Savior.  It is <span style=\"font-style:italic;\">only</span> through His [grace](http://scriptures.lds.org/en/eph/2/5-9#5 \"Ephesians 2 vv 5-9\") - His Atonement - that we can overcome and be saved from our sins, after we have done [all we can](http://scriptures.lds.org/en/2_ne/25/23#23 \"Second Nephi 25 v 23\").\n\nMembership in the only true church gives us access to the priesthood authority necessary for the ordinances Christ has established.  Any authority outside of the Church of Jesus Christ is [incomplete](http://scriptures.lds.org/en/2_chr/26/18#18 \"Second Chronicles 26 v 18\").  However, church membership in no way guarantees salvation.  We must make and [_keep_](http://scriptures.lds.org/en/dc/52/15-16#15 \"Doctrine and Covenants 52 vv 15-16\") the covenants with God to accept the Atonement and be saved.\n\nThis is the key, where Mormonism and mainstream Christianity agree: Christ is Savior and Redeemer.  There is no other [way](http://scriptures.lds.org/en/john/14/6#6 \"John 14 v 6\") or [name](http://scriptures.lds.org/en/mosiah/3/17#17 \"Mosiah 3 v 17\") given under heaven whereby men may be saved.\n\nI know that God lives, and that His Son, Jesus Christ is our Savior.  I know Christ has, and will continue to call prophets to lead His Church, to teach His people, and to perform ordinances by His authority.  All that I or anyone knows of God and Heaven has come by revelation through prophets.  Without them, we would have no Bible, no Book of Mormon, and no understanding of our eternal potential and worth to our Father.   I know Our Father sent His Son to live, to die, and to live again for us.   I bare this, my witness, in the name of Jesus Christ.   Amen.\n\nFurther Readings:\n\n*   [_The Restoration of Truth_ - Mormon.org](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/ \"Mormon.org\")\n*   [_Warring against the Saints of God_ - Stephen E. Robinson](http://lds.org/ldsorg/v/index.jsp?vgnextoid=2354fccf2b7db010VgnVCM1000004d82620aRCRD&amp;locale=0&amp;sourceId=a05379356427b010VgnVCM1000004d82620a____&amp;hideNav=1 \"Ensign, Jan 1988\")\n*   [_Letter From a Youth Pastor_ - FAIR](http://www.fairlds.org/Misc/Four_LDS_Responses_to_Frequently_Asked_Questions.html \"FairLDS.org\")","source":"_posts/more-than-just-a-member.md","raw":"title: More Than Just a Member\ntags:\n  - Christianity\n  - churches\n  - covenants\n  - doctrine\n  - God\n  - grace\n  - Heaven\n  - Jesus Christ\n  - LDS\n  - Mormon\n  - ordinances\n  - priesthood\nid: 13\ncategories:\n  - Faith\ndate: 2008-02-21 19:32:21\n---\n\nAs a member of the LDS Church, I believe it to be the only true church on the Earth. I know that phrase usually sparks unpleasant feelings among members of other churches, so I'd like to explain myself.  Again my disclaimer is: Although I believe myself to be representative of an active LDS member, I do not claim to state the Church's official position.\n\nUnfortunately, many people assume the use of \"only true church\" implies that all Mormons believe that Mormons go to Heaven, and all others go to Hell. This not what I believe. I certainly would not make such a [judgment](http://scriptures.lds.org/en/rom/14/10#10 \"Romans 14 v 10\"), neither of LDS members, nor of those of other faiths.\n\nWhen I say the \"[only true church](http://scriptures.lds.org/en/dc/1/30#30 \"Doctrine and Covenants 1 v 30\")\" I have singled out the LDS Church because it is fundamentally different than mainstream Christianity, though both share the key belief.\n\nJesus Christ [established His church](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/jesus-christ-established-his-church \"Mormon.org\") while on the earth.  When He died, resurrected and finally ascended into heaven, he left that church in the hands of the Apostles, with [Peter](http://scriptures.lds.org/en/matt/16/18#18 \"Matthew 16 v 18\") as the earthly head of the Church.  [Seventies](http://scriptures.lds.org/en/luke/10/1,17#1 \"Luke 10 vv 1, 17\") were also called to lead the church as well as local leaders, including bishops.  Christ continued to lead the Church by revelation to these leaders He had [ordained](http://scriptures.lds.org/en/matt/16#19 \"Matthew 16 v 19\").\n\nHowever, the doctrine, authority, and organization [were lost](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-great-apostasy \"Mormon.org\") over time.  [Peter](http://scriptures.lds.org/en/2_pet/2 \"Second Peter 2\") knew that this would happen, and both [Paul](http://scriptures.lds.org/en/gal/1/6#6 \"Galations 1 v 6\") and [Jude](http://scriptures.lds.org/en/jude/1 \"Jude\") saw it happening.  This apostasy necessitated a restoration.\n\nJust as He had [always](http://scriptures.lds.org/en/amos/3/7#7 \"Amos 3 v 7\") [done](http://scriptures.lds.org/en/deut/18/15,18-22#15 \"Deuteronomy 18 vv 15, 18-22\"), God called a [prophet](http://scriptures.lds.org/en/dc/1/17#17 \"Doctrine and Covenants 1 v 17\") again to restore the doctrine and priesthood.  Through Joseph Smith Jr., Christ [again established](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-restoration-of-the-gospel \"Mormon.org\") His Church.  That is why it is called the Church of _Jesus Christ_ of Latter-day Saints.\n\nThe [priesthood authority](http://scriptures.lds.org/en/heb/5/1,4,6,10#1 \"Hebrews 5 vv 1, 4, 6, 10\") is essential.  Only by this [proper authority](http://scriptures.lds.org/en/dc/22 \"Doctrine and Covenants 22\") are ordinances, such as baptism, made [valid eternally](http://scriptures.lds.org/en/matt/18/18#18 \"Matthew 18 v 18\").  The promises, or covenants, that we make with God in the saving ordinances <span style=\"font-style:italic;\">must</span> be made and kept for us to return to the Kingdom of Heaven.  Simply being a member of this, or any other church, [isn't enough](http://scriptures.lds.org/en/matt/7/21#21 \"Matthew 7 v 21\").\n\nMany mistakenly think that Mormons believe in salvation by [works](http://scriptures.lds.org/en/james/2/14-26#14 \"James 2 vv 14-26\") alone, which simply isn't true.  The ordinances are [necessary](http://scriptures.lds.org/en/john/3/5#5 \"John 3 v 5\"), but [not sufficient](http://scriptures.lds.org/en/2_ne/2/8#8 \"Second Nephi 2 v 8\") for salvation.  I know that Christ is our Savior.  It is <span style=\"font-style:italic;\">only</span> through His [grace](http://scriptures.lds.org/en/eph/2/5-9#5 \"Ephesians 2 vv 5-9\") - His Atonement - that we can overcome and be saved from our sins, after we have done [all we can](http://scriptures.lds.org/en/2_ne/25/23#23 \"Second Nephi 25 v 23\").\n\nMembership in the only true church gives us access to the priesthood authority necessary for the ordinances Christ has established.  Any authority outside of the Church of Jesus Christ is [incomplete](http://scriptures.lds.org/en/2_chr/26/18#18 \"Second Chronicles 26 v 18\").  However, church membership in no way guarantees salvation.  We must make and [_keep_](http://scriptures.lds.org/en/dc/52/15-16#15 \"Doctrine and Covenants 52 vv 15-16\") the covenants with God to accept the Atonement and be saved.\n\nThis is the key, where Mormonism and mainstream Christianity agree: Christ is Savior and Redeemer.  There is no other [way](http://scriptures.lds.org/en/john/14/6#6 \"John 14 v 6\") or [name](http://scriptures.lds.org/en/mosiah/3/17#17 \"Mosiah 3 v 17\") given under heaven whereby men may be saved.\n\nI know that God lives, and that His Son, Jesus Christ is our Savior.  I know Christ has, and will continue to call prophets to lead His Church, to teach His people, and to perform ordinances by His authority.  All that I or anyone knows of God and Heaven has come by revelation through prophets.  Without them, we would have no Bible, no Book of Mormon, and no understanding of our eternal potential and worth to our Father.   I know Our Father sent His Son to live, to die, and to live again for us.   I bare this, my witness, in the name of Jesus Christ.   Amen.\n\nFurther Readings:\n\n*   [_The Restoration of Truth_ - Mormon.org](http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/ \"Mormon.org\")\n*   [_Warring against the Saints of God_ - Stephen E. Robinson](http://lds.org/ldsorg/v/index.jsp?vgnextoid=2354fccf2b7db010VgnVCM1000004d82620aRCRD&amp;locale=0&amp;sourceId=a05379356427b010VgnVCM1000004d82620a____&amp;hideNav=1 \"Ensign, Jan 1988\")\n*   [_Letter From a Youth Pastor_ - FAIR](http://www.fairlds.org/Misc/Four_LDS_Responses_to_Frequently_Asked_Questions.html \"FairLDS.org\")","slug":"more-than-just-a-member","published":1,"updated":"2018-05-08T17:28:54.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei670026v1ppucbbrzjs","content":"<p>As a member of the LDS Church, I believe it to be the only true church on the Earth. I know that phrase usually sparks unpleasant feelings among members of other churches, so I’d like to explain myself.  Again my disclaimer is: Although I believe myself to be representative of an active LDS member, I do not claim to state the Church’s official position.</p>\n<p>Unfortunately, many people assume the use of “only true church” implies that all Mormons believe that Mormons go to Heaven, and all others go to Hell. This not what I believe. I certainly would not make such a <a href=\"http://scriptures.lds.org/en/rom/14/10#10\" title=\"Romans 14 v 10\" target=\"_blank\" rel=\"noopener\">judgment</a>, neither of LDS members, nor of those of other faiths.</p>\n<p>When I say the “<a href=\"http://scriptures.lds.org/en/dc/1/30#30\" title=\"Doctrine and Covenants 1 v 30\" target=\"_blank\" rel=\"noopener\">only true church</a>“ I have singled out the LDS Church because it is fundamentally different than mainstream Christianity, though both share the key belief.</p>\n<p>Jesus Christ <a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/jesus-christ-established-his-church\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\">established His church</a> while on the earth.  When He died, resurrected and finally ascended into heaven, he left that church in the hands of the Apostles, with <a href=\"http://scriptures.lds.org/en/matt/16/18#18\" title=\"Matthew 16 v 18\" target=\"_blank\" rel=\"noopener\">Peter</a> as the earthly head of the Church.  <a href=\"http://scriptures.lds.org/en/luke/10/1,17#1\" title=\"Luke 10 vv 1, 17\" target=\"_blank\" rel=\"noopener\">Seventies</a> were also called to lead the church as well as local leaders, including bishops.  Christ continued to lead the Church by revelation to these leaders He had <a href=\"http://scriptures.lds.org/en/matt/16#19\" title=\"Matthew 16 v 19\" target=\"_blank\" rel=\"noopener\">ordained</a>.</p>\n<p>However, the doctrine, authority, and organization <a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-great-apostasy\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\">were lost</a> over time.  <a href=\"http://scriptures.lds.org/en/2_pet/2\" title=\"Second Peter 2\" target=\"_blank\" rel=\"noopener\">Peter</a> knew that this would happen, and both <a href=\"http://scriptures.lds.org/en/gal/1/6#6\" title=\"Galations 1 v 6\" target=\"_blank\" rel=\"noopener\">Paul</a> and <a href=\"http://scriptures.lds.org/en/jude/1\" title=\"Jude\" target=\"_blank\" rel=\"noopener\">Jude</a> saw it happening.  This apostasy necessitated a restoration.</p>\n<p>Just as He had <a href=\"http://scriptures.lds.org/en/amos/3/7#7\" title=\"Amos 3 v 7\" target=\"_blank\" rel=\"noopener\">always</a> <a href=\"http://scriptures.lds.org/en/deut/18/15,18-22#15\" title=\"Deuteronomy 18 vv 15, 18-22\" target=\"_blank\" rel=\"noopener\">done</a>, God called a <a href=\"http://scriptures.lds.org/en/dc/1/17#17\" title=\"Doctrine and Covenants 1 v 17\" target=\"_blank\" rel=\"noopener\">prophet</a> again to restore the doctrine and priesthood.  Through Joseph Smith Jr., Christ <a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-restoration-of-the-gospel\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\">again established</a> His Church.  That is why it is called the Church of <em>Jesus Christ</em> of Latter-day Saints.</p>\n<p>The <a href=\"http://scriptures.lds.org/en/heb/5/1,4,6,10#1\" title=\"Hebrews 5 vv 1, 4, 6, 10\" target=\"_blank\" rel=\"noopener\">priesthood authority</a> is essential.  Only by this <a href=\"http://scriptures.lds.org/en/dc/22\" title=\"Doctrine and Covenants 22\" target=\"_blank\" rel=\"noopener\">proper authority</a> are ordinances, such as baptism, made <a href=\"http://scriptures.lds.org/en/matt/18/18#18\" title=\"Matthew 18 v 18\" target=\"_blank\" rel=\"noopener\">valid eternally</a>.  The promises, or covenants, that we make with God in the saving ordinances <span style=\"font-style:italic;\">must</span> be made and kept for us to return to the Kingdom of Heaven.  Simply being a member of this, or any other church, <a href=\"http://scriptures.lds.org/en/matt/7/21#21\" title=\"Matthew 7 v 21\" target=\"_blank\" rel=\"noopener\">isn’t enough</a>.</p>\n<p>Many mistakenly think that Mormons believe in salvation by <a href=\"http://scriptures.lds.org/en/james/2/14-26#14\" title=\"James 2 vv 14-26\" target=\"_blank\" rel=\"noopener\">works</a> alone, which simply isn’t true.  The ordinances are <a href=\"http://scriptures.lds.org/en/john/3/5#5\" title=\"John 3 v 5\" target=\"_blank\" rel=\"noopener\">necessary</a>, but <a href=\"http://scriptures.lds.org/en/2_ne/2/8#8\" title=\"Second Nephi 2 v 8\" target=\"_blank\" rel=\"noopener\">not sufficient</a> for salvation.  I know that Christ is our Savior.  It is <span style=\"font-style:italic;\">only</span> through His <a href=\"http://scriptures.lds.org/en/eph/2/5-9#5\" title=\"Ephesians 2 vv 5-9\" target=\"_blank\" rel=\"noopener\">grace</a> - His Atonement - that we can overcome and be saved from our sins, after we have done <a href=\"http://scriptures.lds.org/en/2_ne/25/23#23\" title=\"Second Nephi 25 v 23\" target=\"_blank\" rel=\"noopener\">all we can</a>.</p>\n<p>Membership in the only true church gives us access to the priesthood authority necessary for the ordinances Christ has established.  Any authority outside of the Church of Jesus Christ is <a href=\"http://scriptures.lds.org/en/2_chr/26/18#18\" title=\"Second Chronicles 26 v 18\" target=\"_blank\" rel=\"noopener\">incomplete</a>.  However, church membership in no way guarantees salvation.  We must make and <a href=\"http://scriptures.lds.org/en/dc/52/15-16#15\" title=\"Doctrine and Covenants 52 vv 15-16\" target=\"_blank\" rel=\"noopener\"><em>keep</em></a> the covenants with God to accept the Atonement and be saved.</p>\n<p>This is the key, where Mormonism and mainstream Christianity agree: Christ is Savior and Redeemer.  There is no other <a href=\"http://scriptures.lds.org/en/john/14/6#6\" title=\"John 14 v 6\" target=\"_blank\" rel=\"noopener\">way</a> or <a href=\"http://scriptures.lds.org/en/mosiah/3/17#17\" title=\"Mosiah 3 v 17\" target=\"_blank\" rel=\"noopener\">name</a> given under heaven whereby men may be saved.</p>\n<p>I know that God lives, and that His Son, Jesus Christ is our Savior.  I know Christ has, and will continue to call prophets to lead His Church, to teach His people, and to perform ordinances by His authority.  All that I or anyone knows of God and Heaven has come by revelation through prophets.  Without them, we would have no Bible, no Book of Mormon, and no understanding of our eternal potential and worth to our Father.   I know Our Father sent His Son to live, to die, and to live again for us.   I bare this, my witness, in the name of Jesus Christ.   Amen.</p>\n<p>Further Readings:</p>\n<ul>\n<li><a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\"><em>The Restoration of Truth</em> - Mormon.org</a></li>\n<li><a href=\"http://lds.org/ldsorg/v/index.jsp?vgnextoid=2354fccf2b7db010VgnVCM1000004d82620aRCRD&amp;locale=0&amp;sourceId=a05379356427b010VgnVCM1000004d82620a____&amp;hideNav=1\" title=\"Ensign, Jan 1988\" target=\"_blank\" rel=\"noopener\"><em>Warring against the Saints of God</em> - Stephen E. Robinson</a></li>\n<li><a href=\"http://www.fairlds.org/Misc/Four_LDS_Responses_to_Frequently_Asked_Questions.html\" title=\"FairLDS.org\" target=\"_blank\" rel=\"noopener\"><em>Letter From a Youth Pastor</em> - FAIR</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>As a member of the LDS Church, I believe it to be the only true church on the Earth. I know that phrase usually sparks unpleasant feelings among members of other churches, so I’d like to explain myself.  Again my disclaimer is: Although I believe myself to be representative of an active LDS member, I do not claim to state the Church’s official position.</p>\n<p>Unfortunately, many people assume the use of “only true church” implies that all Mormons believe that Mormons go to Heaven, and all others go to Hell. This not what I believe. I certainly would not make such a <a href=\"http://scriptures.lds.org/en/rom/14/10#10\" title=\"Romans 14 v 10\" target=\"_blank\" rel=\"noopener\">judgment</a>, neither of LDS members, nor of those of other faiths.</p>\n<p>When I say the “<a href=\"http://scriptures.lds.org/en/dc/1/30#30\" title=\"Doctrine and Covenants 1 v 30\" target=\"_blank\" rel=\"noopener\">only true church</a>“ I have singled out the LDS Church because it is fundamentally different than mainstream Christianity, though both share the key belief.</p>\n<p>Jesus Christ <a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/jesus-christ-established-his-church\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\">established His church</a> while on the earth.  When He died, resurrected and finally ascended into heaven, he left that church in the hands of the Apostles, with <a href=\"http://scriptures.lds.org/en/matt/16/18#18\" title=\"Matthew 16 v 18\" target=\"_blank\" rel=\"noopener\">Peter</a> as the earthly head of the Church.  <a href=\"http://scriptures.lds.org/en/luke/10/1,17#1\" title=\"Luke 10 vv 1, 17\" target=\"_blank\" rel=\"noopener\">Seventies</a> were also called to lead the church as well as local leaders, including bishops.  Christ continued to lead the Church by revelation to these leaders He had <a href=\"http://scriptures.lds.org/en/matt/16#19\" title=\"Matthew 16 v 19\" target=\"_blank\" rel=\"noopener\">ordained</a>.</p>\n<p>However, the doctrine, authority, and organization <a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-great-apostasy\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\">were lost</a> over time.  <a href=\"http://scriptures.lds.org/en/2_pet/2\" title=\"Second Peter 2\" target=\"_blank\" rel=\"noopener\">Peter</a> knew that this would happen, and both <a href=\"http://scriptures.lds.org/en/gal/1/6#6\" title=\"Galations 1 v 6\" target=\"_blank\" rel=\"noopener\">Paul</a> and <a href=\"http://scriptures.lds.org/en/jude/1\" title=\"Jude\" target=\"_blank\" rel=\"noopener\">Jude</a> saw it happening.  This apostasy necessitated a restoration.</p>\n<p>Just as He had <a href=\"http://scriptures.lds.org/en/amos/3/7#7\" title=\"Amos 3 v 7\" target=\"_blank\" rel=\"noopener\">always</a> <a href=\"http://scriptures.lds.org/en/deut/18/15,18-22#15\" title=\"Deuteronomy 18 vv 15, 18-22\" target=\"_blank\" rel=\"noopener\">done</a>, God called a <a href=\"http://scriptures.lds.org/en/dc/1/17#17\" title=\"Doctrine and Covenants 1 v 17\" target=\"_blank\" rel=\"noopener\">prophet</a> again to restore the doctrine and priesthood.  Through Joseph Smith Jr., Christ <a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/the-restoration-of-the-gospel\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\">again established</a> His Church.  That is why it is called the Church of <em>Jesus Christ</em> of Latter-day Saints.</p>\n<p>The <a href=\"http://scriptures.lds.org/en/heb/5/1,4,6,10#1\" title=\"Hebrews 5 vv 1, 4, 6, 10\" target=\"_blank\" rel=\"noopener\">priesthood authority</a> is essential.  Only by this <a href=\"http://scriptures.lds.org/en/dc/22\" title=\"Doctrine and Covenants 22\" target=\"_blank\" rel=\"noopener\">proper authority</a> are ordinances, such as baptism, made <a href=\"http://scriptures.lds.org/en/matt/18/18#18\" title=\"Matthew 18 v 18\" target=\"_blank\" rel=\"noopener\">valid eternally</a>.  The promises, or covenants, that we make with God in the saving ordinances <span style=\"font-style:italic;\">must</span> be made and kept for us to return to the Kingdom of Heaven.  Simply being a member of this, or any other church, <a href=\"http://scriptures.lds.org/en/matt/7/21#21\" title=\"Matthew 7 v 21\" target=\"_blank\" rel=\"noopener\">isn’t enough</a>.</p>\n<p>Many mistakenly think that Mormons believe in salvation by <a href=\"http://scriptures.lds.org/en/james/2/14-26#14\" title=\"James 2 vv 14-26\" target=\"_blank\" rel=\"noopener\">works</a> alone, which simply isn’t true.  The ordinances are <a href=\"http://scriptures.lds.org/en/john/3/5#5\" title=\"John 3 v 5\" target=\"_blank\" rel=\"noopener\">necessary</a>, but <a href=\"http://scriptures.lds.org/en/2_ne/2/8#8\" title=\"Second Nephi 2 v 8\" target=\"_blank\" rel=\"noopener\">not sufficient</a> for salvation.  I know that Christ is our Savior.  It is <span style=\"font-style:italic;\">only</span> through His <a href=\"http://scriptures.lds.org/en/eph/2/5-9#5\" title=\"Ephesians 2 vv 5-9\" target=\"_blank\" rel=\"noopener\">grace</a> - His Atonement - that we can overcome and be saved from our sins, after we have done <a href=\"http://scriptures.lds.org/en/2_ne/25/23#23\" title=\"Second Nephi 25 v 23\" target=\"_blank\" rel=\"noopener\">all we can</a>.</p>\n<p>Membership in the only true church gives us access to the priesthood authority necessary for the ordinances Christ has established.  Any authority outside of the Church of Jesus Christ is <a href=\"http://scriptures.lds.org/en/2_chr/26/18#18\" title=\"Second Chronicles 26 v 18\" target=\"_blank\" rel=\"noopener\">incomplete</a>.  However, church membership in no way guarantees salvation.  We must make and <a href=\"http://scriptures.lds.org/en/dc/52/15-16#15\" title=\"Doctrine and Covenants 52 vv 15-16\" target=\"_blank\" rel=\"noopener\"><em>keep</em></a> the covenants with God to accept the Atonement and be saved.</p>\n<p>This is the key, where Mormonism and mainstream Christianity agree: Christ is Savior and Redeemer.  There is no other <a href=\"http://scriptures.lds.org/en/john/14/6#6\" title=\"John 14 v 6\" target=\"_blank\" rel=\"noopener\">way</a> or <a href=\"http://scriptures.lds.org/en/mosiah/3/17#17\" title=\"Mosiah 3 v 17\" target=\"_blank\" rel=\"noopener\">name</a> given under heaven whereby men may be saved.</p>\n<p>I know that God lives, and that His Son, Jesus Christ is our Savior.  I know Christ has, and will continue to call prophets to lead His Church, to teach His people, and to perform ordinances by His authority.  All that I or anyone knows of God and Heaven has come by revelation through prophets.  Without them, we would have no Bible, no Book of Mormon, and no understanding of our eternal potential and worth to our Father.   I know Our Father sent His Son to live, to die, and to live again for us.   I bare this, my witness, in the name of Jesus Christ.   Amen.</p>\n<p>Further Readings:</p>\n<ul>\n<li><a href=\"http://mormon.org/mormonorg/eng/basic-beliefs/the-restoration-of-truth/\" title=\"Mormon.org\" target=\"_blank\" rel=\"noopener\"><em>The Restoration of Truth</em> - Mormon.org</a></li>\n<li><a href=\"http://lds.org/ldsorg/v/index.jsp?vgnextoid=2354fccf2b7db010VgnVCM1000004d82620aRCRD&amp;locale=0&amp;sourceId=a05379356427b010VgnVCM1000004d82620a____&amp;hideNav=1\" title=\"Ensign, Jan 1988\" target=\"_blank\" rel=\"noopener\"><em>Warring against the Saints of God</em> - Stephen E. Robinson</a></li>\n<li><a href=\"http://www.fairlds.org/Misc/Four_LDS_Responses_to_Frequently_Asked_Questions.html\" title=\"FairLDS.org\" target=\"_blank\" rel=\"noopener\"><em>Letter From a Youth Pastor</em> - FAIR</a></li>\n</ul>\n"},{"title":"Private is Public: Are You Protected?","id":"7","date":"2008-01-24T04:02:23.000Z","_content":"\nA security hole in MySpace, which emerged last fall, spilled at least 17 gigabytes of photos into the public. A significant portion of the images came from \"private\" profiles. Learning this persuaded me to check on my \"private\" information and reinforced my hesitation to socialize online.\n\nA month ago, I was ungoogleable. I know, I tried every variation of my name and couldn't find anything, even after looking through 10 pages of results. Today, when I Google \"Andrew VanWagoner\", my LinkedIn profile is the first result. It has a link to this blog, and one to the site for my never-finished book. \"The TaleCrafter\" yields this blog and my book's site again. As I searched, I was glad to find I had kept my email, phone number, and address inconspicuous. Yet, if stalkers could access my college directory or Facebook profile, they would have all my contact information and more.\n\nWhat can average Joe do to keep himself from prying eyes? In this age: nothing. Every site worth participating in requires at least an email, if not a phone number and address. I'm not suggesting Joe stay off the internet, refuse to use phones, or lock himself in his apartment; I'm simply saying that what he does is usually visible, so he should keep his MySpace profile--and his life--clean. He may not keep his privacy, but he can still keep his decency.\n\nAdditional reading: [Privacy vs. Productivity](http://cs404.comfoltey.com/?p=5 \"Privacy vs. Productivity\")","source":"_posts/private-is-public-are-you-protected.md","raw":"title: 'Private is Public: Are You Protected?'\ntags:\n  - average Joe\n  - Facebook\n  - Google\n  - internet\n  - MySpace\n  - privacy\nid: 7\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-01-23 21:02:23\n---\n\nA security hole in MySpace, which emerged last fall, spilled at least 17 gigabytes of photos into the public. A significant portion of the images came from \"private\" profiles. Learning this persuaded me to check on my \"private\" information and reinforced my hesitation to socialize online.\n\nA month ago, I was ungoogleable. I know, I tried every variation of my name and couldn't find anything, even after looking through 10 pages of results. Today, when I Google \"Andrew VanWagoner\", my LinkedIn profile is the first result. It has a link to this blog, and one to the site for my never-finished book. \"The TaleCrafter\" yields this blog and my book's site again. As I searched, I was glad to find I had kept my email, phone number, and address inconspicuous. Yet, if stalkers could access my college directory or Facebook profile, they would have all my contact information and more.\n\nWhat can average Joe do to keep himself from prying eyes? In this age: nothing. Every site worth participating in requires at least an email, if not a phone number and address. I'm not suggesting Joe stay off the internet, refuse to use phones, or lock himself in his apartment; I'm simply saying that what he does is usually visible, so he should keep his MySpace profile--and his life--clean. He may not keep his privacy, but he can still keep his decency.\n\nAdditional reading: [Privacy vs. Productivity](http://cs404.comfoltey.com/?p=5 \"Privacy vs. Productivity\")","slug":"private-is-public-are-you-protected","published":1,"updated":"2018-05-08T17:28:54.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei670029v1ppxlu83ras","content":"<p>A security hole in MySpace, which emerged last fall, spilled at least 17 gigabytes of photos into the public. A significant portion of the images came from “private” profiles. Learning this persuaded me to check on my “private” information and reinforced my hesitation to socialize online.</p>\n<p>A month ago, I was ungoogleable. I know, I tried every variation of my name and couldn’t find anything, even after looking through 10 pages of results. Today, when I Google “Andrew VanWagoner”, my LinkedIn profile is the first result. It has a link to this blog, and one to the site for my never-finished book. “The TaleCrafter” yields this blog and my book’s site again. As I searched, I was glad to find I had kept my email, phone number, and address inconspicuous. Yet, if stalkers could access my college directory or Facebook profile, they would have all my contact information and more.</p>\n<p>What can average Joe do to keep himself from prying eyes? In this age: nothing. Every site worth participating in requires at least an email, if not a phone number and address. I’m not suggesting Joe stay off the internet, refuse to use phones, or lock himself in his apartment; I’m simply saying that what he does is usually visible, so he should keep his MySpace profile–and his life–clean. He may not keep his privacy, but he can still keep his decency.</p>\n<p>Additional reading: <a href=\"http://cs404.comfoltey.com/?p=5\" title=\"Privacy vs. Productivity\" target=\"_blank\" rel=\"noopener\">Privacy vs. Productivity</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>A security hole in MySpace, which emerged last fall, spilled at least 17 gigabytes of photos into the public. A significant portion of the images came from “private” profiles. Learning this persuaded me to check on my “private” information and reinforced my hesitation to socialize online.</p>\n<p>A month ago, I was ungoogleable. I know, I tried every variation of my name and couldn’t find anything, even after looking through 10 pages of results. Today, when I Google “Andrew VanWagoner”, my LinkedIn profile is the first result. It has a link to this blog, and one to the site for my never-finished book. “The TaleCrafter” yields this blog and my book’s site again. As I searched, I was glad to find I had kept my email, phone number, and address inconspicuous. Yet, if stalkers could access my college directory or Facebook profile, they would have all my contact information and more.</p>\n<p>What can average Joe do to keep himself from prying eyes? In this age: nothing. Every site worth participating in requires at least an email, if not a phone number and address. I’m not suggesting Joe stay off the internet, refuse to use phones, or lock himself in his apartment; I’m simply saying that what he does is usually visible, so he should keep his MySpace profile–and his life–clean. He may not keep his privacy, but he can still keep his decency.</p>\n<p>Additional reading: <a href=\"http://cs404.comfoltey.com/?p=5\" title=\"Privacy vs. Productivity\" target=\"_blank\" rel=\"noopener\">Privacy vs. Productivity</a></p>\n"},{"title":"On Pattern Hating","id":"126","date":"2011-10-08T04:50:21.000Z","_content":"\nI have long considered myself a Java hater. I now think it really has nothing to do with the language itself. Sure it was easy to point at slow performance (hasn't been true for a long time now), or mourn for missing syntactic sugar (Pattern.compile('abc', Pattern.CASE_INSENSITIVE) vs /abc/i), but really I think my problem with Java is really just a problem with the mindset I have observed in novice programmers (with Java usually being their first language).\n\n**The problem is with patterns.**\n\nPatterns are great. They provide a toolbox that can lead developers on the road to \"best practice\". But...\n\n**Patterns are a poor substitute for problem solving.**\n\nIt doesn't matter if you know how to make a Singleton, even if you know when a Singleton is useful, if the problem at hand is improving report speed. You need to know math, you need to know computation, and you need to find the unnecessary work being done. It's possible we'll use a Singleton, but it won't be the solution to the problem.\n\nIn an interview, if I ask for code to find the most common words in a bunch of text files, \"public class WordRanker {\" is unimportant. I've seen a few programmers struggle for the first few minutes to figure out if it should be a class, a function, or what language to use. But once, I was impressed by someone who quickly figured out what they wanted to do, and then said, \"I'd google how to do that.\"\n\nThe pattern is accidental complexity. Problem solving is essential complexity.","source":"_posts/on-pattern-hating.md","raw":"title: On Pattern Hating\ntags:\n  - Java\n  - patterns\n  - problem solving\nid: 126\ncategories:\n  - General\ndate: 2011-10-07 22:50:21\n---\n\nI have long considered myself a Java hater. I now think it really has nothing to do with the language itself. Sure it was easy to point at slow performance (hasn't been true for a long time now), or mourn for missing syntactic sugar (Pattern.compile('abc', Pattern.CASE_INSENSITIVE) vs /abc/i), but really I think my problem with Java is really just a problem with the mindset I have observed in novice programmers (with Java usually being their first language).\n\n**The problem is with patterns.**\n\nPatterns are great. They provide a toolbox that can lead developers on the road to \"best practice\". But...\n\n**Patterns are a poor substitute for problem solving.**\n\nIt doesn't matter if you know how to make a Singleton, even if you know when a Singleton is useful, if the problem at hand is improving report speed. You need to know math, you need to know computation, and you need to find the unnecessary work being done. It's possible we'll use a Singleton, but it won't be the solution to the problem.\n\nIn an interview, if I ask for code to find the most common words in a bunch of text files, \"public class WordRanker {\" is unimportant. I've seen a few programmers struggle for the first few minutes to figure out if it should be a class, a function, or what language to use. But once, I was impressed by someone who quickly figured out what they wanted to do, and then said, \"I'd google how to do that.\"\n\nThe pattern is accidental complexity. Problem solving is essential complexity.","slug":"on-pattern-hating","published":1,"updated":"2018-05-08T17:28:54.326Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei69002cv1pprh8q4ndk","content":"<p>I have long considered myself a Java hater. I now think it really has nothing to do with the language itself. Sure it was easy to point at slow performance (hasn’t been true for a long time now), or mourn for missing syntactic sugar (Pattern.compile(‘abc’, Pattern.CASE_INSENSITIVE) vs /abc/i), but really I think my problem with Java is really just a problem with the mindset I have observed in novice programmers (with Java usually being their first language).</p>\n<p><strong>The problem is with patterns.</strong></p>\n<p>Patterns are great. They provide a toolbox that can lead developers on the road to “best practice”. But…</p>\n<p><strong>Patterns are a poor substitute for problem solving.</strong></p>\n<p>It doesn’t matter if you know how to make a Singleton, even if you know when a Singleton is useful, if the problem at hand is improving report speed. You need to know math, you need to know computation, and you need to find the unnecessary work being done. It’s possible we’ll use a Singleton, but it won’t be the solution to the problem.</p>\n<p>In an interview, if I ask for code to find the most common words in a bunch of text files, “public class WordRanker {“ is unimportant. I’ve seen a few programmers struggle for the first few minutes to figure out if it should be a class, a function, or what language to use. But once, I was impressed by someone who quickly figured out what they wanted to do, and then said, “I’d google how to do that.”</p>\n<p>The pattern is accidental complexity. Problem solving is essential complexity.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>I have long considered myself a Java hater. I now think it really has nothing to do with the language itself. Sure it was easy to point at slow performance (hasn’t been true for a long time now), or mourn for missing syntactic sugar (Pattern.compile(‘abc’, Pattern.CASE_INSENSITIVE) vs /abc/i), but really I think my problem with Java is really just a problem with the mindset I have observed in novice programmers (with Java usually being their first language).</p>\n<p><strong>The problem is with patterns.</strong></p>\n<p>Patterns are great. They provide a toolbox that can lead developers on the road to “best practice”. But…</p>\n<p><strong>Patterns are a poor substitute for problem solving.</strong></p>\n<p>It doesn’t matter if you know how to make a Singleton, even if you know when a Singleton is useful, if the problem at hand is improving report speed. You need to know math, you need to know computation, and you need to find the unnecessary work being done. It’s possible we’ll use a Singleton, but it won’t be the solution to the problem.</p>\n<p>In an interview, if I ask for code to find the most common words in a bunch of text files, “public class WordRanker {“ is unimportant. I’ve seen a few programmers struggle for the first few minutes to figure out if it should be a class, a function, or what language to use. But once, I was impressed by someone who quickly figured out what they wanted to do, and then said, “I’d google how to do that.”</p>\n<p>The pattern is accidental complexity. Problem solving is essential complexity.</p>\n"},{"title":"The Bazaar and the Bizarre","id":"19","date":"2008-03-27T18:08:30.000Z","_content":"\nBefore installing the first service pack for Vista on my parent's computer, it less-than-politely told me that it was dumping physical memory. The famed blue screen of death lives in on Microsoft's newest operating system. What was surprising though, was to see a few days prior to that my friend's Mac inform him that he needed to restart his computer. The kernel had panicked. I have not yet seen this sort of display on Ubuntu, though it has gone kaput a few times. I am sure that every type of system has had the hiccups before.\n\nSo then, what makes the Windows' _Blue Screen of Death_ so notorious?\n\nIt's bizarre, and here's why:\n\n1.  Windows has a larger user base with a lower average technical aptitude, so when the the screen suddenly changes color and you lose control of the system, it startles people.\n2.  There is nothing you can do about it.\nMac OS X avoids some the frustrations of #2, due to a much more polite delivery, and the seemly lower frequency of the kernel panicking. Linux though, at least in my experience, averages more hiccups than Windows. It manages the problems by giving the users a way to help fix the issue. Linux users go into the experience with the knowledge that their software does have bugs, but they will be fixed quickly once they are found. Most Windows and more especially Mac users don't anticipate that their expensive computers could ever fail. They believe the lie that all bugs can be found, and were found before you bought the product.\n\nThese days, though, the situation is improving because most people have experienced enough problems to give up the fantasy of a perfect system. In addition, the bazaar mentality in Linux development has opened our eyes to the power that the end-users can have in minimizing and repairing the bizarre problems that are inevitable in software use.\n\nFurther Reading:\n\n*   [The Cathedral and the Bazaar - Eric Steven Raymond](http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/index.html#catbmain \"The Cathedral and the Bazaar\")","source":"_posts/the-bazaar-and-the-bizarre.md","raw":"title: The Bazaar and the Bizarre\ntags:\n  - bazaar\n  - bizarre\n  - blue screen of death\n  - Linux\n  - Mac OS X\n  - Ubuntu\n  - Windows\nid: 19\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-03-27 12:08:30\n---\n\nBefore installing the first service pack for Vista on my parent's computer, it less-than-politely told me that it was dumping physical memory. The famed blue screen of death lives in on Microsoft's newest operating system. What was surprising though, was to see a few days prior to that my friend's Mac inform him that he needed to restart his computer. The kernel had panicked. I have not yet seen this sort of display on Ubuntu, though it has gone kaput a few times. I am sure that every type of system has had the hiccups before.\n\nSo then, what makes the Windows' _Blue Screen of Death_ so notorious?\n\nIt's bizarre, and here's why:\n\n1.  Windows has a larger user base with a lower average technical aptitude, so when the the screen suddenly changes color and you lose control of the system, it startles people.\n2.  There is nothing you can do about it.\nMac OS X avoids some the frustrations of #2, due to a much more polite delivery, and the seemly lower frequency of the kernel panicking. Linux though, at least in my experience, averages more hiccups than Windows. It manages the problems by giving the users a way to help fix the issue. Linux users go into the experience with the knowledge that their software does have bugs, but they will be fixed quickly once they are found. Most Windows and more especially Mac users don't anticipate that their expensive computers could ever fail. They believe the lie that all bugs can be found, and were found before you bought the product.\n\nThese days, though, the situation is improving because most people have experienced enough problems to give up the fantasy of a perfect system. In addition, the bazaar mentality in Linux development has opened our eyes to the power that the end-users can have in minimizing and repairing the bizarre problems that are inevitable in software use.\n\nFurther Reading:\n\n*   [The Cathedral and the Bazaar - Eric Steven Raymond](http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/index.html#catbmain \"The Cathedral and the Bazaar\")","slug":"the-bazaar-and-the-bizarre","published":1,"updated":"2018-05-08T17:28:54.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei69002ev1ppmev526ck","content":"<p>Before installing the first service pack for Vista on my parent’s computer, it less-than-politely told me that it was dumping physical memory. The famed blue screen of death lives in on Microsoft’s newest operating system. What was surprising though, was to see a few days prior to that my friend’s Mac inform him that he needed to restart his computer. The kernel had panicked. I have not yet seen this sort of display on Ubuntu, though it has gone kaput a few times. I am sure that every type of system has had the hiccups before.</p>\n<p>So then, what makes the Windows’ <em>Blue Screen of Death</em> so notorious?</p>\n<p>It’s bizarre, and here’s why:</p>\n<ol>\n<li>Windows has a larger user base with a lower average technical aptitude, so when the the screen suddenly changes color and you lose control of the system, it startles people.</li>\n<li>There is nothing you can do about it.<br>Mac OS X avoids some the frustrations of #2, due to a much more polite delivery, and the seemly lower frequency of the kernel panicking. Linux though, at least in my experience, averages more hiccups than Windows. It manages the problems by giving the users a way to help fix the issue. Linux users go into the experience with the knowledge that their software does have bugs, but they will be fixed quickly once they are found. Most Windows and more especially Mac users don’t anticipate that their expensive computers could ever fail. They believe the lie that all bugs can be found, and were found before you bought the product.</li>\n</ol>\n<p>These days, though, the situation is improving because most people have experienced enough problems to give up the fantasy of a perfect system. In addition, the bazaar mentality in Linux development has opened our eyes to the power that the end-users can have in minimizing and repairing the bizarre problems that are inevitable in software use.</p>\n<p>Further Reading:</p>\n<ul>\n<li><a href=\"http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/index.html#catbmain\" title=\"The Cathedral and the Bazaar\" target=\"_blank\" rel=\"noopener\">The Cathedral and the Bazaar - Eric Steven Raymond</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Before installing the first service pack for Vista on my parent’s computer, it less-than-politely told me that it was dumping physical memory. The famed blue screen of death lives in on Microsoft’s newest operating system. What was surprising though, was to see a few days prior to that my friend’s Mac inform him that he needed to restart his computer. The kernel had panicked. I have not yet seen this sort of display on Ubuntu, though it has gone kaput a few times. I am sure that every type of system has had the hiccups before.</p>\n<p>So then, what makes the Windows’ <em>Blue Screen of Death</em> so notorious?</p>\n<p>It’s bizarre, and here’s why:</p>\n<ol>\n<li>Windows has a larger user base with a lower average technical aptitude, so when the the screen suddenly changes color and you lose control of the system, it startles people.</li>\n<li>There is nothing you can do about it.<br>Mac OS X avoids some the frustrations of #2, due to a much more polite delivery, and the seemly lower frequency of the kernel panicking. Linux though, at least in my experience, averages more hiccups than Windows. It manages the problems by giving the users a way to help fix the issue. Linux users go into the experience with the knowledge that their software does have bugs, but they will be fixed quickly once they are found. Most Windows and more especially Mac users don’t anticipate that their expensive computers could ever fail. They believe the lie that all bugs can be found, and were found before you bought the product.</li>\n</ol>\n<p>These days, though, the situation is improving because most people have experienced enough problems to give up the fantasy of a perfect system. In addition, the bazaar mentality in Linux development has opened our eyes to the power that the end-users can have in minimizing and repairing the bizarre problems that are inevitable in software use.</p>\n<p>Further Reading:</p>\n<ul>\n<li><a href=\"http://catb.org/~esr/writings/cathedral-bazaar/cathedral-bazaar/index.html#catbmain\" title=\"The Cathedral and the Bazaar\" target=\"_blank\" rel=\"noopener\">The Cathedral and the Bazaar - Eric Steven Raymond</a></li>\n</ul>\n"},{"title":"The Pen is Mighty","id":"9","date":"2008-01-31T03:47:01.000Z","_content":"\nNearly all that we think - and everything we say - are in words. Our ability to transmit information relies on language. Words invoke emotions. Words record dreams. Doing well in school is often a matter of learning the right words. They give us the ability to grasp new concepts, and without them, we have no expression for our understanding. Perhaps that's why God was called the Word and Christ Alpha and Omega.\n","source":"_posts/the-pen-is-mighty.md","raw":"title: The Pen is Mighty\ntags:\n  - communication\n  - expression\n  - language\n  - words\nid: 9\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-01-30 20:47:01\n---\n\nNearly all that we think - and everything we say - are in words. Our ability to transmit information relies on language. Words invoke emotions. Words record dreams. Doing well in school is often a matter of learning the right words. They give us the ability to grasp new concepts, and without them, we have no expression for our understanding. Perhaps that's why God was called the Word and Christ Alpha and Omega.\n","slug":"the-pen-is-mighty","published":1,"updated":"2018-05-08T17:28:54.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei6a002hv1ppuwfr38nd","content":"<p>Nearly all that we think - and everything we say - are in words. Our ability to transmit information relies on language. Words invoke emotions. Words record dreams. Doing well in school is often a matter of learning the right words. They give us the ability to grasp new concepts, and without them, we have no expression for our understanding. Perhaps that’s why God was called the Word and Christ Alpha and Omega.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Nearly all that we think - and everything we say - are in words. Our ability to transmit information relies on language. Words invoke emotions. Words record dreams. Doing well in school is often a matter of learning the right words. They give us the ability to grasp new concepts, and without them, we have no expression for our understanding. Perhaps that’s why God was called the Word and Christ Alpha and Omega.</p>\n"},{"title":"Vista: Linux's Best Friend","id":"12","date":"2008-02-21T05:04:54.000Z","_content":"\nMicrosoft shot themselves in the foot just as open-source solutions are becoming competitive. As an Ubuntu fan I have been continually impressed with each successive release, but I always have kept a Windows partition. So, when Vista was released I tried it. It was new, shiny and full of promises.  At first I was amazed by the sleek interface, but I quickly ran into UAC, and driver incompatibility.  After a few weeks of frustration, I reformatted my hard drive and put XP back on dual-boot with Ubuntu.\n\nMicrosoft again promised to compete, announcing Vista SP1, but after delays, bugs and bad press, Vista looks unrecoverable. Microsoft had hoped to assert its dominance, but what was to be Linux's worst enemy is turning out be Linux's best friend. Though XP pro is still very popular, with more and more software and hardware showing up in the Tux, Windows' reign will soon end.","source":"_posts/vista-linuxs-best-friend.md","raw":"title: \"Vista: Linux's Best Friend\"\ntags:\n  - Linux\n  - Operating Systems\n  - Unix\n  - Vista\n  - Vista SP1\n  - Windows XP\nid: 12\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-02-20 22:04:54\n---\n\nMicrosoft shot themselves in the foot just as open-source solutions are becoming competitive. As an Ubuntu fan I have been continually impressed with each successive release, but I always have kept a Windows partition. So, when Vista was released I tried it. It was new, shiny and full of promises.  At first I was amazed by the sleek interface, but I quickly ran into UAC, and driver incompatibility.  After a few weeks of frustration, I reformatted my hard drive and put XP back on dual-boot with Ubuntu.\n\nMicrosoft again promised to compete, announcing Vista SP1, but after delays, bugs and bad press, Vista looks unrecoverable. Microsoft had hoped to assert its dominance, but what was to be Linux's worst enemy is turning out be Linux's best friend. Though XP pro is still very popular, with more and more software and hardware showing up in the Tux, Windows' reign will soon end.","slug":"vista-linuxs-best-friend","published":1,"updated":"2018-05-08T17:28:54.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei6b002jv1pp40x6rwoj","content":"<p>Microsoft shot themselves in the foot just as open-source solutions are becoming competitive. As an Ubuntu fan I have been continually impressed with each successive release, but I always have kept a Windows partition. So, when Vista was released I tried it. It was new, shiny and full of promises.  At first I was amazed by the sleek interface, but I quickly ran into UAC, and driver incompatibility.  After a few weeks of frustration, I reformatted my hard drive and put XP back on dual-boot with Ubuntu.</p>\n<p>Microsoft again promised to compete, announcing Vista SP1, but after delays, bugs and bad press, Vista looks unrecoverable. Microsoft had hoped to assert its dominance, but what was to be Linux’s worst enemy is turning out be Linux’s best friend. Though XP pro is still very popular, with more and more software and hardware showing up in the Tux, Windows’ reign will soon end.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Microsoft shot themselves in the foot just as open-source solutions are becoming competitive. As an Ubuntu fan I have been continually impressed with each successive release, but I always have kept a Windows partition. So, when Vista was released I tried it. It was new, shiny and full of promises.  At first I was amazed by the sleek interface, but I quickly ran into UAC, and driver incompatibility.  After a few weeks of frustration, I reformatted my hard drive and put XP back on dual-boot with Ubuntu.</p>\n<p>Microsoft again promised to compete, announcing Vista SP1, but after delays, bugs and bad press, Vista looks unrecoverable. Microsoft had hoped to assert its dominance, but what was to be Linux’s worst enemy is turning out be Linux’s best friend. Though XP pro is still very popular, with more and more software and hardware showing up in the Tux, Windows’ reign will soon end.</p>\n"},{"title":"Some thoughts on Web 4.0","id":"75","date":"2011-04-16T13:57:57.000Z","_content":"\nThe web has undergone some significant changes since its inception. 1.0 consisted mostly of HTML documents, with simple CSS style, and little or no JavaScript interaction. 2.0 was the AJAX revolution, making dynamic sites with complex JavaScript. Some have suggested we are already in 3.0, with HTML5 and SVG well supported in the latest version of every major browser. What I'd like to talk about, is what I wish would come next.\n\nAs many who are immersed in front-end web development have noticed, HTML and SVG have different DOMs, different styles, and competing animation tools. They have been getting better, with HTML5's inline SVG support, and browsers beginning to bring each markup's features to the other, but the inconsistencies are still painful, and and they make implementation both for web and browser developers sub-optimal.\n\nWhat I would love to see is something akin to the following document:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Fancy HTML+SVG</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <defs>\n    <path id=\"logo\" desc=\"My Fancy SVG Logo\" d=\"M59,0 l69,69 h-15 l-44,44 v15 l-69-69 h15 l45-45 5,5 -45,45 44,44 44-44 -49-49 z  M59,44 c0-8,10-8,10,0 v40 c0,8-10,8-10,0 z\" />\n    <filter id=\"soft_blur\"><feGaussianBlur in=\"SourceGraphic\" stdDeviation=\".5\"/></filter>\n  </defs>\n  <link rel=\"shortcut icon\" sizes=\"16x16 24x24 32x32 48x48\" href=\"#logo\" />\n</head>\n<body>\n  <header>\n    <a id=\"home\" href=\".\"><use href=\"#logo\" /></a>\n    <h1>The TaleCrafter&#039;s Scribbles<h1>\n    <h2>notes about science, fiction, and faith… but mostly web development</h2>\n  </header>\n  <article>My Article text and images and stuff go here</article>\n  <footer>Boring Legal and maybe locale selection in here</footer>\n  <script src=\"script.js\" async defer></script>\n</body>\n</html>\n```\n\nstyles.css\n```css\n  #logo { background:#111; } /* applies to everywhere <use>d, including favicon */\n  #home { width:64px; height:64px; float:left; }\n  #home path { transform:scale(.5); transition:background .5s ease; }\n  #home path:hover { background:#0d0dc5; }\n  h1 { filter:url(#soft_blur); transition:filter .5s linear; }\n  h1:hover { filter:none; }\n  /* ... lots more styles ... */\n```\n\nscript.js\n```javascript\n  document.querySelector('#home path').addEventListener('click', /* open menu or something useful */);\n```\n\nSummary of things that would be cool:\n\n*   no need for foreignObject or anything like that, simply mix and match tags\n*   put all the useful attributes in the same namespace (make use is useful without xlink: namespace)\n*   css transitions & animations on svg styles (properties would also be nice)\n*   defs and use in html documents\n*   filters on html elements (Firefox is already working on this)\n*   unify styles like background and fill\n*   JavaScript DOM API identical\nIn short SVG and HTML would be one and the same. You would style both with the same css.\n\nSome nitpicks:\n\n*   I'm not sold on defining filters in markup, then using in style. It feels... odd. Why not define in style? (Oh no, that might be too much like IE's filters! Gasp!)\n*   Animating is still a crapshoot. It feels like it should be in JavaScript, but declarative syntax is so much simpler, and easier to optimize for browsers. Some SMIL animations work in some browsers. CSS animations are still nacent but promising. (Even IE looks like it might implement it in 'native HTML5'. Sorry, couldn't help myself.) Still, JavaScript is the only reliable way right now.\n\nLet me hear an Amen, or let me know what I'm missing. Leave a comment and let's talk about it.\n","source":"_posts/some-thoughts-on-web-4-0.md","raw":"title: Some thoughts on Web 4.0\ntags:\n  - ajax\n  - html5\n  - svg\nid: 75\ncategories:\n  - JavaScript\ndate: 2011-04-16 07:57:57\n---\n\nThe web has undergone some significant changes since its inception. 1.0 consisted mostly of HTML documents, with simple CSS style, and little or no JavaScript interaction. 2.0 was the AJAX revolution, making dynamic sites with complex JavaScript. Some have suggested we are already in 3.0, with HTML5 and SVG well supported in the latest version of every major browser. What I'd like to talk about, is what I wish would come next.\n\nAs many who are immersed in front-end web development have noticed, HTML and SVG have different DOMs, different styles, and competing animation tools. They have been getting better, with HTML5's inline SVG support, and browsers beginning to bring each markup's features to the other, but the inconsistencies are still painful, and and they make implementation both for web and browser developers sub-optimal.\n\nWhat I would love to see is something akin to the following document:\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <title>Fancy HTML+SVG</title>\n  <link rel=\"stylesheet\" href=\"styles.css\" />\n  <defs>\n    <path id=\"logo\" desc=\"My Fancy SVG Logo\" d=\"M59,0 l69,69 h-15 l-44,44 v15 l-69-69 h15 l45-45 5,5 -45,45 44,44 44-44 -49-49 z  M59,44 c0-8,10-8,10,0 v40 c0,8-10,8-10,0 z\" />\n    <filter id=\"soft_blur\"><feGaussianBlur in=\"SourceGraphic\" stdDeviation=\".5\"/></filter>\n  </defs>\n  <link rel=\"shortcut icon\" sizes=\"16x16 24x24 32x32 48x48\" href=\"#logo\" />\n</head>\n<body>\n  <header>\n    <a id=\"home\" href=\".\"><use href=\"#logo\" /></a>\n    <h1>The TaleCrafter&#039;s Scribbles<h1>\n    <h2>notes about science, fiction, and faith… but mostly web development</h2>\n  </header>\n  <article>My Article text and images and stuff go here</article>\n  <footer>Boring Legal and maybe locale selection in here</footer>\n  <script src=\"script.js\" async defer></script>\n</body>\n</html>\n```\n\nstyles.css\n```css\n  #logo { background:#111; } /* applies to everywhere <use>d, including favicon */\n  #home { width:64px; height:64px; float:left; }\n  #home path { transform:scale(.5); transition:background .5s ease; }\n  #home path:hover { background:#0d0dc5; }\n  h1 { filter:url(#soft_blur); transition:filter .5s linear; }\n  h1:hover { filter:none; }\n  /* ... lots more styles ... */\n```\n\nscript.js\n```javascript\n  document.querySelector('#home path').addEventListener('click', /* open menu or something useful */);\n```\n\nSummary of things that would be cool:\n\n*   no need for foreignObject or anything like that, simply mix and match tags\n*   put all the useful attributes in the same namespace (make use is useful without xlink: namespace)\n*   css transitions & animations on svg styles (properties would also be nice)\n*   defs and use in html documents\n*   filters on html elements (Firefox is already working on this)\n*   unify styles like background and fill\n*   JavaScript DOM API identical\nIn short SVG and HTML would be one and the same. You would style both with the same css.\n\nSome nitpicks:\n\n*   I'm not sold on defining filters in markup, then using in style. It feels... odd. Why not define in style? (Oh no, that might be too much like IE's filters! Gasp!)\n*   Animating is still a crapshoot. It feels like it should be in JavaScript, but declarative syntax is so much simpler, and easier to optimize for browsers. Some SMIL animations work in some browsers. CSS animations are still nacent but promising. (Even IE looks like it might implement it in 'native HTML5'. Sorry, couldn't help myself.) Still, JavaScript is the only reliable way right now.\n\nLet me hear an Amen, or let me know what I'm missing. Leave a comment and let's talk about it.\n","slug":"some-thoughts-on-web-4-0","published":1,"updated":"2018-05-08T17:28:54.327Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei6d002mv1ppx0wap8jo","content":"<p>The web has undergone some significant changes since its inception. 1.0 consisted mostly of HTML documents, with simple CSS style, and little or no JavaScript interaction. 2.0 was the AJAX revolution, making dynamic sites with complex JavaScript. Some have suggested we are already in 3.0, with HTML5 and SVG well supported in the latest version of every major browser. What I’d like to talk about, is what I wish would come next.</p>\n<p>As many who are immersed in front-end web development have noticed, HTML and SVG have different DOMs, different styles, and competing animation tools. They have been getting better, with HTML5’s inline SVG support, and browsers beginning to bring each markup’s features to the other, but the inconsistencies are still painful, and and they make implementation both for web and browser developers sub-optimal.</p>\n<p>What I would love to see is something akin to the following document:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Fancy HTML+SVG<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"logo\"</span> <span class=\"attr\">desc</span>=<span class=\"string\">\"My Fancy SVG Logo\"</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M59,0 l69,69 h-15 l-44,44 v15 l-69-69 h15 l45-45 5,5 -45,45 44,44 44-44 -49-49 z  M59,44 c0-8,10-8,10,0 v40 c0,8-10,8-10,0 z\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">id</span>=<span class=\"string\">\"soft_blur\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">feGaussianBlur</span> <span class=\"attr\">in</span>=<span class=\"string\">\"SourceGraphic\"</span> <span class=\"attr\">stdDeviation</span>=<span class=\"string\">\".5\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"16x16 24x24 32x32 48x48\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#logo\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"home\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\".\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#logo\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The TaleCrafter&amp;#039;s Scribbles<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>notes about science, fiction, and faith… but mostly web development<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span>My Article text and images and stuff go here<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>Boring Legal and maybe locale selection in here<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span> <span class=\"attr\">async</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>styles.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#logo</span> &#123; <span class=\"attribute\">background</span>:<span class=\"number\">#111</span>; &#125; <span class=\"comment\">/* applies to everywhere &lt;use&gt;d, including favicon */</span></span><br><span class=\"line\"><span class=\"selector-id\">#home</span> &#123; <span class=\"attribute\">width</span>:<span class=\"number\">64px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">64px</span>; <span class=\"attribute\">float</span>:left; &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#home</span> <span class=\"selector-tag\">path</span> &#123; <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(.5); <span class=\"attribute\">transition</span>:background .<span class=\"number\">5s</span> ease; &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#home</span> <span class=\"selector-tag\">path</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">background</span>:<span class=\"number\">#0d0dc5</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">filter</span>:<span class=\"built_in\">url</span>(#soft_blur); <span class=\"attribute\">transition</span>:filter .<span class=\"number\">5s</span> linear; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">filter</span>:none; &#125;</span><br><span class=\"line\"><span class=\"comment\">/* ... lots more styles ... */</span></span><br></pre></td></tr></table></figure></p>\n<p>script.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#home path'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"comment\">/* open menu or something useful */</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Summary of things that would be cool:</p>\n<ul>\n<li>no need for foreignObject or anything like that, simply mix and match tags</li>\n<li>put all the useful attributes in the same namespace (make use is useful without xlink: namespace)</li>\n<li>css transitions &amp; animations on svg styles (properties would also be nice)</li>\n<li>defs and use in html documents</li>\n<li>filters on html elements (Firefox is already working on this)</li>\n<li>unify styles like background and fill</li>\n<li>JavaScript DOM API identical<br>In short SVG and HTML would be one and the same. You would style both with the same css.</li>\n</ul>\n<p>Some nitpicks:</p>\n<ul>\n<li>I’m not sold on defining filters in markup, then using in style. It feels… odd. Why not define in style? (Oh no, that might be too much like IE’s filters! Gasp!)</li>\n<li>Animating is still a crapshoot. It feels like it should be in JavaScript, but declarative syntax is so much simpler, and easier to optimize for browsers. Some SMIL animations work in some browsers. CSS animations are still nacent but promising. (Even IE looks like it might implement it in ‘native HTML5’. Sorry, couldn’t help myself.) Still, JavaScript is the only reliable way right now.</li>\n</ul>\n<p>Let me hear an Amen, or let me know what I’m missing. Leave a comment and let’s talk about it.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>The web has undergone some significant changes since its inception. 1.0 consisted mostly of HTML documents, with simple CSS style, and little or no JavaScript interaction. 2.0 was the AJAX revolution, making dynamic sites with complex JavaScript. Some have suggested we are already in 3.0, with HTML5 and SVG well supported in the latest version of every major browser. What I’d like to talk about, is what I wish would come next.</p>\n<p>As many who are immersed in front-end web development have noticed, HTML and SVG have different DOMs, different styles, and competing animation tools. They have been getting better, with HTML5’s inline SVG support, and browsers beginning to bring each markup’s features to the other, but the inconsistencies are still painful, and and they make implementation both for web and browser developers sub-optimal.</p>\n<p>What I would love to see is something akin to the following document:<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Fancy HTML+SVG<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"styles.css\"</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">defs</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">path</span> <span class=\"attr\">id</span>=<span class=\"string\">\"logo\"</span> <span class=\"attr\">desc</span>=<span class=\"string\">\"My Fancy SVG Logo\"</span> <span class=\"attr\">d</span>=<span class=\"string\">\"M59,0 l69,69 h-15 l-44,44 v15 l-69-69 h15 l45-45 5,5 -45,45 44,44 44-44 -49-49 z  M59,44 c0-8,10-8,10,0 v40 c0,8-10,8-10,0 z\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">filter</span> <span class=\"attr\">id</span>=<span class=\"string\">\"soft_blur\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">feGaussianBlur</span> <span class=\"attr\">in</span>=<span class=\"string\">\"SourceGraphic\"</span> <span class=\"attr\">stdDeviation</span>=<span class=\"string\">\".5\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">filter</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">defs</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attr\">sizes</span>=<span class=\"string\">\"16x16 24x24 32x32 48x48\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#logo\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">id</span>=<span class=\"string\">\"home\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\".\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">use</span> <span class=\"attr\">href</span>=<span class=\"string\">\"#logo\"</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>The TaleCrafter&amp;#039;s Scribbles<span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>notes about science, fiction, and faith… but mostly web development<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">article</span>&gt;</span>My Article text and images and stuff go here<span class=\"tag\">&lt;/<span class=\"name\">article</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span>Boring Legal and maybe locale selection in here<span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"script.js\"</span> <span class=\"attr\">async</span> <span class=\"attr\">defer</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>styles.css<br><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#logo</span> &#123; <span class=\"attribute\">background</span>:<span class=\"number\">#111</span>; &#125; <span class=\"comment\">/* applies to everywhere &lt;use&gt;d, including favicon */</span></span><br><span class=\"line\"><span class=\"selector-id\">#home</span> &#123; <span class=\"attribute\">width</span>:<span class=\"number\">64px</span>; <span class=\"attribute\">height</span>:<span class=\"number\">64px</span>; <span class=\"attribute\">float</span>:left; &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#home</span> <span class=\"selector-tag\">path</span> &#123; <span class=\"attribute\">transform</span>:<span class=\"built_in\">scale</span>(.5); <span class=\"attribute\">transition</span>:background .<span class=\"number\">5s</span> ease; &#125;</span><br><span class=\"line\"><span class=\"selector-id\">#home</span> <span class=\"selector-tag\">path</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">background</span>:<span class=\"number\">#0d0dc5</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span> &#123; <span class=\"attribute\">filter</span>:<span class=\"built_in\">url</span>(#soft_blur); <span class=\"attribute\">transition</span>:filter .<span class=\"number\">5s</span> linear; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">h1</span><span class=\"selector-pseudo\">:hover</span> &#123; <span class=\"attribute\">filter</span>:none; &#125;</span><br><span class=\"line\"><span class=\"comment\">/* ... lots more styles ... */</span></span><br></pre></td></tr></table></figure></p>\n<p>script.js<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">'#home path'</span>).addEventListener(<span class=\"string\">'click'</span>, <span class=\"comment\">/* open menu or something useful */</span>);</span><br></pre></td></tr></table></figure></p>\n<p>Summary of things that would be cool:</p>\n<ul>\n<li>no need for foreignObject or anything like that, simply mix and match tags</li>\n<li>put all the useful attributes in the same namespace (make use is useful without xlink: namespace)</li>\n<li>css transitions &amp; animations on svg styles (properties would also be nice)</li>\n<li>defs and use in html documents</li>\n<li>filters on html elements (Firefox is already working on this)</li>\n<li>unify styles like background and fill</li>\n<li>JavaScript DOM API identical<br>In short SVG and HTML would be one and the same. You would style both with the same css.</li>\n</ul>\n<p>Some nitpicks:</p>\n<ul>\n<li>I’m not sold on defining filters in markup, then using in style. It feels… odd. Why not define in style? (Oh no, that might be too much like IE’s filters! Gasp!)</li>\n<li>Animating is still a crapshoot. It feels like it should be in JavaScript, but declarative syntax is so much simpler, and easier to optimize for browsers. Some SMIL animations work in some browsers. CSS animations are still nacent but promising. (Even IE looks like it might implement it in ‘native HTML5’. Sorry, couldn’t help myself.) Still, JavaScript is the only reliable way right now.</li>\n</ul>\n<p>Let me hear an Amen, or let me know what I’m missing. Leave a comment and let’s talk about it.</p>\n"},{"title":"Welcome to the Great Northwest","id":"26","date":"2008-05-18T23:20:40.000Z","_content":"\nJulie, Abby, and I have left Provo for the summer.  I have started an internship as a Software Developer with Amazon.com.  We are living in downtown Seattle, and are still recovering from culture shock.  Hopefully, I will soon get back to writing regularly.","source":"_posts/welcome-to-the-great-northwest.md","raw":"title: Welcome to the Great Northwest\ntags:\n  - family\n  - moving\n  - Seattle\nid: 26\ncategories:\n  - General\ndate: 2008-05-18 17:20:40\n---\n\nJulie, Abby, and I have left Provo for the summer.  I have started an internship as a Software Developer with Amazon.com.  We are living in downtown Seattle, and are still recovering from culture shock.  Hopefully, I will soon get back to writing regularly.","slug":"welcome-to-the-great-northwest","published":1,"updated":"2018-05-08T17:28:54.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei6e002ov1ppmkqujjzm","content":"<p>Julie, Abby, and I have left Provo for the summer.  I have started an internship as a Software Developer with Amazon.com.  We are living in downtown Seattle, and are still recovering from culture shock.  Hopefully, I will soon get back to writing regularly.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Julie, Abby, and I have left Provo for the summer.  I have started an internship as a Software Developer with Amazon.com.  We are living in downtown Seattle, and are still recovering from culture shock.  Hopefully, I will soon get back to writing regularly.</p>\n"},{"title":"Why We Are Hooked","id":"21","date":"2008-04-01T15:56:08.000Z","_content":"\nAs people have slowly discovered the Internet, many have found they are spending more time online than they have available. Along with the overwhelming wealth of knowledge on the Internet, is the ability to connect with other people. This connection, in my opinion, is what hooks us. If you look in gaming, it is the MMORPGs, and other games that allow interaction with other players that keep loyal players for extended periods of time. If you see other successful Internet applications like email, IM, social networks, and blogs, these all appeal to our social nature. The paradox is that often when we are spending too much time being social online, we neglect our face-to-face relationships.","source":"_posts/why-we-are-hooked.md","raw":"title: Why We Are Hooked\ntags:\n  - connection\n  - gaming\n  - internet\n  - relationships\n  - social\nid: 21\ncategories:\n  - Ethics and Computers in Society\ndate: 2008-04-01 09:56:08\n---\n\nAs people have slowly discovered the Internet, many have found they are spending more time online than they have available. Along with the overwhelming wealth of knowledge on the Internet, is the ability to connect with other people. This connection, in my opinion, is what hooks us. If you look in gaming, it is the MMORPGs, and other games that allow interaction with other players that keep loyal players for extended periods of time. If you see other successful Internet applications like email, IM, social networks, and blogs, these all appeal to our social nature. The paradox is that often when we are spending too much time being social online, we neglect our face-to-face relationships.","slug":"why-we-are-hooked","published":1,"updated":"2018-05-08T17:28:54.328Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwavei6g002rv1ppps62o5u4","content":"<p>As people have slowly discovered the Internet, many have found they are spending more time online than they have available. Along with the overwhelming wealth of knowledge on the Internet, is the ability to connect with other people. This connection, in my opinion, is what hooks us. If you look in gaming, it is the MMORPGs, and other games that allow interaction with other players that keep loyal players for extended periods of time. If you see other successful Internet applications like email, IM, social networks, and blogs, these all appeal to our social nature. The paradox is that often when we are spending too much time being social online, we neglect our face-to-face relationships.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>As people have slowly discovered the Internet, many have found they are spending more time online than they have available. Along with the overwhelming wealth of knowledge on the Internet, is the ability to connect with other people. This connection, in my opinion, is what hooks us. If you look in gaming, it is the MMORPGs, and other games that allow interaction with other players that keep loyal players for extended periods of time. If you see other successful Internet applications like email, IM, social networks, and blogs, these all appeal to our social nature. The paradox is that often when we are spending too much time being social online, we neglect our face-to-face relationships.</p>\n"},{"title":"Who am I?","date":"2018-05-08T20:53:58.000Z","_content":"\n\nFiguring out who we are and how to understand, describe, and present that to other people is a tough challenge. People are complex and dynamic, and rarely fit nicely into some category. Do the things we call ourselves influence who we are?\n\nWe are <del>all</del> usually given an identifier at birth, called a name. They aren't necessarily unique, but often close enough. I am \"Andrew Henry Van Wagoner\". This name is supposed to represent all of me.\n\nMy name isn't necessarily static, though. My family & friends have been calling my \"Andy\" for longer than I can remember, and most of my documents use \"VanWagoner\" (no space) to prevent software from tokenizing my last name incorrectly. My wife, like many people, legally changed her name when we got married. Though my name has an assigned meaning to it (manly), I doubt most people give it any thought beyond inferring my gender.\n\nWhen we introduce ourselves, we rarely lead with our full names. \"I'm Andy.\" Sometimes we include our job function, department, or employer. \"I'm Andy from Instructure.\" This is where it starts to become more descriptive rather than identifying.\n\nOnce connected to the internet, we are given the opportunity to make up our own handle for ourselves. [On the internet, nobody knows you are a dog.](https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you're_a_dog) Am I \"thewol\" (meaning the warrior of light), or \"imnd\" (see what I did there?), or \"boyz_ii_men_iv_ever\"?\n\nIn 2005 I dropped my old \"thewol@msn.com\" email address for the beta Gmail service as \"thetalecrafter@gmail.com\". I figured I was going to make a career out of writing fiction, so it would be a fun way of introducing myself on subsequent online services. \"I'm thetalecrafter.\" I don't remember feeling much attached to my prior \"thewol\", so shedding that identity was painless.\n\nIt didn't take long though for my anticipation of a writing fiction career to turn into an actual writing *software* career. And for more than a decade, I have presented myself with the handle \"thetalecrafter\", giving people the impression, you know, that I craft tales.\n\nJustifying this situation to myself wasn't too hard though, as I *did* have a book I worked on periodically. And the label I had given myself pushed on me more than anything else to keep this book draft around. Over the years, work on my tales went from occasional (once every few weeks) to practically never (once every few years), and the handle continued to insist that *this is who am*.\n\nAs I used more and more services online, my handle \"thetalecrafter\" only became more entrenched. Twitter, GitHub, keybase, etc.\n\nDuring this same time my once exciting email provider, the \"do no evil\" Google, went from being the shining example of making cool things that make the web better, to the stalker who follows you around, and strong arms the competition into adopting their \"standards\".\n\nAs I switched from Googling to searching on Duck Duck Go, and I looked to leave behind \"thetalecrafter\" which beyond being inaccurate, gave me guilt about being the right me, I opted to go back to the name I inherited from ancestors. No matter what else changes in my life, my actual name was always going to be a solid identifier. I registered the domain `vanwagoner.family` and setup a matching email address.\n\nAlas, several services I rely on do not think `.family` is a valid way to end an email address. So for two years now, I have drug along \"thetalecrafter@gmail.com\" as a backup address. I don't craft tales, and I don't like Google.\n\nFinally a straw broke the camel's back, and I decided it was time to really ditch thetalecrafter. The handle, the email address, and the website (this one). On a whim I was looking at domain names, and found that `vanwago.net` was available. That would be a solid alias for `vanwagoner.family`, using a TLD that even AOL recognizes. Once I had the domain, I figured it didn't make a terrible handle either.\n\nHi, I'm \"vanwagonet\". I'm not on Facebook or Twitter these days, but I am on [GitHub](https://github.com/vanwagonet) and [LinkedIn](https://www.linkedin.com/in/andrewvanwagoner), and every now and then I write things down on [this site](https://andy.vanwago.net). I may [spin some tales](/2015/07/25/jumping-the-fold/) [in the future](/2015/06/23/breathless-in-a-new-world/), but even if I don't, I'll still be Andy VanWagoner.\n","source":"_posts/who-am-i.md","raw":"title: Who am I?\ntags:\n  - Andrew\n  - Google\n  - Facebook\n  - social\n  - internet\n  - web\ncategories:\n  - General\ndate: 2018-05-08 14:53:58\n---\n\n\nFiguring out who we are and how to understand, describe, and present that to other people is a tough challenge. People are complex and dynamic, and rarely fit nicely into some category. Do the things we call ourselves influence who we are?\n\nWe are <del>all</del> usually given an identifier at birth, called a name. They aren't necessarily unique, but often close enough. I am \"Andrew Henry Van Wagoner\". This name is supposed to represent all of me.\n\nMy name isn't necessarily static, though. My family & friends have been calling my \"Andy\" for longer than I can remember, and most of my documents use \"VanWagoner\" (no space) to prevent software from tokenizing my last name incorrectly. My wife, like many people, legally changed her name when we got married. Though my name has an assigned meaning to it (manly), I doubt most people give it any thought beyond inferring my gender.\n\nWhen we introduce ourselves, we rarely lead with our full names. \"I'm Andy.\" Sometimes we include our job function, department, or employer. \"I'm Andy from Instructure.\" This is where it starts to become more descriptive rather than identifying.\n\nOnce connected to the internet, we are given the opportunity to make up our own handle for ourselves. [On the internet, nobody knows you are a dog.](https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you're_a_dog) Am I \"thewol\" (meaning the warrior of light), or \"imnd\" (see what I did there?), or \"boyz_ii_men_iv_ever\"?\n\nIn 2005 I dropped my old \"thewol@msn.com\" email address for the beta Gmail service as \"thetalecrafter@gmail.com\". I figured I was going to make a career out of writing fiction, so it would be a fun way of introducing myself on subsequent online services. \"I'm thetalecrafter.\" I don't remember feeling much attached to my prior \"thewol\", so shedding that identity was painless.\n\nIt didn't take long though for my anticipation of a writing fiction career to turn into an actual writing *software* career. And for more than a decade, I have presented myself with the handle \"thetalecrafter\", giving people the impression, you know, that I craft tales.\n\nJustifying this situation to myself wasn't too hard though, as I *did* have a book I worked on periodically. And the label I had given myself pushed on me more than anything else to keep this book draft around. Over the years, work on my tales went from occasional (once every few weeks) to practically never (once every few years), and the handle continued to insist that *this is who am*.\n\nAs I used more and more services online, my handle \"thetalecrafter\" only became more entrenched. Twitter, GitHub, keybase, etc.\n\nDuring this same time my once exciting email provider, the \"do no evil\" Google, went from being the shining example of making cool things that make the web better, to the stalker who follows you around, and strong arms the competition into adopting their \"standards\".\n\nAs I switched from Googling to searching on Duck Duck Go, and I looked to leave behind \"thetalecrafter\" which beyond being inaccurate, gave me guilt about being the right me, I opted to go back to the name I inherited from ancestors. No matter what else changes in my life, my actual name was always going to be a solid identifier. I registered the domain `vanwagoner.family` and setup a matching email address.\n\nAlas, several services I rely on do not think `.family` is a valid way to end an email address. So for two years now, I have drug along \"thetalecrafter@gmail.com\" as a backup address. I don't craft tales, and I don't like Google.\n\nFinally a straw broke the camel's back, and I decided it was time to really ditch thetalecrafter. The handle, the email address, and the website (this one). On a whim I was looking at domain names, and found that `vanwago.net` was available. That would be a solid alias for `vanwagoner.family`, using a TLD that even AOL recognizes. Once I had the domain, I figured it didn't make a terrible handle either.\n\nHi, I'm \"vanwagonet\". I'm not on Facebook or Twitter these days, but I am on [GitHub](https://github.com/vanwagonet) and [LinkedIn](https://www.linkedin.com/in/andrewvanwagoner), and every now and then I write things down on [this site](https://andy.vanwago.net). I may [spin some tales](/2015/07/25/jumping-the-fold/) [in the future](/2015/06/23/breathless-in-a-new-world/), but even if I don't, I'll still be Andy VanWagoner.\n","slug":"who-am-i","published":1,"updated":"2019-05-30T16:23:49.228Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwaveis100c9v1ppyr9qrzx3","content":"<p>Figuring out who we are and how to understand, describe, and present that to other people is a tough challenge. People are complex and dynamic, and rarely fit nicely into some category. Do the things we call ourselves influence who we are?</p>\n<p>We are <del>all</del> usually given an identifier at birth, called a name. They aren’t necessarily unique, but often close enough. I am “Andrew Henry Van Wagoner”. This name is supposed to represent all of me.</p>\n<p>My name isn’t necessarily static, though. My family &amp; friends have been calling my “Andy” for longer than I can remember, and most of my documents use “VanWagoner” (no space) to prevent software from tokenizing my last name incorrectly. My wife, like many people, legally changed her name when we got married. Though my name has an assigned meaning to it (manly), I doubt most people give it any thought beyond inferring my gender.</p>\n<p>When we introduce ourselves, we rarely lead with our full names. “I’m Andy.” Sometimes we include our job function, department, or employer. “I’m Andy from Instructure.” This is where it starts to become more descriptive rather than identifying.</p>\n<p>Once connected to the internet, we are given the opportunity to make up our own handle for ourselves. <a href=\"https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you&#39;re_a_dog\" target=\"_blank\" rel=\"noopener\">On the internet, nobody knows you are a dog.</a> Am I “thewol” (meaning the warrior of light), or “imnd” (see what I did there?), or “boyz_ii_men_iv_ever”?</p>\n<p>In 2005 I dropped my old “<a href=\"mailto:thewol@msn.com\" target=\"_blank\" rel=\"noopener\">thewol@msn.com</a>“ email address for the beta Gmail service as “<a href=\"mailto:thetalecrafter@gmail.com\" target=\"_blank\" rel=\"noopener\">thetalecrafter@gmail.com</a>“. I figured I was going to make a career out of writing fiction, so it would be a fun way of introducing myself on subsequent online services. “I’m thetalecrafter.” I don’t remember feeling much attached to my prior “thewol”, so shedding that identity was painless.</p>\n<p>It didn’t take long though for my anticipation of a writing fiction career to turn into an actual writing <em>software</em> career. And for more than a decade, I have presented myself with the handle “thetalecrafter”, giving people the impression, you know, that I craft tales.</p>\n<p>Justifying this situation to myself wasn’t too hard though, as I <em>did</em> have a book I worked on periodically. And the label I had given myself pushed on me more than anything else to keep this book draft around. Over the years, work on my tales went from occasional (once every few weeks) to practically never (once every few years), and the handle continued to insist that <em>this is who am</em>.</p>\n<p>As I used more and more services online, my handle “thetalecrafter” only became more entrenched. Twitter, GitHub, keybase, etc.</p>\n<p>During this same time my once exciting email provider, the “do no evil” Google, went from being the shining example of making cool things that make the web better, to the stalker who follows you around, and strong arms the competition into adopting their “standards”.</p>\n<p>As I switched from Googling to searching on Duck Duck Go, and I looked to leave behind “thetalecrafter” which beyond being inaccurate, gave me guilt about being the right me, I opted to go back to the name I inherited from ancestors. No matter what else changes in my life, my actual name was always going to be a solid identifier. I registered the domain <code>vanwagoner.family</code> and setup a matching email address.</p>\n<p>Alas, several services I rely on do not think <code>.family</code> is a valid way to end an email address. So for two years now, I have drug along “<a href=\"mailto:thetalecrafter@gmail.com\" target=\"_blank\" rel=\"noopener\">thetalecrafter@gmail.com</a>“ as a backup address. I don’t craft tales, and I don’t like Google.</p>\n<p>Finally a straw broke the camel’s back, and I decided it was time to really ditch thetalecrafter. The handle, the email address, and the website (this one). On a whim I was looking at domain names, and found that <code>vanwago.net</code> was available. That would be a solid alias for <code>vanwagoner.family</code>, using a TLD that even AOL recognizes. Once I had the domain, I figured it didn’t make a terrible handle either.</p>\n<p>Hi, I’m “vanwagonet”. I’m not on Facebook or Twitter these days, but I am on <a href=\"https://github.com/vanwagonet\" target=\"_blank\" rel=\"noopener\">GitHub</a> and <a href=\"https://www.linkedin.com/in/andrewvanwagoner\" target=\"_blank\" rel=\"noopener\">LinkedIn</a>, and every now and then I write things down on <a href=\"https://andy.vanwago.net\">this site</a>. I may <a href=\"/2015/07/25/jumping-the-fold/\">spin some tales</a> <a href=\"/2015/06/23/breathless-in-a-new-world/\">in the future</a>, but even if I don’t, I’ll still be Andy VanWagoner.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Figuring out who we are and how to understand, describe, and present that to other people is a tough challenge. People are complex and dynamic, and rarely fit nicely into some category. Do the things we call ourselves influence who we are?</p>\n<p>We are <del>all</del> usually given an identifier at birth, called a name. They aren’t necessarily unique, but often close enough. I am “Andrew Henry Van Wagoner”. This name is supposed to represent all of me.</p>\n<p>My name isn’t necessarily static, though. My family &amp; friends have been calling my “Andy” for longer than I can remember, and most of my documents use “VanWagoner” (no space) to prevent software from tokenizing my last name incorrectly. My wife, like many people, legally changed her name when we got married. Though my name has an assigned meaning to it (manly), I doubt most people give it any thought beyond inferring my gender.</p>\n<p>When we introduce ourselves, we rarely lead with our full names. “I’m Andy.” Sometimes we include our job function, department, or employer. “I’m Andy from Instructure.” This is where it starts to become more descriptive rather than identifying.</p>\n<p>Once connected to the internet, we are given the opportunity to make up our own handle for ourselves. <a href=\"https://en.wikipedia.org/wiki/On_the_Internet,_nobody_knows_you&#39;re_a_dog\" target=\"_blank\" rel=\"noopener\">On the internet, nobody knows you are a dog.</a> Am I “thewol” (meaning the warrior of light), or “imnd” (see what I did there?), or “boyz_ii_men_iv_ever”?</p>\n<p>In 2005 I dropped my old “<a href=\"mailto:thewol@msn.com\" target=\"_blank\" rel=\"noopener\">thewol@msn.com</a>“ email address for the beta Gmail service as “<a href=\"mailto:thetalecrafter@gmail.com\" target=\"_blank\" rel=\"noopener\">thetalecrafter@gmail.com</a>“. I figured I was going to make a career out of writing fiction, so it would be a fun way of introducing myself on subsequent online services. “I’m thetalecrafter.” I don’t remember feeling much attached to my prior “thewol”, so shedding that identity was painless.</p>\n<p>It didn’t take long though for my anticipation of a writing fiction career to turn into an actual writing <em>software</em> career. And for more than a decade, I have presented myself with the handle “thetalecrafter”, giving people the impression, you know, that I craft tales.</p>\n<p>Justifying this situation to myself wasn’t too hard though, as I <em>did</em> have a book I worked on periodically. And the label I had given myself pushed on me more than anything else to keep this book draft around. Over the years, work on my tales went from occasional (once every few weeks) to practically never (once every few years), and the handle continued to insist that <em>this is who am</em>.</p>\n<p>As I used more and more services online, my handle “thetalecrafter” only became more entrenched. Twitter, GitHub, keybase, etc.</p>\n<p>During this same time my once exciting email provider, the “do no evil” Google, went from being the shining example of making cool things that make the web better, to the stalker who follows you around, and strong arms the competition into adopting their “standards”.</p>\n<p>As I switched from Googling to searching on Duck Duck Go, and I looked to leave behind “thetalecrafter” which beyond being inaccurate, gave me guilt about being the right me, I opted to go back to the name I inherited from ancestors. No matter what else changes in my life, my actual name was always going to be a solid identifier. I registered the domain <code>vanwagoner.family</code> and setup a matching email address.</p>\n<p>Alas, several services I rely on do not think <code>.family</code> is a valid way to end an email address. So for two years now, I have drug along “<a href=\"mailto:thetalecrafter@gmail.com\" target=\"_blank\" rel=\"noopener\">thetalecrafter@gmail.com</a>“ as a backup address. I don’t craft tales, and I don’t like Google.</p>\n<p>Finally a straw broke the camel’s back, and I decided it was time to really ditch thetalecrafter. The handle, the email address, and the website (this one). On a whim I was looking at domain names, and found that <code>vanwago.net</code> was available. That would be a solid alias for <code>vanwagoner.family</code>, using a TLD that even AOL recognizes. Once I had the domain, I figured it didn’t make a terrible handle either.</p>\n<p>Hi, I’m “vanwagonet”. I’m not on Facebook or Twitter these days, but I am on <a href=\"https://github.com/vanwagonet\" target=\"_blank\" rel=\"noopener\">GitHub</a> and <a href=\"https://www.linkedin.com/in/andrewvanwagoner\" target=\"_blank\" rel=\"noopener\">LinkedIn</a>, and every now and then I write things down on <a href=\"https://andy.vanwago.net\">this site</a>. I may <a href=\"/2015/07/25/jumping-the-fold/\">spin some tales</a> <a href=\"/2015/06/23/breathless-in-a-new-world/\">in the future</a>, but even if I don’t, I’ll still be Andy VanWagoner.</p>\n"},{"title":"Accessing AWS SimpleDB from PHP","id":"43","date":"2009-02-20T02:13:10.000Z","_content":"\nThis week, as I built part of my App Server for Distributed Systems Design, I hit another stumbling block. The library that Amazon provides in PHP for accessing SimpleDB requires PHP 5.2\\. I should have known that I need to use the latest version.\n\nNot only did Amazon's library not work for me, but it was huge and complicated. I found another library at: [Google Code](http://code.google.com/p/simpledb-php/), but as fate would have it, that library didn't work either. The code was pretty ugly imho, but at least it was straighforward enough for me to understand how accessing SimpleDB worked, which led me to make my own SimpleDB client.\n\nThe script will work with any PHP 5, and doesn't depend on anything that isn't built in by default. I hope it is helpful to someone else. It would be really easy to add the SimpleDB requests I haven't implemented yet.\n\n```php\n&lt;?php\n/**\n * AWS_SimpleDB_Client v0.1 by Andy VanWagoner, distributed under the ISC licence.\n * Provides simple access to Amazon's SimpleDB from PHP 5.\n *\n * Copyright (c) 2009, Andy VanWagoner\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\nclass AWS_SimpleDB_Client {\n\n\t// AWS SimpleDB API Constants\n\tprivate static $service_endpoint\t= &quot;sdb.amazonaws.com&quot;;\n\tprivate static $api_version\t\t\t= &quot;2007-11-07&quot;;\n\tprivate static $timestamp_format\t= &quot;Y-m-d\\TH:i:s.\\\\\\\\\\Z&quot;;\n\tprivate static $signature_version\t= 1;\n\n\tprivate static $user_agent = &quot;AWS_SimpleDB_Client 0.1 - Andy VanWagoner&quot;;\n\n\t/**\n\t* Constructor\n\t*\n\t* @param string $access\t\t\t// your AWS &quot;Access Key ID&quot;\n\t* @param string $secret\t\t\t// your AWS &quot;Seceret Access Key&quot;\n\t*/\n\tfunction AWS_SimpleDB_Client($access, $secret) {\n\t\t$this-&gt;access_key = $access;\n\t\t$this-&gt;secret_key = $secret;\n\t}\n\n\t/**\n\t* AWS SimpleDB API - CreateDomain\n\t* NOTE: This call will take a while (AWS says 10 seconds)\n\t*\n\t* @param string $domain\t\t\t// the domain to create\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction create_domain($domain) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'CreateDomain',\n\t\t\t'DomainName' =&gt; $domain\n\t\t);\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - DeleteDomain\n\t* NOTE: This call will take a while (AWS says 10 seconds)\n\t*\n\t* @param string $domain\t\t\t// the domain to delete\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction delete_domain($domain) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'DeleteDomain',\n\t\t\t'DomainName' =&gt; $domain\n\t\t);\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - ListDomains\n\t*\n\t* @param string $next = ''\t\t// Optional - Sent as NextToken parameter\n\t* @param string $max = 100\t\t// Optional - Sent as MaxNumberOfDomains\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;,\n\t* \t\t\t\t'DomainName'=&gt;array('...', ...) [, 'NextToken'=&gt;])\n\t*/\n\tfunction list_domains($next = '', $max = 0) {\n\t\t$params = array('Action' =&gt; 'ListDomains');\n\n\t\tif ($max &gt; 0 &amp;&amp; $max) return $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - PutAttributes\n\t*\n\t* @param string $domain\t\t\t// The domain the item is in\n\t* @param string $item\t\t\t// The name of the item\n\t* @param array  $attributes\t\t// array(array('Name'=&gt;, 'Value'=&gt; [, 'Replace'=&gt;]), ...)\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction put_attributes($domain, $item, $attributes) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'PutAttributes',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'ItemName' =&gt; $item\n\t\t);\n\n\t\tforeach($attributes as $i =&gt; $value) {\n\t\t\t$params[&quot;Attribute.$i.Name&quot;] = $value['Name'];\n\t\t\t$params[&quot;Attribute.$i.Value&quot;] = $value['Value'];\n\t\t\tif (isset($value['Replace']))\n\t\t\t\t$params[&quot;Attribute.$i.Replace&quot;] = $value['Replace'];\n\t\t}\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - DeleteAttributes\n\t*\n\t* @param string $domain\t\t\t// The domain the item is in\n\t* @param string $item\t\t\t// The name of the item\n\t* @param array  $attributes\t\t// array(array('Name'=&gt;, 'Value'=&gt;), ...)\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction delete_attributes($domain, $item, $attributes) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'DeleteAttributes',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'ItemName' =&gt; $item\n\t\t);\n\n\t\tforeach($attributes as $i =&gt; $value) {\n\t\t\t$params[&quot;Attribute.$i.Name&quot;] = $value['Name'];\n\t\t\t$params[&quot;Attribute.$i.Value&quot;] = $value['Value'];\n\t\t}\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - GetAttributes\n\t*\n\t* @param string $domain\t\t\t// the domain name\n\t* @param string $item\t\t\t// the item's name\n\t* @param string $attribute\t\t// Optional - If specified, only this attribute's values are retrieved.\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;,\n\t* \t\t\t\t'Attribute'=&gt;array(array('Name'=&gt;,'Value'=&gt;), ...))\n\t*/\n\tfunction get_attributes($domain, $item, $attribute = '') {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'GetAttributes',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'ItemName' =&gt; $item\n\t\t);\n\n\t\tif ($attribute)\n\t\t\t$params['AttributeName'] = $attribute;\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - Query\n\t*\n\t* @param string  $domain\t\t// The domain name\n\t* @param string  $query\t\t\t// The query to run on this domain\n\t* @param string  $next = ''\t\t// OPTIONAL - token supplied on last paged call\n\t* @param integer $max = 100\t\t// OPTIONAL - max items you want returned 1-250, default = 100\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;,\n\t* \t\t\t\t'ItemName'=&gt;array('...', ...))\n\t*/\n\tfunction query($domain, $query, $next = '', $max = 0) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'Query',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'QueryExpression' =&gt; $query\n\t\t);\n\n\t\tif ($max &gt; 250) $max = 250;\n\t\tif ($max &gt; 0)\n\t\t\t$params['MaxNumberOfItems'] = $max;\n\t\tif ($next)\n\t\t\t$params['NextToken'] = $next;\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t * Sign the parameters, following AWS version 1 signing\n\t *\n\t * @param array $params\t\t\t// array of all (except for the signiture) params to be passed to amazon\n\t *\n\t * @return string\t\t\t\t// signature string\n\t */\n\tprivate function sign($params) {\n\t\tuksort($params, 'strnatcasecmp');\n\n\t\t$data = '';\n\t\tforeach ($params as $key=&gt;$value) {\n\t\t\t$data .= $key . $value;\n\t\t}\n\n\t\treturn base64_encode (\tpack(&quot;H*&quot;, sha1((str_pad($this-&gt;secret_key, 64, chr(0x00)) ^ (str_repeat(chr(0x5c), 64))) .\n\t\t\t\t\t\t\t\tpack(&quot;H*&quot;, sha1((str_pad($this-&gt;secret_key, 64, chr(0x00)) ^ (str_repeat(chr(0x36), 64))) .\n\t\t\t\t\t\t\t\t$data)))) );\n\t}\n\n\t/**\n\t * POST to AWS SimpleDB and then parse the response.\n\t *\n\t * @param array $params\t\t\t// all params to pass on the post\n\t *\n\t * @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;, ...)\n\t */\n\tprivate function post($params) {\n\n\t\t// Add all of the common parameters needed by AWS SimpleDB\n\t\t$params['AWSAccessKeyId']\t= $this-&gt;access_key;\n\t\t$params['Timestamp'] \t\t= gmdate(self::$timestamp_format, time());\n\t\t$params['Version'] \t\t\t= self::$api_version;\n\t\t$params['SignatureVersion']\t= self::$signature_version;\n\t\t$params['Signature'] \t\t= $this-&gt;sign($params);\n\n\t\t// Generate the POST request\n\t\t$content = http_build_query($params);\n\n\t\t$post  = 'POST / HTTP/1.0'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'Host: ' \t\t\t. self::$service_endpoint \t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'Content-Type: ' \t. 'application/x-www-form-urlencoded; charset=utf-8'\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'Content-Length: ' . strlen($content)\t\t\t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'User-Agent: ' \t. self::$user_agent \t\t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  &quot;\\r\\n&quot;;\n\t\t$post .= $content;\n\n\t\t$socket = @fsockopen(self::$service_endpoint, 80, $errno, $errstr, 10);\n  \t\tif ($socket) {\n\t\t\tfwrite($socket, $post);\n\n\t\t\t$response = stream_get_contents($socket);\n\t\t\tfclose($socket);\n\n\t\t\t// Parse the response\n\t\t\treturn $this-&gt;format_result($response);\n\t\t}\n\n\t\t// Return a fail result\n\t\treturn array('status' =&gt; array('code' =&gt; 404, 'message' =&gt; 'Not Found'),\n\t\t\t'Error' =&gt; array('Code' =&gt; $errno, 'Message' =&gt;\n\t\t\t\t'Could not connect to ' . $this-&gt;$service_endpoint . &quot; ($errstr)&quot;\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Take the XML document returned by AWS SimpleDB, and transform it into a hash\n\t *\n\t * @param string $result\t\t// the full http response string from SimpleDB\n\t */\n\tprivate function format_result($result) {\n\t\tlist($http_headers, $content) = explode(&quot;\\r\\n\\r\\n&quot;, $result, 2);\n\t\t$header_lines = explode(&quot;\\r\\n&quot;, $http_headers);\n\t\tlist($protocol, $code, $message) = explode(&quot; &quot;, $header_lines[0], 3);\n\n\t\t// record the http status\n\t\t$formatted = array('status' =&gt; array('code' =&gt; $code, 'message' =&gt; $message));\n\n\t\t$xml = simplexml_load_string($content);\n\n\t\t// Look for Errors\n\t\tif (isset($xml-&gt;Errors)) {\n\t\t\t$formatted['RequestId'] = (string)$xml-&gt;RequestId;\n\t\t\t$formatted['Error'] = array();\n\t\t\tforeach($xml-&gt;Errors-&gt;Error as $error) {\n\t\t\t\tarray_push($formatted['Error'], array(\n\t\t\t\t\t'Code' =&gt; (string)$error-&gt;Code,\n\t\t\t\t\t'Message' =&gt; (string)$error-&gt;Message\n\t\t\t\t));\n\t\t\t}\n\t\t\treturn $formatted;\n\t\t}\n\n\t\t// Get the metadata for this request\n\t\t$metadata = $xml-&gt;ResponseMetadata;\n\t\t$formatted['RequestId'] = (string)$metadata-&gt;RequestId;\n\t\t$formatted['BoxUsage'] = (string)$metadata-&gt;BoxUsage;\n\n\t\t// GetAttributes Response\n\t\tif (isset($xml-&gt;GetAttributesResult)) {\n\t\t\t$formatted['Attribute'] = array();\n\t\t\tforeach($xml-&gt;GetAttributesResult-&gt;Attribute as $attribute) {\n\t\t\t\tarray_push($formatted['Attribute'], array(\n\t\t\t\t\t'Name' =&gt; (string)$attribute-&gt;Name,\n\t\t\t\t\t'Value' =&gt; (string)$attribute-&gt;Value\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\t// ListDomains Response\n\t\tif (isset($xml-&gt;ListDomainsResult)) {\n\t\t\t$formatted['DomainName'] = array();\n\t\t\tforeach($xml-&gt;ListDomainsResult-&gt;DomainName as $domain) {\n\t\t\t\tarray_push($formatted['DomainName'], (string)$domain);\n\t\t\t}\n\t\t\tif (isset($xml-&gt;ListDomainsResult-&gt;NextToken)) {\n\t\t\t\t$formatted['NextToken'] = (string)$xml-&gt;ListDomainsResult-&gt;NextToken;\n\t\t\t}\n\t\t}\n\n\t\t// Query Response\n\t\tif (isset($xml-&gt;QueryResult)) {\n\t\t\t$formatted['ItemName'] = array();\n\t\t\tforeach($xml-&gt;QueryResult-&gt;ItemName as $item) {\n\t\t\t\tarray_push($formatted['ItemName'], (string)$item);\n\t\t\t}\n\t\t\tif (isset($xml-&gt;QueryResult-&gt;NextToken)) {\n\t\t\t\t$formatted['NextToken'] = (string)$xml-&gt;QueryResult-&gt;NextToken;\n\t\t\t}\n\t\t}\n\n\t\treturn $formatted;\n\t}\n}\n\n?&gt;\n```\n","source":"_posts/accessing-aws-simpledb-from-php.md","raw":"title: Accessing AWS SimpleDB from PHP\ntags:\n  - Amazon\n  - Amazon.com\n  - AWS\n  - php\n  - SimpleDB\nid: 43\ncategories:\n  - Distributed System Design\ndate: 2009-02-19 19:13:10\n---\n\nThis week, as I built part of my App Server for Distributed Systems Design, I hit another stumbling block. The library that Amazon provides in PHP for accessing SimpleDB requires PHP 5.2\\. I should have known that I need to use the latest version.\n\nNot only did Amazon's library not work for me, but it was huge and complicated. I found another library at: [Google Code](http://code.google.com/p/simpledb-php/), but as fate would have it, that library didn't work either. The code was pretty ugly imho, but at least it was straighforward enough for me to understand how accessing SimpleDB worked, which led me to make my own SimpleDB client.\n\nThe script will work with any PHP 5, and doesn't depend on anything that isn't built in by default. I hope it is helpful to someone else. It would be really easy to add the SimpleDB requests I haven't implemented yet.\n\n```php\n&lt;?php\n/**\n * AWS_SimpleDB_Client v0.1 by Andy VanWagoner, distributed under the ISC licence.\n * Provides simple access to Amazon's SimpleDB from PHP 5.\n *\n * Copyright (c) 2009, Andy VanWagoner\n *\n * Permission to use, copy, modify, and/or distribute this software for any\n * purpose with or without fee is hereby granted, provided that the above\n * copyright notice and this permission notice appear in all copies.\n *\n * THE SOFTWARE IS PROVIDED &quot;AS IS&quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES\n * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\n * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\n * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\n * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\n * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF\n * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n */\n\nclass AWS_SimpleDB_Client {\n\n\t// AWS SimpleDB API Constants\n\tprivate static $service_endpoint\t= &quot;sdb.amazonaws.com&quot;;\n\tprivate static $api_version\t\t\t= &quot;2007-11-07&quot;;\n\tprivate static $timestamp_format\t= &quot;Y-m-d\\TH:i:s.\\\\\\\\\\Z&quot;;\n\tprivate static $signature_version\t= 1;\n\n\tprivate static $user_agent = &quot;AWS_SimpleDB_Client 0.1 - Andy VanWagoner&quot;;\n\n\t/**\n\t* Constructor\n\t*\n\t* @param string $access\t\t\t// your AWS &quot;Access Key ID&quot;\n\t* @param string $secret\t\t\t// your AWS &quot;Seceret Access Key&quot;\n\t*/\n\tfunction AWS_SimpleDB_Client($access, $secret) {\n\t\t$this-&gt;access_key = $access;\n\t\t$this-&gt;secret_key = $secret;\n\t}\n\n\t/**\n\t* AWS SimpleDB API - CreateDomain\n\t* NOTE: This call will take a while (AWS says 10 seconds)\n\t*\n\t* @param string $domain\t\t\t// the domain to create\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction create_domain($domain) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'CreateDomain',\n\t\t\t'DomainName' =&gt; $domain\n\t\t);\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - DeleteDomain\n\t* NOTE: This call will take a while (AWS says 10 seconds)\n\t*\n\t* @param string $domain\t\t\t// the domain to delete\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction delete_domain($domain) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'DeleteDomain',\n\t\t\t'DomainName' =&gt; $domain\n\t\t);\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - ListDomains\n\t*\n\t* @param string $next = ''\t\t// Optional - Sent as NextToken parameter\n\t* @param string $max = 100\t\t// Optional - Sent as MaxNumberOfDomains\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;,\n\t* \t\t\t\t'DomainName'=&gt;array('...', ...) [, 'NextToken'=&gt;])\n\t*/\n\tfunction list_domains($next = '', $max = 0) {\n\t\t$params = array('Action' =&gt; 'ListDomains');\n\n\t\tif ($max &gt; 0 &amp;&amp; $max) return $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - PutAttributes\n\t*\n\t* @param string $domain\t\t\t// The domain the item is in\n\t* @param string $item\t\t\t// The name of the item\n\t* @param array  $attributes\t\t// array(array('Name'=&gt;, 'Value'=&gt; [, 'Replace'=&gt;]), ...)\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction put_attributes($domain, $item, $attributes) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'PutAttributes',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'ItemName' =&gt; $item\n\t\t);\n\n\t\tforeach($attributes as $i =&gt; $value) {\n\t\t\t$params[&quot;Attribute.$i.Name&quot;] = $value['Name'];\n\t\t\t$params[&quot;Attribute.$i.Value&quot;] = $value['Value'];\n\t\t\tif (isset($value['Replace']))\n\t\t\t\t$params[&quot;Attribute.$i.Replace&quot;] = $value['Replace'];\n\t\t}\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - DeleteAttributes\n\t*\n\t* @param string $domain\t\t\t// The domain the item is in\n\t* @param string $item\t\t\t// The name of the item\n\t* @param array  $attributes\t\t// array(array('Name'=&gt;, 'Value'=&gt;), ...)\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;)\n\t*/\n\tfunction delete_attributes($domain, $item, $attributes) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'DeleteAttributes',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'ItemName' =&gt; $item\n\t\t);\n\n\t\tforeach($attributes as $i =&gt; $value) {\n\t\t\t$params[&quot;Attribute.$i.Name&quot;] = $value['Name'];\n\t\t\t$params[&quot;Attribute.$i.Value&quot;] = $value['Value'];\n\t\t}\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - GetAttributes\n\t*\n\t* @param string $domain\t\t\t// the domain name\n\t* @param string $item\t\t\t// the item's name\n\t* @param string $attribute\t\t// Optional - If specified, only this attribute's values are retrieved.\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;,\n\t* \t\t\t\t'Attribute'=&gt;array(array('Name'=&gt;,'Value'=&gt;), ...))\n\t*/\n\tfunction get_attributes($domain, $item, $attribute = '') {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'GetAttributes',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'ItemName' =&gt; $item\n\t\t);\n\n\t\tif ($attribute)\n\t\t\t$params['AttributeName'] = $attribute;\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t* AWS SimpleDB API - Query\n\t*\n\t* @param string  $domain\t\t// The domain name\n\t* @param string  $query\t\t\t// The query to run on this domain\n\t* @param string  $next = ''\t\t// OPTIONAL - token supplied on last paged call\n\t* @param integer $max = 100\t\t// OPTIONAL - max items you want returned 1-250, default = 100\n\t*\n\t* @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;,\n\t* \t\t\t\t'ItemName'=&gt;array('...', ...))\n\t*/\n\tfunction query($domain, $query, $next = '', $max = 0) {\n\t\t$params = array(\n\t\t\t'Action' =&gt; 'Query',\n\t\t\t'DomainName' =&gt; $domain,\n\t\t\t'QueryExpression' =&gt; $query\n\t\t);\n\n\t\tif ($max &gt; 250) $max = 250;\n\t\tif ($max &gt; 0)\n\t\t\t$params['MaxNumberOfItems'] = $max;\n\t\tif ($next)\n\t\t\t$params['NextToken'] = $next;\n\n\t\treturn $this-&gt;post($params);\n\t}\n\n\t/**\n\t * Sign the parameters, following AWS version 1 signing\n\t *\n\t * @param array $params\t\t\t// array of all (except for the signiture) params to be passed to amazon\n\t *\n\t * @return string\t\t\t\t// signature string\n\t */\n\tprivate function sign($params) {\n\t\tuksort($params, 'strnatcasecmp');\n\n\t\t$data = '';\n\t\tforeach ($params as $key=&gt;$value) {\n\t\t\t$data .= $key . $value;\n\t\t}\n\n\t\treturn base64_encode (\tpack(&quot;H*&quot;, sha1((str_pad($this-&gt;secret_key, 64, chr(0x00)) ^ (str_repeat(chr(0x5c), 64))) .\n\t\t\t\t\t\t\t\tpack(&quot;H*&quot;, sha1((str_pad($this-&gt;secret_key, 64, chr(0x00)) ^ (str_repeat(chr(0x36), 64))) .\n\t\t\t\t\t\t\t\t$data)))) );\n\t}\n\n\t/**\n\t * POST to AWS SimpleDB and then parse the response.\n\t *\n\t * @param array $params\t\t\t// all params to pass on the post\n\t *\n\t * @return array('status'=&gt;array('code'=&gt;, 'message'=&gt;), 'RequestId'=&gt;, 'BoxUsage'=&gt;, ...)\n\t */\n\tprivate function post($params) {\n\n\t\t// Add all of the common parameters needed by AWS SimpleDB\n\t\t$params['AWSAccessKeyId']\t= $this-&gt;access_key;\n\t\t$params['Timestamp'] \t\t= gmdate(self::$timestamp_format, time());\n\t\t$params['Version'] \t\t\t= self::$api_version;\n\t\t$params['SignatureVersion']\t= self::$signature_version;\n\t\t$params['Signature'] \t\t= $this-&gt;sign($params);\n\n\t\t// Generate the POST request\n\t\t$content = http_build_query($params);\n\n\t\t$post  = 'POST / HTTP/1.0'\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'Host: ' \t\t\t. self::$service_endpoint \t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'Content-Type: ' \t. 'application/x-www-form-urlencoded; charset=utf-8'\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'Content-Length: ' . strlen($content)\t\t\t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= 'User-Agent: ' \t. self::$user_agent \t\t\t\t\t\t\t\t\t. &quot;\\r\\n&quot;;\n\t\t$post .= \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  &quot;\\r\\n&quot;;\n\t\t$post .= $content;\n\n\t\t$socket = @fsockopen(self::$service_endpoint, 80, $errno, $errstr, 10);\n  \t\tif ($socket) {\n\t\t\tfwrite($socket, $post);\n\n\t\t\t$response = stream_get_contents($socket);\n\t\t\tfclose($socket);\n\n\t\t\t// Parse the response\n\t\t\treturn $this-&gt;format_result($response);\n\t\t}\n\n\t\t// Return a fail result\n\t\treturn array('status' =&gt; array('code' =&gt; 404, 'message' =&gt; 'Not Found'),\n\t\t\t'Error' =&gt; array('Code' =&gt; $errno, 'Message' =&gt;\n\t\t\t\t'Could not connect to ' . $this-&gt;$service_endpoint . &quot; ($errstr)&quot;\n\t\t\t)\n\t\t);\n\t}\n\n\t/**\n\t * Take the XML document returned by AWS SimpleDB, and transform it into a hash\n\t *\n\t * @param string $result\t\t// the full http response string from SimpleDB\n\t */\n\tprivate function format_result($result) {\n\t\tlist($http_headers, $content) = explode(&quot;\\r\\n\\r\\n&quot;, $result, 2);\n\t\t$header_lines = explode(&quot;\\r\\n&quot;, $http_headers);\n\t\tlist($protocol, $code, $message) = explode(&quot; &quot;, $header_lines[0], 3);\n\n\t\t// record the http status\n\t\t$formatted = array('status' =&gt; array('code' =&gt; $code, 'message' =&gt; $message));\n\n\t\t$xml = simplexml_load_string($content);\n\n\t\t// Look for Errors\n\t\tif (isset($xml-&gt;Errors)) {\n\t\t\t$formatted['RequestId'] = (string)$xml-&gt;RequestId;\n\t\t\t$formatted['Error'] = array();\n\t\t\tforeach($xml-&gt;Errors-&gt;Error as $error) {\n\t\t\t\tarray_push($formatted['Error'], array(\n\t\t\t\t\t'Code' =&gt; (string)$error-&gt;Code,\n\t\t\t\t\t'Message' =&gt; (string)$error-&gt;Message\n\t\t\t\t));\n\t\t\t}\n\t\t\treturn $formatted;\n\t\t}\n\n\t\t// Get the metadata for this request\n\t\t$metadata = $xml-&gt;ResponseMetadata;\n\t\t$formatted['RequestId'] = (string)$metadata-&gt;RequestId;\n\t\t$formatted['BoxUsage'] = (string)$metadata-&gt;BoxUsage;\n\n\t\t// GetAttributes Response\n\t\tif (isset($xml-&gt;GetAttributesResult)) {\n\t\t\t$formatted['Attribute'] = array();\n\t\t\tforeach($xml-&gt;GetAttributesResult-&gt;Attribute as $attribute) {\n\t\t\t\tarray_push($formatted['Attribute'], array(\n\t\t\t\t\t'Name' =&gt; (string)$attribute-&gt;Name,\n\t\t\t\t\t'Value' =&gt; (string)$attribute-&gt;Value\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\t// ListDomains Response\n\t\tif (isset($xml-&gt;ListDomainsResult)) {\n\t\t\t$formatted['DomainName'] = array();\n\t\t\tforeach($xml-&gt;ListDomainsResult-&gt;DomainName as $domain) {\n\t\t\t\tarray_push($formatted['DomainName'], (string)$domain);\n\t\t\t}\n\t\t\tif (isset($xml-&gt;ListDomainsResult-&gt;NextToken)) {\n\t\t\t\t$formatted['NextToken'] = (string)$xml-&gt;ListDomainsResult-&gt;NextToken;\n\t\t\t}\n\t\t}\n\n\t\t// Query Response\n\t\tif (isset($xml-&gt;QueryResult)) {\n\t\t\t$formatted['ItemName'] = array();\n\t\t\tforeach($xml-&gt;QueryResult-&gt;ItemName as $item) {\n\t\t\t\tarray_push($formatted['ItemName'], (string)$item);\n\t\t\t}\n\t\t\tif (isset($xml-&gt;QueryResult-&gt;NextToken)) {\n\t\t\t\t$formatted['NextToken'] = (string)$xml-&gt;QueryResult-&gt;NextToken;\n\t\t\t}\n\t\t}\n\n\t\treturn $formatted;\n\t}\n}\n\n?&gt;\n```\n","slug":"accessing-aws-simpledb-from-php","published":1,"updated":"2018-05-08T17:28:54.321Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjwaveis200cbv1ppysp6vmzs","content":"<p>This week, as I built part of my App Server for Distributed Systems Design, I hit another stumbling block. The library that Amazon provides in PHP for accessing SimpleDB requires PHP 5.2. I should have known that I need to use the latest version.</p>\n<p>Not only did Amazon’s library not work for me, but it was huge and complicated. I found another library at: <a href=\"http://code.google.com/p/simpledb-php/\" target=\"_blank\" rel=\"noopener\">Google Code</a>, but as fate would have it, that library didn’t work either. The code was pretty ugly imho, but at least it was straighforward enough for me to understand how accessing SimpleDB worked, which led me to make my own SimpleDB client.</p>\n<p>The script will work with any PHP 5, and doesn’t depend on anything that isn’t built in by default. I hope it is helpful to someone else. It would be really easy to add the SimpleDB requests I haven’t implemented yet.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;?php</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AWS_SimpleDB_Client v0.1 by Andy VanWagoner, distributed under the ISC licence.</span></span><br><span class=\"line\"><span class=\"comment\"> * Provides simple access to Amazon's SimpleDB from PHP 5.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2009, Andy VanWagoner</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Permission to use, copy, modify, and/or distribute this software for any</span></span><br><span class=\"line\"><span class=\"comment\"> * purpose with or without fee is hereby granted, provided that the above</span></span><br><span class=\"line\"><span class=\"comment\"> * copyright notice and this permission notice appear in all copies.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class=\"line\"><span class=\"comment\"> * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class=\"line\"><span class=\"comment\"> * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class=\"line\"><span class=\"comment\"> * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class=\"line\"><span class=\"comment\"> * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class=\"line\"><span class=\"comment\"> * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class=\"line\"><span class=\"comment\"> * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AWS_SimpleDB_Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// AWS SimpleDB API Constants</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $service_endpoint\t= &amp;quot;sdb.amazonaws.com&amp;quot;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $api_version\t\t\t= &amp;quot;<span class=\"number\">2007</span><span class=\"number\">-11</span><span class=\"number\">-07</span>&amp;quot;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $timestamp_format\t= &amp;quot;Y-m-d\\TH:i:s.\\\\\\\\\\Z&amp;quot;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $signature_version\t= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $user_agent = &amp;quot;AWS_SimpleDB_Client <span class=\"number\">0.1</span> - Andy VanWagoner&amp;quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* Constructor</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $access\t\t\t// your AWS &amp;quot;Access Key ID&amp;quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $secret\t\t\t// your AWS &amp;quot;Seceret Access Key&amp;quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AWS_SimpleDB_Client</span><span class=\"params\">($access, $secret)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&amp;gt;access_key = $access;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&amp;gt;secret_key = $secret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - CreateDomain</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">NOTE:</span> This call will take a while (AWS says 10 seconds)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// the domain to create</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_domain</span><span class=\"params\">($domain)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'CreateDomain'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - DeleteDomain</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">NOTE:</span> This call will take a while (AWS says 10 seconds)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// the domain to delete</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete_domain</span><span class=\"params\">($domain)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'DeleteDomain'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - ListDomains</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $next = ''\t\t// Optional - Sent as NextToken parameter</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $max = 100\t\t// Optional - Sent as MaxNumberOfDomains</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;,</span></span><br><span class=\"line\"><span class=\"comment\">\t* \t\t\t\t'DomainName'=&amp;gt;array('...', ...) [, 'NextToken'=&amp;gt;])</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list_domains</span><span class=\"params\">($next = <span class=\"string\">''</span>, $max = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'ListDomains'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($max &amp;gt; <span class=\"number\">0</span> &amp;amp;&amp;amp; $max) <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - PutAttributes</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// The domain the item is in</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $item\t\t\t// The name of the item</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> array  $attributes\t\t// array(array('Name'=&amp;gt;, 'Value'=&amp;gt; [, 'Replace'=&amp;gt;]), ...)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">put_attributes</span><span class=\"params\">($domain, $item, $attributes)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'PutAttributes'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'ItemName'</span> =&amp;gt; $item</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span>($attributes <span class=\"keyword\">as</span> $i =&amp;gt; $value) &#123;</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Name&amp;quot;] = $value[<span class=\"string\">'Name'</span>];</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Value&amp;quot;] = $value[<span class=\"string\">'Value'</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($value[<span class=\"string\">'Replace'</span>]))</span><br><span class=\"line\">\t\t\t\t$params[&amp;quot;Attribute.$i.Replace&amp;quot;] = $value[<span class=\"string\">'Replace'</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - DeleteAttributes</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// The domain the item is in</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $item\t\t\t// The name of the item</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> array  $attributes\t\t// array(array('Name'=&amp;gt;, 'Value'=&amp;gt;), ...)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete_attributes</span><span class=\"params\">($domain, $item, $attributes)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'DeleteAttributes'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'ItemName'</span> =&amp;gt; $item</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span>($attributes <span class=\"keyword\">as</span> $i =&amp;gt; $value) &#123;</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Name&amp;quot;] = $value[<span class=\"string\">'Name'</span>];</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Value&amp;quot;] = $value[<span class=\"string\">'Value'</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - GetAttributes</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// the domain name</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $item\t\t\t// the item's name</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $attribute\t\t// Optional - If specified, only this attribute's values are retrieved.</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;,</span></span><br><span class=\"line\"><span class=\"comment\">\t* \t\t\t\t'Attribute'=&amp;gt;array(array('Name'=&amp;gt;,'Value'=&amp;gt;), ...))</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_attributes</span><span class=\"params\">($domain, $item, $attribute = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'GetAttributes'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'ItemName'</span> =&amp;gt; $item</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($attribute)</span><br><span class=\"line\">\t\t\t$params[<span class=\"string\">'AttributeName'</span>] = $attribute;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - Query</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string  $domain\t\t// The domain name</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string  $query\t\t\t// The query to run on this domain</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string  $next = ''\t\t// OPTIONAL - token supplied on last paged call</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> integer $max = 100\t\t// OPTIONAL - max items you want returned 1-250, default = 100</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;,</span></span><br><span class=\"line\"><span class=\"comment\">\t* \t\t\t\t'ItemName'=&amp;gt;array('...', ...))</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($domain, $query, $next = <span class=\"string\">''</span>, $max = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'Query'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'QueryExpression'</span> =&amp;gt; $query</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($max &amp;gt; <span class=\"number\">250</span>) $max = <span class=\"number\">250</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($max &amp;gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t$params[<span class=\"string\">'MaxNumberOfItems'</span>] = $max;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($next)</span><br><span class=\"line\">\t\t\t$params[<span class=\"string\">'NextToken'</span>] = $next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Sign the parameters, following AWS version 1 signing</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array $params\t\t\t// array of all (except for the signiture) params to be passed to amazon</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> string\t\t\t\t// signature string</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sign</span><span class=\"params\">($params)</span> </span>&#123;</span><br><span class=\"line\">\t\tuksort($params, <span class=\"string\">'strnatcasecmp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$data = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $key=&amp;gt;$value) &#123;</span><br><span class=\"line\">\t\t\t$data .= $key . $value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> base64_encode (\tpack(&amp;quot;H*&amp;quot;, sha1((str_pad(<span class=\"keyword\">$this</span>-&amp;gt;secret_key, <span class=\"number\">64</span>, chr(<span class=\"number\">0x00</span>)) ^ (str_repeat(chr(<span class=\"number\">0x5c</span>), <span class=\"number\">64</span>))) .</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpack(&amp;quot;H*&amp;quot;, sha1((str_pad(<span class=\"keyword\">$this</span>-&amp;gt;secret_key, <span class=\"number\">64</span>, chr(<span class=\"number\">0x00</span>)) ^ (str_repeat(chr(<span class=\"number\">0x36</span>), <span class=\"number\">64</span>))) .</span><br><span class=\"line\">\t\t\t\t\t\t\t\t$data)))) );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * POST to AWS SimpleDB and then parse the response.</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array $params\t\t\t// all params to pass on the post</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;, ...)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span><span class=\"params\">($params)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Add all of the common parameters needed by AWS SimpleDB</span></span><br><span class=\"line\">\t\t$params[<span class=\"string\">'AWSAccessKeyId'</span>]\t= <span class=\"keyword\">$this</span>-&amp;gt;access_key;</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'Timestamp'</span>] \t\t= gmdate(<span class=\"keyword\">self</span>::$timestamp_format, time());</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'Version'</span>] \t\t\t= <span class=\"keyword\">self</span>::$api_version;</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'SignatureVersion'</span>]\t= <span class=\"keyword\">self</span>::$signature_version;</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'Signature'</span>] \t\t= <span class=\"keyword\">$this</span>-&amp;gt;sign($params);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Generate the POST request</span></span><br><span class=\"line\">\t\t$content = http_build_query($params);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$post  = <span class=\"string\">'POST / HTTP/1.0'</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'Host: '</span> \t\t\t. <span class=\"keyword\">self</span>::$service_endpoint \t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'Content-Type: '</span> \t. <span class=\"string\">'application/x-www-form-urlencoded; charset=utf-8'</span>\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'Content-Length: '</span> . strlen($content)\t\t\t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'User-Agent: '</span> \t. <span class=\"keyword\">self</span>::$user_agent \t\t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= $content;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$socket = @fsockopen(<span class=\"keyword\">self</span>::$service_endpoint, <span class=\"number\">80</span>, $errno, $errstr, <span class=\"number\">10</span>);</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span> ($socket) &#123;</span><br><span class=\"line\">\t\t\tfwrite($socket, $post);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t$response = stream_get_contents($socket);</span><br><span class=\"line\">\t\t\tfclose($socket);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Parse the response</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;format_result($response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Return a fail result</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">'status'</span> =&amp;gt; <span class=\"keyword\">array</span>(<span class=\"string\">'code'</span> =&amp;gt; <span class=\"number\">404</span>, <span class=\"string\">'message'</span> =&amp;gt; <span class=\"string\">'Not Found'</span>),</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Error'</span> =&amp;gt; <span class=\"keyword\">array</span>(<span class=\"string\">'Code'</span> =&amp;gt; $errno, <span class=\"string\">'Message'</span> =&amp;gt;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'Could not connect to '</span> . <span class=\"keyword\">$this</span>-&amp;gt;$service_endpoint . &amp;quot; ($errstr)&amp;quot;</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Take the XML document returned by AWS SimpleDB, and transform it into a hash</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> string $result\t\t// the full http response string from SimpleDB</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">format_result</span><span class=\"params\">($result)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">list</span>($http_headers, $content) = explode(&amp;quot;\\r\\n\\r\\n&amp;quot;, $result, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t$header_lines = explode(&amp;quot;\\r\\n&amp;quot;, $http_headers);</span><br><span class=\"line\">\t\t<span class=\"keyword\">list</span>($protocol, $code, $message) = explode(&amp;quot; &amp;quot;, $header_lines[<span class=\"number\">0</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// record the http status</span></span><br><span class=\"line\">\t\t$formatted = <span class=\"keyword\">array</span>(<span class=\"string\">'status'</span> =&amp;gt; <span class=\"keyword\">array</span>(<span class=\"string\">'code'</span> =&amp;gt; $code, <span class=\"string\">'message'</span> =&amp;gt; $message));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$xml = simplexml_load_string($content);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Look for Errors</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;Errors)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'RequestId'</span>] = (string)$xml-&amp;gt;RequestId;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'Error'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;Errors-&amp;gt;Error <span class=\"keyword\">as</span> $error) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'Error'</span>], <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Code'</span> =&amp;gt; (string)$error-&amp;gt;Code,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Message'</span> =&amp;gt; (string)$error-&amp;gt;Message</span><br><span class=\"line\">\t\t\t\t));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $formatted;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Get the metadata for this request</span></span><br><span class=\"line\">\t\t$metadata = $xml-&amp;gt;ResponseMetadata;</span><br><span class=\"line\">\t\t$formatted[<span class=\"string\">'RequestId'</span>] = (string)$metadata-&amp;gt;RequestId;</span><br><span class=\"line\">\t\t$formatted[<span class=\"string\">'BoxUsage'</span>] = (string)$metadata-&amp;gt;BoxUsage;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// GetAttributes Response</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;GetAttributesResult)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'Attribute'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;GetAttributesResult-&amp;gt;Attribute <span class=\"keyword\">as</span> $attribute) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'Attribute'</span>], <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Name'</span> =&amp;gt; (string)$attribute-&amp;gt;Name,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Value'</span> =&amp;gt; (string)$attribute-&amp;gt;Value</span><br><span class=\"line\">\t\t\t\t));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// ListDomains Response</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;ListDomainsResult)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'DomainName'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;ListDomainsResult-&amp;gt;DomainName <span class=\"keyword\">as</span> $domain) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'DomainName'</span>], (string)$domain);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;ListDomainsResult-&amp;gt;NextToken)) &#123;</span><br><span class=\"line\">\t\t\t\t$formatted[<span class=\"string\">'NextToken'</span>] = (string)$xml-&amp;gt;ListDomainsResult-&amp;gt;NextToken;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Query Response</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;QueryResult)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'ItemName'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;QueryResult-&amp;gt;ItemName <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'ItemName'</span>], (string)$item);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;QueryResult-&amp;gt;NextToken)) &#123;</span><br><span class=\"line\">\t\t\t\t$formatted[<span class=\"string\">'NextToken'</span>] = (string)$xml-&amp;gt;QueryResult-&amp;gt;NextToken;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $formatted;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&amp;gt;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>This week, as I built part of my App Server for Distributed Systems Design, I hit another stumbling block. The library that Amazon provides in PHP for accessing SimpleDB requires PHP 5.2. I should have known that I need to use the latest version.</p>\n<p>Not only did Amazon’s library not work for me, but it was huge and complicated. I found another library at: <a href=\"http://code.google.com/p/simpledb-php/\" target=\"_blank\" rel=\"noopener\">Google Code</a>, but as fate would have it, that library didn’t work either. The code was pretty ugly imho, but at least it was straighforward enough for me to understand how accessing SimpleDB worked, which led me to make my own SimpleDB client.</p>\n<p>The script will work with any PHP 5, and doesn’t depend on anything that isn’t built in by default. I hope it is helpful to someone else. It would be really easy to add the SimpleDB requests I haven’t implemented yet.</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;lt;?php</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * AWS_SimpleDB_Client v0.1 by Andy VanWagoner, distributed under the ISC licence.</span></span><br><span class=\"line\"><span class=\"comment\"> * Provides simple access to Amazon's SimpleDB from PHP 5.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Copyright (c) 2009, Andy VanWagoner</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Permission to use, copy, modify, and/or distribute this software for any</span></span><br><span class=\"line\"><span class=\"comment\"> * purpose with or without fee is hereby granted, provided that the above</span></span><br><span class=\"line\"><span class=\"comment\"> * copyright notice and this permission notice appear in all copies.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * THE SOFTWARE IS PROVIDED &amp;quot;AS IS&amp;quot; AND THE AUTHOR DISCLAIMS ALL WARRANTIES</span></span><br><span class=\"line\"><span class=\"comment\"> * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF</span></span><br><span class=\"line\"><span class=\"comment\"> * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR</span></span><br><span class=\"line\"><span class=\"comment\"> * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES</span></span><br><span class=\"line\"><span class=\"comment\"> * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN</span></span><br><span class=\"line\"><span class=\"comment\"> * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF</span></span><br><span class=\"line\"><span class=\"comment\"> * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AWS_SimpleDB_Client</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// AWS SimpleDB API Constants</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $service_endpoint\t= &amp;quot;sdb.amazonaws.com&amp;quot;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $api_version\t\t\t= &amp;quot;<span class=\"number\">2007</span><span class=\"number\">-11</span><span class=\"number\">-07</span>&amp;quot;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $timestamp_format\t= &amp;quot;Y-m-d\\TH:i:s.\\\\\\\\\\Z&amp;quot;;</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $signature_version\t= <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> $user_agent = &amp;quot;AWS_SimpleDB_Client <span class=\"number\">0.1</span> - Andy VanWagoner&amp;quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* Constructor</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $access\t\t\t// your AWS &amp;quot;Access Key ID&amp;quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $secret\t\t\t// your AWS &amp;quot;Seceret Access Key&amp;quot;</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">AWS_SimpleDB_Client</span><span class=\"params\">($access, $secret)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&amp;gt;access_key = $access;</span><br><span class=\"line\">\t\t<span class=\"keyword\">$this</span>-&amp;gt;secret_key = $secret;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - CreateDomain</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">NOTE:</span> This call will take a while (AWS says 10 seconds)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// the domain to create</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">create_domain</span><span class=\"params\">($domain)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'CreateDomain'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - DeleteDomain</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">NOTE:</span> This call will take a while (AWS says 10 seconds)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// the domain to delete</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete_domain</span><span class=\"params\">($domain)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'DeleteDomain'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - ListDomains</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $next = ''\t\t// Optional - Sent as NextToken parameter</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $max = 100\t\t// Optional - Sent as MaxNumberOfDomains</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;,</span></span><br><span class=\"line\"><span class=\"comment\">\t* \t\t\t\t'DomainName'=&amp;gt;array('...', ...) [, 'NextToken'=&amp;gt;])</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">list_domains</span><span class=\"params\">($next = <span class=\"string\">''</span>, $max = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'ListDomains'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($max &amp;gt; <span class=\"number\">0</span> &amp;amp;&amp;amp; $max) <span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - PutAttributes</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// The domain the item is in</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $item\t\t\t// The name of the item</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> array  $attributes\t\t// array(array('Name'=&amp;gt;, 'Value'=&amp;gt; [, 'Replace'=&amp;gt;]), ...)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">put_attributes</span><span class=\"params\">($domain, $item, $attributes)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'PutAttributes'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'ItemName'</span> =&amp;gt; $item</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span>($attributes <span class=\"keyword\">as</span> $i =&amp;gt; $value) &#123;</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Name&amp;quot;] = $value[<span class=\"string\">'Name'</span>];</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Value&amp;quot;] = $value[<span class=\"string\">'Value'</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($value[<span class=\"string\">'Replace'</span>]))</span><br><span class=\"line\">\t\t\t\t$params[&amp;quot;Attribute.$i.Replace&amp;quot;] = $value[<span class=\"string\">'Replace'</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - DeleteAttributes</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// The domain the item is in</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $item\t\t\t// The name of the item</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> array  $attributes\t\t// array(array('Name'=&amp;gt;, 'Value'=&amp;gt;), ...)</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;)</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">delete_attributes</span><span class=\"params\">($domain, $item, $attributes)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'DeleteAttributes'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'ItemName'</span> =&amp;gt; $item</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span>($attributes <span class=\"keyword\">as</span> $i =&amp;gt; $value) &#123;</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Name&amp;quot;] = $value[<span class=\"string\">'Name'</span>];</span><br><span class=\"line\">\t\t\t$params[&amp;quot;Attribute.$i.Value&amp;quot;] = $value[<span class=\"string\">'Value'</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - GetAttributes</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $domain\t\t\t// the domain name</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $item\t\t\t// the item's name</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string $attribute\t\t// Optional - If specified, only this attribute's values are retrieved.</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;,</span></span><br><span class=\"line\"><span class=\"comment\">\t* \t\t\t\t'Attribute'=&amp;gt;array(array('Name'=&amp;gt;,'Value'=&amp;gt;), ...))</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get_attributes</span><span class=\"params\">($domain, $item, $attribute = <span class=\"string\">''</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'GetAttributes'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'ItemName'</span> =&amp;gt; $item</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($attribute)</span><br><span class=\"line\">\t\t\t$params[<span class=\"string\">'AttributeName'</span>] = $attribute;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t* AWS SimpleDB API - Query</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string  $domain\t\t// The domain name</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string  $query\t\t\t// The query to run on this domain</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> string  $next = ''\t\t// OPTIONAL - token supplied on last paged call</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@param</span> integer $max = 100\t\t// OPTIONAL - max items you want returned 1-250, default = 100</span></span><br><span class=\"line\"><span class=\"comment\">\t*</span></span><br><span class=\"line\"><span class=\"comment\">\t* <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;,</span></span><br><span class=\"line\"><span class=\"comment\">\t* \t\t\t\t'ItemName'=&amp;gt;array('...', ...))</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">query</span><span class=\"params\">($domain, $query, $next = <span class=\"string\">''</span>, $max = <span class=\"number\">0</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\t$params = <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Action'</span> =&amp;gt; <span class=\"string\">'Query'</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'DomainName'</span> =&amp;gt; $domain,</span><br><span class=\"line\">\t\t\t<span class=\"string\">'QueryExpression'</span> =&amp;gt; $query</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($max &amp;gt; <span class=\"number\">250</span>) $max = <span class=\"number\">250</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($max &amp;gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t$params[<span class=\"string\">'MaxNumberOfItems'</span>] = $max;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ($next)</span><br><span class=\"line\">\t\t\t$params[<span class=\"string\">'NextToken'</span>] = $next;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;post($params);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Sign the parameters, following AWS version 1 signing</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array $params\t\t\t// array of all (except for the signiture) params to be passed to amazon</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> string\t\t\t\t// signature string</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sign</span><span class=\"params\">($params)</span> </span>&#123;</span><br><span class=\"line\">\t\tuksort($params, <span class=\"string\">'strnatcasecmp'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$data = <span class=\"string\">''</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">foreach</span> ($params <span class=\"keyword\">as</span> $key=&amp;gt;$value) &#123;</span><br><span class=\"line\">\t\t\t$data .= $key . $value;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> base64_encode (\tpack(&amp;quot;H*&amp;quot;, sha1((str_pad(<span class=\"keyword\">$this</span>-&amp;gt;secret_key, <span class=\"number\">64</span>, chr(<span class=\"number\">0x00</span>)) ^ (str_repeat(chr(<span class=\"number\">0x5c</span>), <span class=\"number\">64</span>))) .</span><br><span class=\"line\">\t\t\t\t\t\t\t\tpack(&amp;quot;H*&amp;quot;, sha1((str_pad(<span class=\"keyword\">$this</span>-&amp;gt;secret_key, <span class=\"number\">64</span>, chr(<span class=\"number\">0x00</span>)) ^ (str_repeat(chr(<span class=\"number\">0x36</span>), <span class=\"number\">64</span>))) .</span><br><span class=\"line\">\t\t\t\t\t\t\t\t$data)))) );</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * POST to AWS SimpleDB and then parse the response.</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> array $params\t\t\t// all params to pass on the post</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@return</span> array('status'=&amp;gt;array('code'=&amp;gt;, 'message'=&amp;gt;), 'RequestId'=&amp;gt;, 'BoxUsage'=&amp;gt;, ...)</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">post</span><span class=\"params\">($params)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Add all of the common parameters needed by AWS SimpleDB</span></span><br><span class=\"line\">\t\t$params[<span class=\"string\">'AWSAccessKeyId'</span>]\t= <span class=\"keyword\">$this</span>-&amp;gt;access_key;</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'Timestamp'</span>] \t\t= gmdate(<span class=\"keyword\">self</span>::$timestamp_format, time());</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'Version'</span>] \t\t\t= <span class=\"keyword\">self</span>::$api_version;</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'SignatureVersion'</span>]\t= <span class=\"keyword\">self</span>::$signature_version;</span><br><span class=\"line\">\t\t$params[<span class=\"string\">'Signature'</span>] \t\t= <span class=\"keyword\">$this</span>-&amp;gt;sign($params);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Generate the POST request</span></span><br><span class=\"line\">\t\t$content = http_build_query($params);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$post  = <span class=\"string\">'POST / HTTP/1.0'</span>\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'Host: '</span> \t\t\t. <span class=\"keyword\">self</span>::$service_endpoint \t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'Content-Type: '</span> \t. <span class=\"string\">'application/x-www-form-urlencoded; charset=utf-8'</span>\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'Content-Length: '</span> . strlen($content)\t\t\t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= <span class=\"string\">'User-Agent: '</span> \t. <span class=\"keyword\">self</span>::$user_agent \t\t\t\t\t\t\t\t\t. &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  &amp;quot;\\r\\n&amp;quot;;</span><br><span class=\"line\">\t\t$post .= $content;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$socket = @fsockopen(<span class=\"keyword\">self</span>::$service_endpoint, <span class=\"number\">80</span>, $errno, $errstr, <span class=\"number\">10</span>);</span><br><span class=\"line\">  \t\t<span class=\"keyword\">if</span> ($socket) &#123;</span><br><span class=\"line\">\t\t\tfwrite($socket, $post);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t$response = stream_get_contents($socket);</span><br><span class=\"line\">\t\t\tfclose($socket);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Parse the response</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">$this</span>-&amp;gt;format_result($response);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Return a fail result</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">array</span>(<span class=\"string\">'status'</span> =&amp;gt; <span class=\"keyword\">array</span>(<span class=\"string\">'code'</span> =&amp;gt; <span class=\"number\">404</span>, <span class=\"string\">'message'</span> =&amp;gt; <span class=\"string\">'Not Found'</span>),</span><br><span class=\"line\">\t\t\t<span class=\"string\">'Error'</span> =&amp;gt; <span class=\"keyword\">array</span>(<span class=\"string\">'Code'</span> =&amp;gt; $errno, <span class=\"string\">'Message'</span> =&amp;gt;</span><br><span class=\"line\">\t\t\t\t<span class=\"string\">'Could not connect to '</span> . <span class=\"keyword\">$this</span>-&amp;gt;$service_endpoint . &amp;quot; ($errstr)&amp;quot;</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t * Take the XML document returned by AWS SimpleDB, and transform it into a hash</span></span><br><span class=\"line\"><span class=\"comment\">\t *</span></span><br><span class=\"line\"><span class=\"comment\">\t * <span class=\"doctag\">@param</span> string $result\t\t// the full http response string from SimpleDB</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">format_result</span><span class=\"params\">($result)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">list</span>($http_headers, $content) = explode(&amp;quot;\\r\\n\\r\\n&amp;quot;, $result, <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t$header_lines = explode(&amp;quot;\\r\\n&amp;quot;, $http_headers);</span><br><span class=\"line\">\t\t<span class=\"keyword\">list</span>($protocol, $code, $message) = explode(&amp;quot; &amp;quot;, $header_lines[<span class=\"number\">0</span>], <span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// record the http status</span></span><br><span class=\"line\">\t\t$formatted = <span class=\"keyword\">array</span>(<span class=\"string\">'status'</span> =&amp;gt; <span class=\"keyword\">array</span>(<span class=\"string\">'code'</span> =&amp;gt; $code, <span class=\"string\">'message'</span> =&amp;gt; $message));</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t$xml = simplexml_load_string($content);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Look for Errors</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;Errors)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'RequestId'</span>] = (string)$xml-&amp;gt;RequestId;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'Error'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;Errors-&amp;gt;Error <span class=\"keyword\">as</span> $error) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'Error'</span>], <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Code'</span> =&amp;gt; (string)$error-&amp;gt;Code,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Message'</span> =&amp;gt; (string)$error-&amp;gt;Message</span><br><span class=\"line\">\t\t\t\t));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> $formatted;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Get the metadata for this request</span></span><br><span class=\"line\">\t\t$metadata = $xml-&amp;gt;ResponseMetadata;</span><br><span class=\"line\">\t\t$formatted[<span class=\"string\">'RequestId'</span>] = (string)$metadata-&amp;gt;RequestId;</span><br><span class=\"line\">\t\t$formatted[<span class=\"string\">'BoxUsage'</span>] = (string)$metadata-&amp;gt;BoxUsage;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// GetAttributes Response</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;GetAttributesResult)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'Attribute'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;GetAttributesResult-&amp;gt;Attribute <span class=\"keyword\">as</span> $attribute) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'Attribute'</span>], <span class=\"keyword\">array</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Name'</span> =&amp;gt; (string)$attribute-&amp;gt;Name,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">'Value'</span> =&amp;gt; (string)$attribute-&amp;gt;Value</span><br><span class=\"line\">\t\t\t\t));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// ListDomains Response</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;ListDomainsResult)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'DomainName'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;ListDomainsResult-&amp;gt;DomainName <span class=\"keyword\">as</span> $domain) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'DomainName'</span>], (string)$domain);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;ListDomainsResult-&amp;gt;NextToken)) &#123;</span><br><span class=\"line\">\t\t\t\t$formatted[<span class=\"string\">'NextToken'</span>] = (string)$xml-&amp;gt;ListDomainsResult-&amp;gt;NextToken;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// Query Response</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;QueryResult)) &#123;</span><br><span class=\"line\">\t\t\t$formatted[<span class=\"string\">'ItemName'</span>] = <span class=\"keyword\">array</span>();</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">foreach</span>($xml-&amp;gt;QueryResult-&amp;gt;ItemName <span class=\"keyword\">as</span> $item) &#123;</span><br><span class=\"line\">\t\t\t\tarray_push($formatted[<span class=\"string\">'ItemName'</span>], (string)$item);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (<span class=\"keyword\">isset</span>($xml-&amp;gt;QueryResult-&amp;gt;NextToken)) &#123;</span><br><span class=\"line\">\t\t\t\t$formatted[<span class=\"string\">'NextToken'</span>] = (string)$xml-&amp;gt;QueryResult-&amp;gt;NextToken;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> $formatted;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">?&amp;gt;</span><br></pre></td></tr></table></figure>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjwavei4w0001v1ppeocbcus5","category_id":"cjwavei530004v1ppffer9uiz","_id":"cjwavei5c000ev1ppud4podxj"},{"post_id":"cjwavei550007v1pphi2xlqmv","category_id":"cjwavei58000av1ppb75vns9s","_id":"cjwavei5f000jv1pp1zx1iu1k"},{"post_id":"cjwavei5d000hv1pp8nh34sl1","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei5i000ov1pp1byfy1f9"},{"post_id":"cjwavei560008v1ppi3zs3c81","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei5j000sv1ppdvxwxjjf"},{"post_id":"cjwavei5g000mv1ppd4we6pqm","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5k000uv1ppkpliwfk7"},{"post_id":"cjwavei580009v1ppmkblulbr","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5l000wv1ppatvm6du6"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5s0010v1ppi4qbszau"},{"post_id":"cjwavei5j000rv1ppllk0b7y0","category_id":"cjwavei58000av1ppb75vns9s","_id":"cjwavei5s0012v1pp5x8lfug7"},{"post_id":"cjwavei59000cv1ppwl27r5re","category_id":"cjwavei5i000pv1ppkz7mkd76","_id":"cjwavei5u0016v1pppe6jf8lw"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5v0018v1pptxa3wbj7"},{"post_id":"cjwavei5r000zv1pp2fceateh","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5w001cv1ppv6izpt3y"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5x001fv1ppjjmln3uy"},{"post_id":"cjwavei5s0011v1ppvwkl1k0u","category_id":"cjwavei58000av1ppb75vns9s","_id":"cjwavei5y001jv1ppmvr9ck3v"},{"post_id":"cjwavei5t0015v1ppjg2o457s","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei5z001mv1ppgyzpkwl6"},{"post_id":"cjwavei5e000iv1pp0jqihwwc","category_id":"cjwavei5t0013v1ppgpdlipym","_id":"cjwavei60001pv1ppvj4buzax"},{"post_id":"cjwavei5u0017v1ppjz0e52el","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei62001tv1ppw0hp3gi9"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei63001wv1ppxk1r8bcw"},{"post_id":"cjwavei5k000tv1ppcb2jq6p5","category_id":"cjwavei5v0019v1ppjx0cxk9i","_id":"cjwavei640020v1ppjtg4u9r6"},{"post_id":"cjwavei5x001ev1ppp5j27tta","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei650022v1ppxhzf9r83"},{"post_id":"cjwavei5y001iv1ppsi2w0bxn","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei660025v1pphvqgbrid"},{"post_id":"cjwavei5z001lv1pp1uxsiueu","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei670027v1pp49jmax34"},{"post_id":"cjwavei60001ov1ppr8evdsd9","category_id":"cjwavei5v0019v1ppjx0cxk9i","_id":"cjwavei68002av1pprp6gejcg"},{"post_id":"cjwavei61001sv1pp0p469obf","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei69002dv1pp1uw7jsgj"},{"post_id":"cjwavei62001vv1ppvcgc4zsz","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6a002fv1ppe9eo3d4l"},{"post_id":"cjwavei64001zv1ppj5i7pej3","category_id":"cjwavei5t0013v1ppgpdlipym","_id":"cjwavei6b002iv1ppny40mfsh"},{"post_id":"cjwavei650021v1ppgnu6sijj","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei6c002kv1ppkj4zztf2"},{"post_id":"cjwavei660024v1pptyet6ec8","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6e002nv1pp4w09llua"},{"post_id":"cjwavei670029v1ppxlu83ras","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6f002pv1pptguiewvg"},{"post_id":"cjwavei69002cv1pprh8q4ndk","category_id":"cjwavei58000av1ppb75vns9s","_id":"cjwavei6g002sv1ppok64djcs"},{"post_id":"cjwavei69002ev1ppmev526ck","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6h002tv1ppi4oscuu8"},{"post_id":"cjwavei670026v1ppucbbrzjs","category_id":"cjwavei68002bv1pp0kbydan7","_id":"cjwavei6h002vv1ppu93e9cs2"},{"post_id":"cjwavei6a002hv1ppuwfr38nd","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6i002xv1ppugs6b4j8"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6i002zv1ppp7oz8kk8"},{"post_id":"cjwavei6d002mv1ppx0wap8jo","category_id":"cjwavei5c000fv1pp1jcraztf","_id":"cjwavei6i0032v1ppuupntf5a"},{"post_id":"cjwavei6e002ov1ppmkqujjzm","category_id":"cjwavei58000av1ppb75vns9s","_id":"cjwavei6i0034v1pp08doje6e"},{"post_id":"cjwavei6g002rv1ppps62o5u4","category_id":"cjwavei5g000kv1ppqw29bxsq","_id":"cjwavei6i0037v1ppky6qkqhr"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","category_id":"cjwavei58000av1ppb75vns9s","_id":"cjwaveis600cgv1ppo3z6u27m"},{"post_id":"cjwaveis200cbv1ppysp6vmzs","category_id":"cjwavei5v0019v1ppjx0cxk9i","_id":"cjwaveis600civ1ppfsnmgkhc"}],"PostTag":[{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei540005v1ppjm1kw5hp","_id":"cjwavei5x001dv1pplmid298q"},{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei58000bv1pp8t4xblzc","_id":"cjwavei5y001gv1ppzl879eu5"},{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei5c000gv1ppfc35htpp","_id":"cjwavei5z001kv1ppfci7aqra"},{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei5g000lv1ppfcvp49o2","_id":"cjwavei60001nv1ppy2lztmrw"},{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei5j000qv1ppv4u7yu7v","_id":"cjwavei61001rv1pp0i3t3w49"},{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei5l000yv1ppnke1hnat","_id":"cjwavei62001uv1pp7znqsr2m"},{"post_id":"cjwavei4w0001v1ppeocbcus5","tag_id":"cjwavei5t0014v1ppoqr7kdr2","_id":"cjwavei63001yv1ppjtzzitd5"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei5v001av1pp1eoa67pv","_id":"cjwavei6h002wv1ppw10ybugn"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei5y001hv1pp1r5sf6f1","_id":"cjwavei6i002yv1pps0yomua7"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei60001qv1pppuxp5fn2","_id":"cjwavei6i0031v1pphln4fy3h"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei63001xv1pp95eret76","_id":"cjwavei6i0033v1ppupk44c62"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei650023v1pp9hj09zmh","_id":"cjwavei6i0036v1ppg3iemfs7"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei670028v1pp3zbs6b65","_id":"cjwavei6i0038v1ppczs18cwq"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei6a002gv1pphcw26xjf","_id":"cjwavei6j003av1pp3gaxy7i1"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei6c002lv1pp8uc39yn4","_id":"cjwavei6j003bv1ppn2cauj6y"},{"post_id":"cjwavei550007v1pphi2xlqmv","tag_id":"cjwavei6g002qv1pp7j8in2vt","_id":"cjwavei6j003cv1pprj1r0jb2"},{"post_id":"cjwavei560008v1ppi3zs3c81","tag_id":"cjwavei6h002uv1pplmqbl86v","_id":"cjwavei6j003ev1pptubq43dm"},{"post_id":"cjwavei560008v1ppi3zs3c81","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei6j003fv1ppamkb4izd"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6i0035v1ppi5njc0la","_id":"cjwavei6m003mv1pphj9fu8lw"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei6m003nv1pp7qqem1p2"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6j003dv1pp349px623","_id":"cjwavei6o003pv1ppmce4lyg8"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6j003gv1pp2uog8sr0","_id":"cjwavei6o003qv1pp7nlb5qn4"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6l003hv1ppzvci4ggk","_id":"cjwavei6o003sv1pp6dt6jbha"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6l003iv1ppyola732a","_id":"cjwavei6o003tv1ppxqdcyrpk"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6l003jv1pp37vsx93t","_id":"cjwavei6o003vv1ppm6uipl90"},{"post_id":"cjwavei580009v1ppmkblulbr","tag_id":"cjwavei6l003kv1ppktjf2jgr","_id":"cjwavei6p003wv1pp4w9dtp82"},{"post_id":"cjwavei59000cv1ppwl27r5re","tag_id":"cjwavei6m003lv1pp7n7afpx4","_id":"cjwavei6p003zv1pphhsj5pw3"},{"post_id":"cjwavei59000cv1ppwl27r5re","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei6p0040v1pph6ysqbz9"},{"post_id":"cjwavei59000cv1ppwl27r5re","tag_id":"cjwavei6o003rv1pptf6xlc5n","_id":"cjwavei6q0042v1ppc6nd56x9"},{"post_id":"cjwavei59000cv1ppwl27r5re","tag_id":"cjwavei6j003gv1pp2uog8sr0","_id":"cjwavei6q0043v1ppy5vlyy0i"},{"post_id":"cjwavei59000cv1ppwl27r5re","tag_id":"cjwavei6p003xv1ppy05jju7f","_id":"cjwavei6q0045v1ppkluo2p4a"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6p003yv1pph3jm3vqf","_id":"cjwavei6r004bv1ppn7v4yj6w"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6p0041v1ppbfaix6yj","_id":"cjwavei6r004cv1ppzwhuyr88"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6q0044v1pplflmm8v4","_id":"cjwavei6r004ev1pptve5t25w"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6q0046v1pp7am29ud6","_id":"cjwavei6r004fv1ppi6ys6fa7"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6q0047v1ppklz00t1p","_id":"cjwavei6r004hv1ppdvkmf8j0"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6q0048v1ppyk8ho0pb","_id":"cjwavei6s004iv1ppfq6rnx8f"},{"post_id":"cjwavei5a000dv1pp8f9vz5ui","tag_id":"cjwavei6q0049v1ppz046tneb","_id":"cjwavei6s004kv1ppqseum1vv"},{"post_id":"cjwavei5d000hv1pp8nh34sl1","tag_id":"cjwavei6q004av1ppc9rfaqep","_id":"cjwavei6s004nv1pp1enpekxd"},{"post_id":"cjwavei5d000hv1pp8nh34sl1","tag_id":"cjwavei6r004dv1ppzbqgobgm","_id":"cjwavei6s004ov1ppgm58c310"},{"post_id":"cjwavei5d000hv1pp8nh34sl1","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei6t004qv1ppt2onsq8o"},{"post_id":"cjwavei5d000hv1pp8nh34sl1","tag_id":"cjwavei6s004jv1pp6aifqaoy","_id":"cjwavei6t004rv1pp80qjqoqr"},{"post_id":"cjwavei5d000hv1pp8nh34sl1","tag_id":"cjwavei6s004lv1ppadza2b7v","_id":"cjwavei6t004tv1ppp83zkm3m"},{"post_id":"cjwavei5e000iv1pp0jqihwwc","tag_id":"cjwavei6s004mv1ppvoi11j5v","_id":"cjwavei6t004uv1pp6jt9r5v3"},{"post_id":"cjwavei5e000iv1pp0jqihwwc","tag_id":"cjwavei6s004pv1ppvupx022k","_id":"cjwavei6u004wv1ppu9turqus"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","tag_id":"cjwavei6t004sv1pps3qoc6wq","_id":"cjwavei6w0052v1ppz11e6qq0"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","tag_id":"cjwavei6u004vv1ppzzwfrnra","_id":"cjwavei6w0053v1ppztvz18b5"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","tag_id":"cjwavei6u004xv1pp4b2jwn4o","_id":"cjwavei6w0055v1ppzv4i5r3p"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","tag_id":"cjwavei6u004yv1pp5l3dymas","_id":"cjwavei6w0056v1pp3wuwj9zy"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","tag_id":"cjwavei6v004zv1pp10qmp5ff","_id":"cjwavei6w0058v1pp0k2sg2n1"},{"post_id":"cjwavei5i000nv1pppkgh8jkv","tag_id":"cjwavei6v0050v1ppiypcwvaq","_id":"cjwavei6x0059v1ppvcinhz0q"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6v0051v1pphay88me5","_id":"cjwavei6y005gv1ppm0960x3f"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6w0054v1pptah8b5dj","_id":"cjwavei6y005hv1pph35mqdm6"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6w0057v1ppa9ov3303","_id":"cjwavei6z005jv1ppbg6vfup4"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6x005av1ppy8lzyp8b","_id":"cjwavei6z005kv1ppjiyitxxn"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6x005bv1ppa9zz3qod","_id":"cjwavei6z005mv1ppktjboty0"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6x005cv1pp5nys41t5","_id":"cjwavei6z005nv1pp4aq9702p"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6x005dv1pp4e4etile","_id":"cjwavei6z005pv1ppdosmh74c"},{"post_id":"cjwavei5l000vv1pph9s1zx8x","tag_id":"cjwavei6x005ev1pp5um6zmyb","_id":"cjwavei6z005qv1ppecv40z4l"},{"post_id":"cjwavei5s0011v1ppvwkl1k0u","tag_id":"cjwavei6x005fv1pp32y7rds3","_id":"cjwavei70005tv1ppb901gerr"},{"post_id":"cjwavei5s0011v1ppvwkl1k0u","tag_id":"cjwavei6y005iv1pp4tdtwdyb","_id":"cjwavei70005uv1pp2f0pjoof"},{"post_id":"cjwavei5s0011v1ppvwkl1k0u","tag_id":"cjwavei6z005lv1pptxguecmu","_id":"cjwavei71005wv1ppbvxnwg09"},{"post_id":"cjwavei5s0011v1ppvwkl1k0u","tag_id":"cjwavei6z005ov1ppqn25441j","_id":"cjwavei71005xv1ppoyh1fsej"},{"post_id":"cjwavei5s0011v1ppvwkl1k0u","tag_id":"cjwavei70005rv1pp5qotdefm","_id":"cjwavei71005zv1ppu1fsaus0"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei70005sv1ppgsz2xbsf","_id":"cjwavei730066v1pp8xm0tly5"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei730067v1ppcz5q8cud"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei71005yv1ppd8lzg1qh","_id":"cjwavei730069v1ppnbzyeyav"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei710060v1ppwo7s6zr3","_id":"cjwavei73006av1ppjqbq8aow"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei710061v1ppnkeakipe","_id":"cjwavei74006cv1pp5m3vcco5"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei710062v1pp58arg3cp","_id":"cjwavei74006dv1ppg5xb8zml"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei6p003xv1ppy05jju7f","_id":"cjwavei74006fv1pp4k2e7pjd"},{"post_id":"cjwavei5t0015v1ppjg2o457s","tag_id":"cjwavei720064v1pp9in3a0zk","_id":"cjwavei74006gv1pp8xf2ofk5"},{"post_id":"cjwavei5u0017v1ppjz0e52el","tag_id":"cjwavei720065v1pplbyyh13c","_id":"cjwavei75006jv1pp18s6edph"},{"post_id":"cjwavei5u0017v1ppjz0e52el","tag_id":"cjwavei6q004av1ppc9rfaqep","_id":"cjwavei75006kv1ppl1wslj4y"},{"post_id":"cjwavei5u0017v1ppjz0e52el","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei76006mv1pp919ty4gy"},{"post_id":"cjwavei5u0017v1ppjz0e52el","tag_id":"cjwavei74006ev1pp3f5fnpc2","_id":"cjwavei76006nv1ppxfxugjz1"},{"post_id":"cjwavei5u0017v1ppjz0e52el","tag_id":"cjwavei6s004lv1ppadza2b7v","_id":"cjwavei76006pv1pp6q18lgcr"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei75006iv1pp7l6gk93o","_id":"cjwavei78006wv1ppbfhlx65e"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei75006lv1ppyumzm0ff","_id":"cjwavei78006xv1pp9pty79c8"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei76006ov1ppgs63pom3","_id":"cjwavei78006zv1ppezqct1e7"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei780070v1ppjpdou837"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei77006rv1pp171m6796","_id":"cjwavei790072v1pp48frowbu"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei77006sv1ppqrh8zn0a","_id":"cjwavei790073v1pp6ur6dfy5"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei77006tv1ppmg8nl2e5","_id":"cjwavei790075v1pp6ovfeok9"},{"post_id":"cjwavei5w001bv1pp5kddu8i9","tag_id":"cjwavei77006uv1pphkwxgxzb","_id":"cjwavei790076v1ppr46w39rf"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei78006vv1pp73rptvsr","_id":"cjwavei7a007bv1ppesft6akh"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei78006yv1ppcmxeivkz","_id":"cjwavei7a007cv1ppsand56zn"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei7a007ev1pppb8qwwii"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei790074v1pp05zaeo99","_id":"cjwavei7a007fv1ppk6x8pk1l"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei790077v1ppibk01v5j","_id":"cjwavei7b007hv1pp00psxxxj"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei790078v1pp1c51te4p","_id":"cjwavei7b007iv1pph8g26zoj"},{"post_id":"cjwavei5x001ev1ppp5j27tta","tag_id":"cjwavei7a0079v1ppa05sbs82","_id":"cjwavei7b007kv1pp7aj3hrwg"},{"post_id":"cjwavei5y001iv1ppsi2w0bxn","tag_id":"cjwavei7a007av1ppm4i76tu5","_id":"cjwavei7c007nv1ppi3da978c"},{"post_id":"cjwavei5y001iv1ppsi2w0bxn","tag_id":"cjwavei7a007dv1ppcv91247s","_id":"cjwavei7f007ov1ppb38miocn"},{"post_id":"cjwavei5y001iv1ppsi2w0bxn","tag_id":"cjwavei7b007gv1ppy24pig90","_id":"cjwavei7g007qv1pp6rwoe60e"},{"post_id":"cjwavei5y001iv1ppsi2w0bxn","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei7g007rv1ppkvyz55si"},{"post_id":"cjwavei5y001iv1ppsi2w0bxn","tag_id":"cjwavei77006sv1ppqrh8zn0a","_id":"cjwavei7h007tv1ppvjl57ov6"},{"post_id":"cjwavei5z001lv1pp1uxsiueu","tag_id":"cjwavei7c007mv1pp0yonx31k","_id":"cjwavei7i007xv1ppr98j66gp"},{"post_id":"cjwavei5z001lv1pp1uxsiueu","tag_id":"cjwavei6r004dv1ppzbqgobgm","_id":"cjwavei7i007yv1ppl3pot629"},{"post_id":"cjwavei5z001lv1pp1uxsiueu","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei7j0080v1ppfndffwds"},{"post_id":"cjwavei5z001lv1pp1uxsiueu","tag_id":"cjwavei6s004lv1ppadza2b7v","_id":"cjwavei7j0081v1ppir50xy7i"},{"post_id":"cjwavei5z001lv1pp1uxsiueu","tag_id":"cjwavei790078v1pp1c51te4p","_id":"cjwavei7j0083v1ppga207sa5"},{"post_id":"cjwavei60001ov1ppr8evdsd9","tag_id":"cjwavei7i007wv1ppv6z9ojd8","_id":"cjwavei7k0088v1pp1jzocufl"},{"post_id":"cjwavei60001ov1ppr8evdsd9","tag_id":"cjwavei7i007zv1ppyvncjieb","_id":"cjwavei7k0089v1pph51rags3"},{"post_id":"cjwavei60001ov1ppr8evdsd9","tag_id":"cjwavei7j0082v1pph2vhcjlz","_id":"cjwavei7l008bv1pppl1ejg1q"},{"post_id":"cjwavei60001ov1ppr8evdsd9","tag_id":"cjwavei7j0084v1pps5p8hdcb","_id":"cjwavei7l008cv1pp6zk38hyf"},{"post_id":"cjwavei60001ov1ppr8evdsd9","tag_id":"cjwavei7j0085v1pp2z8sd39i","_id":"cjwavei7l008ev1ppeiledq1d"},{"post_id":"cjwavei60001ov1ppr8evdsd9","tag_id":"cjwavei7k0086v1ppiy5ur0lx","_id":"cjwavei7m008fv1pppe163or1"},{"post_id":"cjwavei61001sv1pp0p469obf","tag_id":"cjwavei7c007mv1pp0yonx31k","_id":"cjwavei7n008jv1pp30slnt8x"},{"post_id":"cjwavei61001sv1pp0p469obf","tag_id":"cjwavei6r004dv1ppzbqgobgm","_id":"cjwavei7n008kv1pprrrk74uj"},{"post_id":"cjwavei61001sv1pp0p469obf","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei7n008mv1ppbzpayn1v"},{"post_id":"cjwavei61001sv1pp0p469obf","tag_id":"cjwavei6s004lv1ppadza2b7v","_id":"cjwavei7n008nv1ppfsl2x7zo"},{"post_id":"cjwavei61001sv1pp0p469obf","tag_id":"cjwavei790078v1pp1c51te4p","_id":"cjwavei7o008pv1pp2eme11xt"},{"post_id":"cjwavei62001vv1ppvcgc4zsz","tag_id":"cjwavei7n008iv1ppuie3veqb","_id":"cjwavei7q008tv1ppv7zv50ob"},{"post_id":"cjwavei62001vv1ppvcgc4zsz","tag_id":"cjwavei7n008lv1ppdk2gaccl","_id":"cjwavei7q008uv1pps2u86978"},{"post_id":"cjwavei62001vv1ppvcgc4zsz","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei7r008wv1ppv17mw90y"},{"post_id":"cjwavei62001vv1ppvcgc4zsz","tag_id":"cjwavei7o008qv1pp1cia74yl","_id":"cjwavei7r008xv1ppnebv51bx"},{"post_id":"cjwavei62001vv1ppvcgc4zsz","tag_id":"cjwavei7p008rv1ppmjuelr8u","_id":"cjwavei7s008zv1pppx34sqge"},{"post_id":"cjwavei64001zv1ppj5i7pej3","tag_id":"cjwavei6s004mv1ppvoi11j5v","_id":"cjwavei7s0090v1ppooon3h8c"},{"post_id":"cjwavei64001zv1ppj5i7pej3","tag_id":"cjwavei6s004pv1ppvupx022k","_id":"cjwavei7t0092v1pp662bfezg"},{"post_id":"cjwavei650021v1ppgnu6sijj","tag_id":"cjwavei7c007mv1pp0yonx31k","_id":"cjwavei7u0097v1pp7wmfjmjg"},{"post_id":"cjwavei650021v1ppgnu6sijj","tag_id":"cjwavei6i0030v1ppz0dxhlah","_id":"cjwavei7u0098v1pp68h9qf0u"},{"post_id":"cjwavei650021v1ppgnu6sijj","tag_id":"cjwavei7t0093v1ppndegvk4e","_id":"cjwavei7v009av1ppic199tcv"},{"post_id":"cjwavei650021v1ppgnu6sijj","tag_id":"cjwavei6s004lv1ppadza2b7v","_id":"cjwavei7v009bv1pppzkh2d8f"},{"post_id":"cjwavei650021v1ppgnu6sijj","tag_id":"cjwavei790078v1pp1c51te4p","_id":"cjwavei7v009dv1pp6i6isxqc"},{"post_id":"cjwavei660024v1pptyet6ec8","tag_id":"cjwavei7u0096v1ppi5gl7nfp","_id":"cjwavei7w009gv1ppvdpv5o00"},{"post_id":"cjwavei660024v1pptyet6ec8","tag_id":"cjwavei70005sv1ppgsz2xbsf","_id":"cjwavei7w009hv1pp3ea4ocwg"},{"post_id":"cjwavei660024v1pptyet6ec8","tag_id":"cjwavei7v009cv1ppwoprllfd","_id":"cjwavei7w009jv1ppeuino8ie"},{"post_id":"cjwavei660024v1pptyet6ec8","tag_id":"cjwavei7v009ev1ppcm01dbkf","_id":"cjwavei7w009kv1ppfpl9caya"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7v009fv1pppgfgpcil","_id":"cjwavei7z009wv1pp2pkwrbq7"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7w009iv1pp0ylqex69","_id":"cjwavei7z009xv1ppzh8rxq2f"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7w009lv1pp4dosh6tv","_id":"cjwavei7z009zv1ppcmb5ltfs"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7w009mv1ppx7f4jcy1","_id":"cjwavei7z00a0v1ppo48i35b5"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7w009nv1pp4zwvhvcc","_id":"cjwavei8000a2v1ppubta9xxg"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7x009ov1pp97q1p2af","_id":"cjwavei8000a3v1ppkj1y8tmd"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7x009pv1ppm9kz1gwo","_id":"cjwavei8000a5v1ppln10fkif"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7x009qv1pphbcp01ju","_id":"cjwavei8100a6v1ppjxs42xsu"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7x009rv1pp7t3cw55m","_id":"cjwavei8100a8v1ppoc6ofljb"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7x009sv1ppfzrn7c1p","_id":"cjwavei8100a9v1ppkc7bmhuj"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7x009tv1ppd9otg4fu","_id":"cjwavei8100abv1ppg2icggjr"},{"post_id":"cjwavei670026v1ppucbbrzjs","tag_id":"cjwavei7y009uv1pptvj3k0v7","_id":"cjwavei8200acv1ppk3at0v2n"},{"post_id":"cjwavei670029v1ppxlu83ras","tag_id":"cjwavei7a007av1ppm4i76tu5","_id":"cjwavei8200aev1pp3pvhul7y"},{"post_id":"cjwavei670029v1ppxlu83ras","tag_id":"cjwavei7z009yv1ppiuo3411c","_id":"cjwavei8200afv1pp8m7dzsho"},{"post_id":"cjwavei670029v1ppxlu83ras","tag_id":"cjwavei7b007gv1ppy24pig90","_id":"cjwavei8300ahv1ppdtxvsi68"},{"post_id":"cjwavei670029v1ppxlu83ras","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei8300aiv1ppo5qaycxk"},{"post_id":"cjwavei670029v1ppxlu83ras","tag_id":"cjwavei8100a7v1ppu9njaw14","_id":"cjwavei8300akv1ppszxm7ozz"},{"post_id":"cjwavei670029v1ppxlu83ras","tag_id":"cjwavei6j003gv1pp2uog8sr0","_id":"cjwavei8300alv1pp797dhuc9"},{"post_id":"cjwavei69002cv1pprh8q4ndk","tag_id":"cjwavei8200adv1ppd8f3tark","_id":"cjwavei8300anv1ppu7wqwnys"},{"post_id":"cjwavei69002cv1pprh8q4ndk","tag_id":"cjwavei8200agv1ppi1dwkssn","_id":"cjwavei8300aov1ppal6q6bqy"},{"post_id":"cjwavei69002cv1pprh8q4ndk","tag_id":"cjwavei8300ajv1pp6s0kzv0h","_id":"cjwavei8400aqv1ppt9vt65y7"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8300amv1pp0s7hmii2","_id":"cjwavei8600axv1ppnersnkcq"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8300apv1ppwtpt6zed","_id":"cjwavei8600ayv1pppxdcphbv"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8400arv1pp22fjxv03","_id":"cjwavei8600b0v1ppodbvrt93"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8400asv1ppgsk6gz8z","_id":"cjwavei8600b1v1pp55my9q31"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8400atv1pp56re1uny","_id":"cjwavei8600b3v1ppdin7cm5v"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8500auv1pp9i8pe095","_id":"cjwavei8600b4v1ppx0pcstlk"},{"post_id":"cjwavei69002ev1ppmev526ck","tag_id":"cjwavei8500avv1pp9g9v0bbj","_id":"cjwavei8700b6v1pp7m4malt2"},{"post_id":"cjwavei6a002hv1ppuwfr38nd","tag_id":"cjwavei7a007dv1ppcv91247s","_id":"cjwavei8800b8v1pp544oype6"},{"post_id":"cjwavei6a002hv1ppuwfr38nd","tag_id":"cjwavei8600azv1pp185out7e","_id":"cjwavei8800b9v1pph2vj3fvz"},{"post_id":"cjwavei6a002hv1ppuwfr38nd","tag_id":"cjwavei8600b2v1ppgpwksm6g","_id":"cjwavei8800bbv1ppmt396x9h"},{"post_id":"cjwavei6a002hv1ppuwfr38nd","tag_id":"cjwavei8700b5v1ppor78ppev","_id":"cjwavei8800bcv1pptentrii7"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","tag_id":"cjwavei8400asv1ppgsk6gz8z","_id":"cjwavei8a00biv1pp67bu27yd"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","tag_id":"cjwavei8800bav1ppp27r0qv3","_id":"cjwavei8a00bjv1pp0gg30a0s"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","tag_id":"cjwavei8800bdv1ppboehbjkn","_id":"cjwavei8a00blv1ppwb94qhuy"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","tag_id":"cjwavei8800bev1pp80ekk5tu","_id":"cjwavei8a00bmv1ppveavhcgg"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","tag_id":"cjwavei8900bfv1ppo47uw1m8","_id":"cjwavei8a00bov1ppyhhg2zf5"},{"post_id":"cjwavei6b002jv1pp40x6rwoj","tag_id":"cjwavei8900bgv1pp2a8ri6kn","_id":"cjwavei8a00bpv1ppavmpgx66"},{"post_id":"cjwavei6d002mv1ppx0wap8jo","tag_id":"cjwavei7c007mv1pp0yonx31k","_id":"cjwavei8b00brv1pp9ogjqcgu"},{"post_id":"cjwavei6d002mv1ppx0wap8jo","tag_id":"cjwavei8a00bkv1ppzpsdyz4u","_id":"cjwavei8b00bsv1pp0lv244gt"},{"post_id":"cjwavei6d002mv1ppx0wap8jo","tag_id":"cjwavei8a00bnv1pp8f04qc9i","_id":"cjwavei8b00buv1ppi55w4253"},{"post_id":"cjwavei6e002ov1ppmkqujjzm","tag_id":"cjwavei70005sv1ppgsz2xbsf","_id":"cjwavei8c00bxv1pp2hrin9tt"},{"post_id":"cjwavei6e002ov1ppmkqujjzm","tag_id":"cjwavei8b00btv1pp6kijjpp1","_id":"cjwavei8c00byv1ppzt4re9xf"},{"post_id":"cjwavei6e002ov1ppmkqujjzm","tag_id":"cjwavei8b00bvv1pp25bfcus9","_id":"cjwavei8c00c0v1pp51w9jsjx"},{"post_id":"cjwavei6g002rv1ppps62o5u4","tag_id":"cjwavei8c00bwv1ppwkj7ap8o","_id":"cjwavei8d00c4v1pptq53cm3x"},{"post_id":"cjwavei6g002rv1ppps62o5u4","tag_id":"cjwavei8c00bzv1pp8hbq8mwc","_id":"cjwavei8d00c5v1ppmu2mmuyl"},{"post_id":"cjwavei6g002rv1ppps62o5u4","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwavei8d00c6v1ppvvyeccvk"},{"post_id":"cjwavei6g002rv1ppps62o5u4","tag_id":"cjwavei8d00c2v1pppx5l3mzl","_id":"cjwavei8d00c7v1pp563jszia"},{"post_id":"cjwavei6g002rv1ppps62o5u4","tag_id":"cjwavei8d00c3v1pp8vwqrzrn","_id":"cjwavei8d00c8v1ppl8a7n6m7"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","tag_id":"cjwavei6x005fv1pp32y7rds3","_id":"cjwaveis500cdv1ppg5h31hbu"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","tag_id":"cjwavei7b007gv1ppy24pig90","_id":"cjwaveis500cfv1ppnm6oplja"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","tag_id":"cjwavei7z009yv1ppiuo3411c","_id":"cjwaveis600chv1pp6hk5ll09"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","tag_id":"cjwavei8d00c3v1pp8vwqrzrn","_id":"cjwaveis600cjv1pp6hjrajll"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","tag_id":"cjwavei6i0039v1pph5z8s8h1","_id":"cjwaveis600clv1ppet5stkcf"},{"post_id":"cjwaveis100c9v1ppyr9qrzx3","tag_id":"cjwavei5l000yv1ppnke1hnat","_id":"cjwaveis700cmv1ppd6o0s7j0"},{"post_id":"cjwaveis200cbv1ppysp6vmzs","tag_id":"cjwaveis500cev1ppg00ecjeq","_id":"cjwaveis800cpv1ppw9244n5f"},{"post_id":"cjwaveis200cbv1ppysp6vmzs","tag_id":"cjwaveis600ckv1ppsz7p23n1","_id":"cjwaveis800cqv1ppo1cxt3tb"},{"post_id":"cjwaveis200cbv1ppysp6vmzs","tag_id":"cjwaveis700cnv1pprtst0vpm","_id":"cjwaveis800crv1ppszr76xnq"},{"post_id":"cjwaveis200cbv1ppysp6vmzs","tag_id":"cjwavei7j0085v1pp2z8sd39i","_id":"cjwaveis900csv1pp6n5bowd2"},{"post_id":"cjwaveis200cbv1ppysp6vmzs","tag_id":"cjwaveis700cov1ppfw7d6fbk","_id":"cjwaveis900ctv1ppv7fysavw"}],"Tag":[{"name":"browser","_id":"cjwavei540005v1ppjm1kw5hp"},{"name":"css","_id":"cjwavei58000bv1pp8t4xblzc"},{"name":"moz","_id":"cjwavei5c000gv1ppfc35htpp"},{"name":"ms","_id":"cjwavei5g000lv1ppfcvp49o2"},{"name":"prefix","_id":"cjwavei5j000qv1ppv4u7yu7v"},{"name":"web","_id":"cjwavei5l000yv1ppnke1hnat"},{"name":"webkit","_id":"cjwavei5t0014v1ppoqr7kdr2"},{"name":"16 tons","_id":"cjwavei5v001av1pp1eoa67pv"},{"name":"a cappella","_id":"cjwavei5y001hv1pp1r5sf6f1"},{"name":"ambience","_id":"cjwavei60001qv1pppuxp5fn2"},{"name":"in the still of the night","_id":"cjwavei63001xv1pp95eret76"},{"name":"Jacob Morris","_id":"cjwavei650023v1pp9hj09zmh"},{"name":"kiss the girl","_id":"cjwavei670028v1pp3zbs6b65"},{"name":"music","_id":"cjwavei6a002gv1pphcw26xjf"},{"name":"Nathan Morris","_id":"cjwavei6c002lv1pp8uc39yn4"},{"name":"Trevor Watts","_id":"cjwavei6g002qv1pp7j8in2vt"},{"name":"ES 2016","_id":"cjwavei6h002uv1pplmqbl86v"},{"name":"JavaScript","_id":"cjwavei6i0030v1ppz0dxhlah"},{"name":"cliff stoll","_id":"cjwavei6i0035v1ppi5njc0la"},{"name":"internet","_id":"cjwavei6i0039v1pph5z8s8h1"},{"name":"networks","_id":"cjwavei6j003dv1pp349px623"},{"name":"privacy","_id":"cjwavei6j003gv1pp2uog8sr0"},{"name":"the cuckoo's egg","_id":"cjwavei6l003hv1ppzvci4ggk"},{"name":"trust","_id":"cjwavei6l003iv1ppyola732a"},{"name":"virus","_id":"cjwavei6l003jv1pp37vsx93t"},{"name":"worm","_id":"cjwavei6l003kv1ppktjf2jgr"},{"name":"barefoot","_id":"cjwavei6m003lv1pp7n7afpx4"},{"name":"Poetry","_id":"cjwavei6o003rv1pptf6xlc5n"},{"name":"safety","_id":"cjwavei6p003xv1ppy05jju7f"},{"name":"Beta","_id":"cjwavei6p003yv1pph3jm3vqf"},{"name":"Betamax","_id":"cjwavei6p0041v1ppbfaix6yj"},{"name":"Blu-ray","_id":"cjwavei6q0044v1pplflmm8v4"},{"name":"DVD","_id":"cjwavei6q0046v1pp7am29ud6"},{"name":"format war","_id":"cjwavei6q0047v1ppklz00t1p"},{"name":"HD DVD","_id":"cjwavei6q0048v1ppyk8ho0pb"},{"name":"VHS","_id":"cjwavei6q0049v1ppz046tneb"},{"name":"CommonJS","_id":"cjwavei6q004av1ppc9rfaqep"},{"name":"include","_id":"cjwavei6r004dv1ppzbqgobgm"},{"name":"modules","_id":"cjwavei6s004jv1pp6aifqaoy"},{"name":"require","_id":"cjwavei6s004lv1ppadza2b7v"},{"name":"Short Story","_id":"cjwavei6s004mv1ppvoi11j5v"},{"name":"Science Fiction","_id":"cjwavei6s004pv1ppvupx022k"},{"name":"addiction","_id":"cjwavei6t004sv1pps3qoc6wq"},{"name":"entertainment","_id":"cjwavei6u004vv1ppzzwfrnra"},{"name":"Halo","_id":"cjwavei6u004xv1pp4b2jwn4o"},{"name":"self-control","_id":"cjwavei6u004yv1pp5l3dymas"},{"name":"shopping","_id":"cjwavei6v004zv1pp10qmp5ff"},{"name":"video games","_id":"cjwavei6v0050v1ppiypcwvaq"},{"name":"computing","_id":"cjwavei6v0051v1pphay88me5"},{"name":"engineering","_id":"cjwavei6w0054v1pptah8b5dj"},{"name":"equality","_id":"cjwavei6w0057v1ppa9ov3303"},{"name":"minority","_id":"cjwavei6x005av1ppy8lzyp8b"},{"name":"scholarship","_id":"cjwavei6x005bv1ppa9zz3qod"},{"name":"science","_id":"cjwavei6x005cv1pp5nys41t5"},{"name":"Title IX","_id":"cjwavei6x005dv1pp4e4etile"},{"name":"women","_id":"cjwavei6x005ev1pp5um6zmyb"},{"name":"Andrew","_id":"cjwavei6x005fv1pp32y7rds3"},{"name":"Brothers of Linester","_id":"cjwavei6y005iv1pp4tdtwdyb"},{"name":"Julie","_id":"cjwavei6z005lv1pptxguecmu"},{"name":"Taylorsville","_id":"cjwavei6z005ov1ppqn25441j"},{"name":"VanWagoner","_id":"cjwavei70005rv1pp5qotdefm"},{"name":"family","_id":"cjwavei70005sv1ppgsz2xbsf"},{"name":"Internet Safety Podcast","_id":"cjwavei71005yv1ppd8lzg1qh"},{"name":"Internet Safety Wiki","_id":"cjwavei710060v1ppwo7s6zr3"},{"name":"parenting","_id":"cjwavei710061v1ppnkeakipe"},{"name":"podcast","_id":"cjwavei710062v1pp58arg3cp"},{"name":"wiki","_id":"cjwavei720064v1pp9in3a0zk"},{"name":"AMD","_id":"cjwavei720065v1pplbyyh13c"},{"name":"Node.js","_id":"cjwavei74006ev1pp3f5fnpc2"},{"name":"education","_id":"cjwavei75006iv1pp7l6gk93o"},{"name":"flat","_id":"cjwavei75006lv1ppyumzm0ff"},{"name":"globalization","_id":"cjwavei76006ov1ppgs63pom3"},{"name":"preparation","_id":"cjwavei77006rv1pp171m6796"},{"name":"Small World","_id":"cjwavei77006sv1ppqrh8zn0a"},{"name":"The World is Flat","_id":"cjwavei77006tv1ppmg8nl2e5"},{"name":"Thomas Friedman","_id":"cjwavei77006uv1pphkwxgxzb"},{"name":"class","_id":"cjwavei78006vv1pp73rptvsr"},{"name":"inheritance","_id":"cjwavei78006yv1ppcmxeivkz"},{"name":"learn","_id":"cjwavei790074v1pp05zaeo99"},{"name":"oop","_id":"cjwavei790077v1ppibk01v5j"},{"name":"script","_id":"cjwavei790078v1pp1c51te4p"},{"name":"understand","_id":"cjwavei7a0079v1ppa05sbs82"},{"name":"average Joe","_id":"cjwavei7a007av1ppm4i76tu5"},{"name":"communication","_id":"cjwavei7a007dv1ppcv91247s"},{"name":"Google","_id":"cjwavei7b007gv1ppy24pig90"},{"name":"ajax","_id":"cjwavei7c007mv1pp0yonx31k"},{"name":"file upload","_id":"cjwavei7i007wv1ppv6z9ojd8"},{"name":"JSON","_id":"cjwavei7i007zv1ppyvncjieb"},{"name":"multipart","_id":"cjwavei7j0082v1pph2vhcjlz"},{"name":"multipart/form-data","_id":"cjwavei7j0084v1pps5p8hdcb"},{"name":"php","_id":"cjwavei7j0085v1pp2z8sd39i"},{"name":"POST","_id":"cjwavei7k0086v1ppiy5ur0lx"},{"name":"censorship","_id":"cjwavei7n008iv1ppuie3veqb"},{"name":"government","_id":"cjwavei7n008lv1ppdk2gaccl"},{"name":"Online Free Expression Day","_id":"cjwavei7o008qv1pp1cia74yl"},{"name":"Reporters Without Borders","_id":"cjwavei7p008rv1ppmjuelr8u"},{"name":"minify","_id":"cjwavei7t0093v1ppndegvk4e"},{"name":"Charlemagne","_id":"cjwavei7u0096v1ppi5gl7nfp"},{"name":"family history","_id":"cjwavei7v009cv1ppwoprllfd"},{"name":"genealogy","_id":"cjwavei7v009ev1ppcm01dbkf"},{"name":"Christianity","_id":"cjwavei7v009fv1pppgfgpcil"},{"name":"churches","_id":"cjwavei7w009iv1pp0ylqex69"},{"name":"covenants","_id":"cjwavei7w009lv1pp4dosh6tv"},{"name":"doctrine","_id":"cjwavei7w009mv1ppx7f4jcy1"},{"name":"God","_id":"cjwavei7w009nv1pp4zwvhvcc"},{"name":"grace","_id":"cjwavei7x009ov1pp97q1p2af"},{"name":"Heaven","_id":"cjwavei7x009pv1ppm9kz1gwo"},{"name":"Jesus Christ","_id":"cjwavei7x009qv1pphbcp01ju"},{"name":"LDS","_id":"cjwavei7x009rv1pp7t3cw55m"},{"name":"Mormon","_id":"cjwavei7x009sv1ppfzrn7c1p"},{"name":"ordinances","_id":"cjwavei7x009tv1ppd9otg4fu"},{"name":"priesthood","_id":"cjwavei7y009uv1pptvj3k0v7"},{"name":"Facebook","_id":"cjwavei7z009yv1ppiuo3411c"},{"name":"MySpace","_id":"cjwavei8100a7v1ppu9njaw14"},{"name":"Java","_id":"cjwavei8200adv1ppd8f3tark"},{"name":"patterns","_id":"cjwavei8200agv1ppi1dwkssn"},{"name":"problem solving","_id":"cjwavei8300ajv1pp6s0kzv0h"},{"name":"bazaar","_id":"cjwavei8300amv1pp0s7hmii2"},{"name":"bizarre","_id":"cjwavei8300apv1ppwtpt6zed"},{"name":"blue screen of death","_id":"cjwavei8400arv1pp22fjxv03"},{"name":"Linux","_id":"cjwavei8400asv1ppgsk6gz8z"},{"name":"Mac OS X","_id":"cjwavei8400atv1pp56re1uny"},{"name":"Ubuntu","_id":"cjwavei8500auv1pp9i8pe095"},{"name":"Windows","_id":"cjwavei8500avv1pp9g9v0bbj"},{"name":"expression","_id":"cjwavei8600azv1pp185out7e"},{"name":"language","_id":"cjwavei8600b2v1ppgpwksm6g"},{"name":"words","_id":"cjwavei8700b5v1ppor78ppev"},{"name":"Operating Systems","_id":"cjwavei8800bav1ppp27r0qv3"},{"name":"Unix","_id":"cjwavei8800bdv1ppboehbjkn"},{"name":"Vista","_id":"cjwavei8800bev1pp80ekk5tu"},{"name":"Vista SP1","_id":"cjwavei8900bfv1ppo47uw1m8"},{"name":"Windows XP","_id":"cjwavei8900bgv1pp2a8ri6kn"},{"name":"html5","_id":"cjwavei8a00bkv1ppzpsdyz4u"},{"name":"svg","_id":"cjwavei8a00bnv1pp8f04qc9i"},{"name":"moving","_id":"cjwavei8b00btv1pp6kijjpp1"},{"name":"Seattle","_id":"cjwavei8b00bvv1pp25bfcus9"},{"name":"connection","_id":"cjwavei8c00bwv1ppwkj7ap8o"},{"name":"gaming","_id":"cjwavei8c00bzv1pp8hbq8mwc"},{"name":"relationships","_id":"cjwavei8d00c2v1pppx5l3mzl"},{"name":"social","_id":"cjwavei8d00c3v1pp8vwqrzrn"},{"name":"Amazon","_id":"cjwaveis500cev1ppg00ecjeq"},{"name":"Amazon.com","_id":"cjwaveis600ckv1ppsz7p23n1"},{"name":"AWS","_id":"cjwaveis700cnv1pprtst0vpm"},{"name":"SimpleDB","_id":"cjwaveis700cov1ppfw7d6fbk"}]}}